<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 1
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 1
>>>>>>> Isac


   1              		.syntax unified
   2              		.cpu cortex-m0plus
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ADC.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ADC_InitConfig,"ax",%progbits
  20              		.align	2
  21              		.global	ADC_InitConfig
  22              		.code	16
  23              		.thumb_func
  24              		.type	ADC_InitConfig, %function
  25              	ADC_InitConfig:
  26              	.LFB188:
  27              		.file 1 "Generated_Source\\PSoC6\\ADC.c"
   1:Generated_Source\PSoC6/ADC.c **** /***************************************************************************//**
   2:Generated_Source\PSoC6/ADC.c **** * \file     ADC.c
   3:Generated_Source\PSoC6/ADC.c **** * \version  3.10
   4:Generated_Source\PSoC6/ADC.c **** *
   5:Generated_Source\PSoC6/ADC.c **** * \brief
   6:Generated_Source\PSoC6/ADC.c **** * Provides the source code to the API for the ADC Component.
   7:Generated_Source\PSoC6/ADC.c **** *
   8:Generated_Source\PSoC6/ADC.c **** ********************************************************************************
   9:Generated_Source\PSoC6/ADC.c **** * \copyright
  10:Generated_Source\PSoC6/ADC.c **** * (c) 2017-2018, Cypress Semiconductor Corporation. All rights reserved.
  11:Generated_Source\PSoC6/ADC.c **** * This software, including source code, documentation and related
  12:Generated_Source\PSoC6/ADC.c **** * materials ("Software"), is owned by Cypress Semiconductor
  13:Generated_Source\PSoC6/ADC.c **** * Corporation ("Cypress") and is protected by and subject to worldwide
  14:Generated_Source\PSoC6/ADC.c **** * patent protection (United States and foreign), United States copyright
  15:Generated_Source\PSoC6/ADC.c **** * laws and international treaty provisions. Therefore, you may use this
  16:Generated_Source\PSoC6/ADC.c **** * Software only as provided in the license agreement accompanying the
  17:Generated_Source\PSoC6/ADC.c **** * software package from which you obtained this Software ("EULA").
  18:Generated_Source\PSoC6/ADC.c **** * If no EULA applies, Cypress hereby grants you a personal, nonexclusive,
  19:Generated_Source\PSoC6/ADC.c **** * non-transferable license to copy, modify, and compile the
  20:Generated_Source\PSoC6/ADC.c **** * Software source code solely for use in connection with Cypress's
  21:Generated_Source\PSoC6/ADC.c **** * integrated circuit products. Any reproduction, modification, translation,
  22:Generated_Source\PSoC6/ADC.c **** * compilation, or representation of this Software except as specified
  23:Generated_Source\PSoC6/ADC.c **** * above is prohibited without the express written permission of Cypress.
  24:Generated_Source\PSoC6/ADC.c **** * Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO
  25:Generated_Source\PSoC6/ADC.c **** * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
  26:Generated_Source\PSoC6/ADC.c **** * BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED
  27:Generated_Source\PSoC6/ADC.c **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  28:Generated_Source\PSoC6/ADC.c **** * PARTICULAR PURPOSE. Cypress reserves the right to make
  29:Generated_Source\PSoC6/ADC.c **** * changes to the Software without notice. Cypress does not assume any
  30:Generated_Source\PSoC6/ADC.c **** * liability arising out of the application or use of the Software or any
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 2
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 2
>>>>>>> Isac


  31:Generated_Source\PSoC6/ADC.c **** * product or circuit described in the Software. Cypress does not
  32:Generated_Source\PSoC6/ADC.c **** * authorize its products for use in any products where a malfunction or
  33:Generated_Source\PSoC6/ADC.c **** * failure of the Cypress product may reasonably be expected to result in
  34:Generated_Source\PSoC6/ADC.c **** * significant property damage, injury or death ("High Risk Product"). By
  35:Generated_Source\PSoC6/ADC.c **** * including Cypress's product in a High Risk Product, the manufacturer
  36:Generated_Source\PSoC6/ADC.c **** * of such system or application assumes all risk of such use and in doing
  37:Generated_Source\PSoC6/ADC.c **** * so agrees to indemnify Cypress against all liability.
  38:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
  39:Generated_Source\PSoC6/ADC.c **** #include "ADC.h"
  40:Generated_Source\PSoC6/ADC.c **** #include <sysint/cy_sysint.h>
  41:Generated_Source\PSoC6/ADC.c **** #include <cyfitter_sysint_cfg.h>
  42:Generated_Source\PSoC6/ADC.c **** 
  43:Generated_Source\PSoC6/ADC.c **** uint8_t ADC_initVar = 0u;
  44:Generated_Source\PSoC6/ADC.c **** uint8_t ADC_selected = 0u; /* 0 if no configuration selected. 1 otherwise. */
  45:Generated_Source\PSoC6/ADC.c **** uint32_t ADC_currentConfig = 0u; /* Currently active configuration */
  46:Generated_Source\PSoC6/ADC.c **** 
  47:Generated_Source\PSoC6/ADC.c **** /*******************************************************************************
  48:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_Start
  49:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//**
  50:Generated_Source\PSoC6/ADC.c **** *
  51:Generated_Source\PSoC6/ADC.c **** * \brief Performs all required initialization for this component and enables the
  52:Generated_Source\PSoC6/ADC.c **** *  power. The power will be set to the appropriate power based on the clock
  53:Generated_Source\PSoC6/ADC.c **** *  frequency.
  54:Generated_Source\PSoC6/ADC.c **** *
  55:Generated_Source\PSoC6/ADC.c **** * \param None
  56:Generated_Source\PSoC6/ADC.c **** *
  57:Generated_Source\PSoC6/ADC.c **** * \return None
  58:Generated_Source\PSoC6/ADC.c **** *
  59:Generated_Source\PSoC6/ADC.c **** * \sideeffect None
  60:Generated_Source\PSoC6/ADC.c **** *
  61:Generated_Source\PSoC6/ADC.c **** * \globalvars
  62:Generated_Source\PSoC6/ADC.c **** *  \ref ADC_initVar (RW)
  63:Generated_Source\PSoC6/ADC.c **** *
  64:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
  65:Generated_Source\PSoC6/ADC.c **** void ADC_Start(void)
  66:Generated_Source\PSoC6/ADC.c **** {
  67:Generated_Source\PSoC6/ADC.c ****     if (ADC_INIT_VAR_INIT_FLAG != (ADC_INIT_VAR_INIT_FLAG & ADC_initVar))
  68:Generated_Source\PSoC6/ADC.c ****     {
  69:Generated_Source\PSoC6/ADC.c ****         ADC_Init();
  70:Generated_Source\PSoC6/ADC.c ****         ADC_initVar |= ADC_INIT_VAR_INIT_FLAG;
  71:Generated_Source\PSoC6/ADC.c ****     }
  72:Generated_Source\PSoC6/ADC.c **** 
  73:Generated_Source\PSoC6/ADC.c ****     ADC_Enable();
  74:Generated_Source\PSoC6/ADC.c **** 
  75:Generated_Source\PSoC6/ADC.c ****     return;
  76:Generated_Source\PSoC6/ADC.c **** }
  77:Generated_Source\PSoC6/ADC.c **** 
  78:Generated_Source\PSoC6/ADC.c **** /*******************************************************************************
  79:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_StartEx
  80:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//**
  81:Generated_Source\PSoC6/ADC.c **** *
  82:Generated_Source\PSoC6/ADC.c **** * \brief This function starts the ADC and sets the Interrupt
  83:Generated_Source\PSoC6/ADC.c **** * Service Routine to the provided address using the
  84:Generated_Source\PSoC6/ADC.c **** * Cy_SysInt_Init() function. Refer to the Interrupt component
  85:Generated_Source\PSoC6/ADC.c **** * datasheet for more information on the Cy_SysInt_Init() function.
  86:Generated_Source\PSoC6/ADC.c **** *
  87:Generated_Source\PSoC6/ADC.c **** * \param address This is the address of a user defined function for the ISR.
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 3
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 3
>>>>>>> Isac


  88:Generated_Source\PSoC6/ADC.c **** *
  89:Generated_Source\PSoC6/ADC.c **** * \return None
  90:Generated_Source\PSoC6/ADC.c **** *
  91:Generated_Source\PSoC6/ADC.c **** * \sideeffect None
  92:Generated_Source\PSoC6/ADC.c **** *
  93:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
  94:Generated_Source\PSoC6/ADC.c **** void ADC_StartEx(cy_israddress userIsr)
  95:Generated_Source\PSoC6/ADC.c **** {
  96:Generated_Source\PSoC6/ADC.c ****     ADC_Start();
  97:Generated_Source\PSoC6/ADC.c **** 
  98:Generated_Source\PSoC6/ADC.c ****     /* Interrupt core assignment will be up to the user. Initialize and enable the interrupt*/
  99:Generated_Source\PSoC6/ADC.c ****     #ifdef ADC_IRQ__INTC_CORTEXM4_ASSIGNED
 100:Generated_Source\PSoC6/ADC.c ****     #if (CY_CPU_CORTEX_M4)
 101:Generated_Source\PSoC6/ADC.c ****         (void)Cy_SysInt_Init(&ADC_IRQ_cfg, userIsr);
 102:Generated_Source\PSoC6/ADC.c ****         NVIC_EnableIRQ(ADC_IRQ_cfg.intrSrc);
 103:Generated_Source\PSoC6/ADC.c ****     #endif
 104:Generated_Source\PSoC6/ADC.c ****     #endif
 105:Generated_Source\PSoC6/ADC.c **** 
 106:Generated_Source\PSoC6/ADC.c ****     #ifdef ADC_IRQ__INTC_CORTEXM0P_ASSIGNED
 107:Generated_Source\PSoC6/ADC.c ****     #if (CY_CPU_CORTEX_M0P)
 108:Generated_Source\PSoC6/ADC.c ****         (void)Cy_SysInt_Init(&ADC_IRQ_cfg, userIsr);
 109:Generated_Source\PSoC6/ADC.c ****         NVIC_EnableIRQ(ADC_IRQ_cfg.intrSrc);
 110:Generated_Source\PSoC6/ADC.c ****     #endif
 111:Generated_Source\PSoC6/ADC.c ****     #endif
 112:Generated_Source\PSoC6/ADC.c **** 
 113:Generated_Source\PSoC6/ADC.c **** }
 114:Generated_Source\PSoC6/ADC.c **** 
 115:Generated_Source\PSoC6/ADC.c **** /* ****************************************************************************
 116:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_InitConfig
 117:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//*
 118:Generated_Source\PSoC6/ADC.c **** *
 119:Generated_Source\PSoC6/ADC.c **** * \brief Configures all of the registers for a given configuration for scanning.
 120:Generated_Source\PSoC6/ADC.c **** *
 121:Generated_Source\PSoC6/ADC.c **** * \param scan Number of scan defined in the ADC.
 122:Generated_Source\PSoC6/ADC.c **** *
 123:Generated_Source\PSoC6/ADC.c **** * \return None
 124:Generated_Source\PSoC6/ADC.c **** *
 125:Generated_Source\PSoC6/ADC.c **** * \sideeffect None
 126:Generated_Source\PSoC6/ADC.c **** *
 127:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 128:Generated_Source\PSoC6/ADC.c **** void ADC_InitConfig(const ADC_CONFIG_STRUCT *config)
 129:Generated_Source\PSoC6/ADC.c **** {
  28              		.loc 1 129 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 4, -16
  36              		.cfi_offset 5, -12
  37              		.cfi_offset 6, -8
  38              		.cfi_offset 14, -4
  39 0002 0400     		movs	r4, r0
  40              	.LVL1:
  41              	.LBB38:
  42              	.LBB39:
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 4
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 4
>>>>>>> Isac


  43              	.LBB40:
  44              		.file 2 "Generated_Source\\PSoC6\\pdl\\drivers/peripheral/sysclk/cy_sysclk.h"
   1:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /***************************************************************************//**
   2:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \file cy_sysclk.h
   3:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \version 2.0
   4:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
   5:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Provides an API declaration of the sysclk driver.
   6:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
   7:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ********************************************************************************
   8:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \copyright
   9:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Copyright 2016-2020, Cypress Semiconductor Corporation. All rights reserved.
  10:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * You may use this file only in accordance with the license, terms, conditions,
  11:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * disclaimers, and limitations in the end user license agreement accompanying
  12:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * the software package with which this file was provided.
  13:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
  14:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
  15:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
  16:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk
  17:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
  18:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The System Clock (SysClk) driver contains the API for configuring system and
  19:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * peripheral clocks. 
  20:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  21:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The functions and other declarations used in this driver are in cy_sysclk.h. 
  22:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * You can include cy_pdl.h (ModusToolbox only) to get access to all functions 
  23:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * and declarations in the PDL. 
  24:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  25:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Firmware uses the API to configure , enable, or disable a clock.
  26:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * 
  27:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The clock system includes a variety of resources that can vary per device, including:
  28:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * - Internal clock sources such as internal oscillators
  29:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * - External clock sources such as crystal oscillators or a signal on an I/O pin
  30:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * - Generated clocks such as an FLL, a PLL, and peripheral clocks
  31:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  32:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Consult the Technical Reference Manual for your device for details of the 
  33:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * clock system.
  34:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  35:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The PDL defines clock system capabilities in:\n
  36:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * devices\<family\>/<series\>/include\<series\>_config.h. (E.g.
  37:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * devices/psoc6/include/psoc6_01_config.h).
  38:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * User-configurable clock speeds are defined in the file system_<series>.h.
  39:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  40:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * As an illustration of the clocking system, the following diagram shows the
  41:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * PSoC 63 series clock tree. The actual tree may vary depending on the device series.
  42:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Consult the Technical Reference Manual for your device for details.
  43:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * ![](sysclk_tree.png)
  44:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  45:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The sysclk driver supports multiple peripheral clocks, as well as the fast 
  46:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * clock, slow clock, backup domain clock, timer clock, and pump clock. The API
  47:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * for any given clock contains the functions to manage that clock. Functions
  48:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * for clock measurement and trimming are also provided.
  49:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  50:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \section group_sysclk_configuration Configuration Considerations
  51:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The availability of clock functions depend on the availability of the chip
  52:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * resources that support those functions. Consult the device TRM before
  53:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * attempting to use these functions.
  54:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  55:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * LPActive and LPSleep power modes limit the maximum clock frequency allowed
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 5
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 5
>>>>>>> Isac


  56:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * on the device. Refer to the SysPm driver and the TRM for details.
  57:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  58:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \section group_sysclk_more_information More Information
  59:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Refer to the technical reference manual (TRM) and the device datasheet.
  60:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
  61:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \section group_sysclk_MISRA MISRA-C Compliance
  62:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * <table class="doxtable">
  63:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
  64:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <th>MISRA Rule</th>
  65:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <th>Rule Class (Required/Advisory)</th>
  66:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <th>Rule Description</th>
  67:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <th>Description of Deviation(s)</th>
  68:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
  69:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
  70:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>10.3</td>
  71:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>R</td>
  72:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>A composite expression of the "essentially unsigned" type is being
  73:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         cast to a different type category.</td>
  74:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>The value got from the bitfield physically cannot exceed the enumeration
  75:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         that describes this bitfield. So, the code is safe by design.</td>
  76:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
  77:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
  78:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>10.4</td>
  79:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>R</td>
  80:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>A composite floating point expression is being cast to double, or unsigned.</td>
  81:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Casting a floating-point calculation result to an integer.</td>
  82:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
  83:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
  84:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>13.4</td>
  85:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>R</td>
  86:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>The controlling expression of a for statement shall not contain any objects of floating t
  87:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Scanning through a list of floating point values: only greater_than/less_then checks are 
  88:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         with floating point numbers, the loop counter is integer. </td>
  89:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
  90:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
  91:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>16.7</td>
  92:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>R</td>
  93:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>The object addressed by the pointer parameter is not modified and so the pointer could be
  94:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         type 'pointer to const'.</td>
  95:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>The callback function for system power management (SysPm) must be of generic callback typ
  96:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         contains non-const pointer parameter.</td>
  97:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
  98:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * </table>
  99:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 100:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \section group_sysclk_changelog Changelog
 101:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * <table class="doxtable">
 102:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr><th>Version</th><th>Changes</th><th>Reason for Change</th></tr>
 103:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 104:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>2.0</td>
 105:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Updated the ECO trimming values calculation algorithm in the \ref Cy_SysClk_EcoConfigure 
 106:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         This change may invalidate the already used crystals, in cases: \n
 107:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         * The crystal frequency is less than 16 MHz (the supported crystal frequency range was ch
 108:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         * The maximum amplitude (internal calculation value) is less than 0.65 V. \n
 109:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 110:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         Also the second parameter cSum takes into account both C0 (the crystal itself shunt capac
 111:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         For detail, refer the \ref Cy_SysClk_EcoConfigure documentation and the ECO Trimming sect
 112:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Enhanced the ECO performance for high-noise conditions that result from simultaneous swit
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 6
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 6
>>>>>>> Isac


 113:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 114:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 115:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td rowspan="4">1.20</td>
 116:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Flattened the organization of the driver source code into the single 
 117:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         source directory and the single include directory.
 118:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     </td>
 119:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Driver library directory-structure simplification.</td>
 120:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 121:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 122:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Updated \ref Cy_SysClk_FllLocked function description</td>
 123:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>The SRSS_ver1 HW details clarification</td>
 124:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 125:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 126:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Removed the following functions:
 127:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         - Cy_SysClk_FllLostLock
 128:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         - Cy_SysClk_WcoConfigureCsv
 129:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         - Cy_SysClk_ClkHfConfigureCsv
 130:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     </td>
 131:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>No hardware support for the removed functions.</td>
 132:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 133:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 134:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Added register access layer. Use register access macros instead
 135:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         of direct register access using dereferenced pointers.</td>
 136:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Makes register access device-independent, so that the PDL does 
 137:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         not need to be recompiled for each supported part number.</td>
 138:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 139:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 140:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>1.11</td>
 141:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Updated the following functions. Now they use a semaphore when 
 142:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         try to read the status or configure the SysClk measurement counters:
 143:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         * Cy_SysClk_StartClkMeasurementCounters()
 144:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         * Cy_SysClk_ClkMeasurementCountersGetFreq()
 145:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 146:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         Now Cy_SysClk_ClkMeasurementCountersGetFreq() returns zero value,
 147:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         if during measurement device was in the Deep Sleep or partially
 148:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         blocking flash operation occurred </td>
 149:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Added arbiter mechanism for correct usage of the SysClk measurement 
 150:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *         counters</td>
 151:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 152:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 153:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>1.10.1</td>
 154:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Renamed Power Management section to Low Power Callback section</td>
 155:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Documentation update and clarification</td>
 156:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 157:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 158:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td rowspan="5">1.10</td>
 159:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Updated FLL parameter calculation</td>
 160:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Support low frequency sources</td>
 161:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 162:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 163:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Added Cy_SysClk_PiloSetTrim() and Cy_SysclkPiloGetTrim() functions</td>
 164:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Support PILO manual trims</td>
 165:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 166:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 167:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Made Cy_SysClk_FllLostLock() function dependent on SRSS v1</td>
 168:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Feature is not supported in SRSS v1</td>
 169:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 7
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 7
>>>>>>> Isac


 170:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 171:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Updated Cy_SysClk_DeepSleepCallback() to save/restore both FLL and PLL settings</td>
 172:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>The function should return when the lock is established or a timeout has occurred</td>
 173:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 174:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 175:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>General documentation updates</td>
 176:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td></td>
 177:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 178:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   <tr>
 179:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>1.0</td>
 180:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td>Initial version</td>
 181:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     <td></td>
 182:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   </tr>
 183:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * </table>
 184:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 185:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_macros           Macros
 186:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 187:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 188:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_enums           General Enumerated Types
 189:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 190:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_returns         Function return values
 191:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 192:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_eco             External Crystal Oscillator (ECO)
 193:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 194:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The External Crystal Oscillator (ECO) is a clock source that consists
 195:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   of an oscillator circuit that drives an external crystal through its
 196:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   dedicated ECO pins. The ECO is a source clock that can be used to
 197:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   source one or more clock paths (Refer to \ref group_sysclk_path_src).
 198:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   These clock paths can then source the processors and peripherals in
 199:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the device.
 200:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 201:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The ECO relies on the presence of an external crystal. The pins
 202:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   connected to this crystal must be configured to operate in analog
 203:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   drive mode with HSIOM connection set to GPIO control (HSIOM_SEL_GPIO).
 204:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 205:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_eco_funcs       Functions
 206:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 207:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_path_src           Clock Path Source
 208:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 209:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Clock paths are a series of multiplexers that allow a source clock
 210:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   to drive multiple clocking resources down the chain. These paths are
 211:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   used for active domain clocks that are not operational during chip 
 212:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   deep-sleep, hibernate and off modes. Illustrated below is a diagram
 213:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   of the clock paths for the PSoC 63 series, showing the first three
 214:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   clock paths. The source clocks for these paths are highlighted in
 215:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the red box.
 216:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 217:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - IMO: 8 MHz Internal Main Oscillator (Default)
 218:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - EXTCLK: External clock (signal brought in through dedicated pins)
 219:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - ECO: External Crystal Oscillator (requires external crystal on dedicated pins)
 220:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - ALTHF: Select on-chip signals (e.g. BLE ECO)
 221:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - Digital Signal (DSI): Digital signal from a UDB source
 222:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 223:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Some clock paths such as path 0 and path 1 have additional resources
 224:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   that can be utilized to provide a higher frequency clock. For example, 
 225:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   path 0 source clock can be used as the reference clock for the FLL and 
 226:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   path 1 source clock can be used as the reference clock for the PLL.
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 8
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 8
>>>>>>> Isac


 227:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 228:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_path_source.png)
 229:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 230:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \note The PDL driver cannot configure a clock path to use Digital Signal
 231:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Interconnect (DSI) outputs as sources. This must be done through DSI
 232:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   configuration tool such as PSoC Creator.
 233:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 234:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_path_src_funcs     Functions
 235:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_path_src_enums     Enumerated Types
 236:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 237:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_fll             Frequency Locked Loop (FLL)
 238:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 239:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The FLL is a clock generation circuit that can be used to produce a
 240:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   higher frequency clock from a reference clock. The output clock exhibits
 241:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   some characteristics of the reference clock such as the accuracy of the
 242:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   source. However other attributes such as the clock phase are not preserved.
 243:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The FLL is similar in purpose to a (Phase locked loop) PLL but they are
 244:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   not equivalent.
 245:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 246:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - They may have different frequency ranges.
 247:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - The FLL starts up (locks) faster and consumes less current than the PLL.
 248:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - The FLL accepts a source clock with lower frequency than PLL, such as the WCO (32 KHz). 
 249:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - The FLL does not lock phase. The hardware consist of a counter with a
 250:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     current-controlled oscillator (CCO). The counter counts the number of output
 251:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     clock edges in a reference clock period and adjusts the CCO until the
 252:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     expected ratio is achieved (locked). After initial lock, the CCO is
 253:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     adjusted dynamically to keep the ratio within tolerance. The lock tolerance
 254:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *     is user-adjustable.
 255:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_fll.png)
 256:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 257:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The SysClk driver supports two models for configuring the FLL. The first
 258:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   model is to call the Cy_SysClk_FllConfigure() function, which calculates the 
 259:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   necessary parameters for the FLL at run-time. This may be necessary for dynamic
 260:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   run-time changes to the FLL. However this method is slow as it needs to perform 
 261:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the calculation before configuring the FLL. The other model is to call 
 262:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Cy_SysClk_FllManualConfigure() function with pre-calculated parameter values. 
 263:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   This method is faster but requires prior knowledge of the necessary parameters.
 264:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Consult the device TRM for the FLL calculation equations.
 265:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 266:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_fll_funcs       Functions
 267:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_fll_structs     Data Structures
 268:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_fll_enums       Enumerated Types
 269:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 270:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_pll             Phase Locked Loop (PLL)
 271:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 272:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The PLL is a clock generation circuit that can be used to produce a
 273:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   higher frequency clock from a reference clock. The output clock exhibits
 274:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   characteristics of the reference clock such as the accuracy of the source
 275:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   and its phase. The PLL is similar in purpose to a (Frequency locked loop) FLL
 276:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   but they are not equivalent.
 277:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 278:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - They may have different frequency ranges.
 279:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - The PLL starts up more slowly and consumes more current than the FLL.
 280:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - The PLL requires a higher frequency source clock than PLL. 
 281:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_pll.png)
 282:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 283:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The SysClk driver supports two models for configuring the PLL. The first
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 9
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 9
>>>>>>> Isac


 284:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   model is to call the Cy_SysClk_PllConfigure() function, which calculates the 
 285:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   necessary parameters for the PLL at run-time. This may be necessary for dynamic
 286:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   run-time changes to the PLL. However this method is slow as it needs to perform 
 287:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the calculation before configuring the PLL. The other model is to call 
 288:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Cy_SysClk_PllManualConfigure() function with pre-calculated parameter values. 
 289:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   This method is faster but requires prior knowledge of the necessary parameters.
 290:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Consult the device TRM for the PLL calculation equations.
 291:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 292:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_pll_funcs       Functions
 293:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_pll_structs     Data Structures
 294:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 295:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_ilo             Internal Low-Speed Oscillator (ILO)
 296:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 297:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The ILO operates with no external components and outputs a stable clock at
 298:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   32.768 kHz nominal. The ILO is relatively low power and low accuracy. It is 
 299:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   available in all power modes and can be used as a source for the Backup domain clock.
 300:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_backup.png)
 301:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 302:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   To ensure the ILO remains active in Hibernate mode, and across power-on-reset
 303:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   (POR) or brown out detect (BOD), firmware must call Cy_SysClk_IloHibernateOn(). 
 304:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 305:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Additionally, the ILO clock can be trimmed to +/- 1.5% of nominal frequency using
 306:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   a higher precision clock source. Use the \ref group_sysclk_calclk API to measure 
 307:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the current ILO frequency before trimming.
 308:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 309:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \note The ILO is always the source clock for the \ref group_wdt. Therefore:
 310:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - The WDT must be unlocked when making an ILO function call in the PDL
 311:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - It is recommended to always have the ILO enabled
 312:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 313:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_ilo_funcs       Functions
 314:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 315:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_pilo            Precision Internal Low-Speed Oscillator (PILO)
 316:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 317:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   PILO provides a higher accuracy 32.768 kHz clock than the \ref group_sysclk_ilo "ILO".
 318:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   When periodically calibrated using a high-accuracy clock such as the
 319:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \ref group_sysclk_eco "ECO", the PILO can achieve 250 ppm accuracy of nominal frequency.
 320:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The PILO is capable of operating in device Active, Sleep and Deep-Sleep power modes. 
 321:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   It is not available in Hibernate mode.
 322:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 323:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The PILO can be used as a source for the \ref group_sysclk_clk_lf. However,
 324:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   because PILO is disabled in Hibernate mode, RTC timers cannot operate in this mode
 325:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   when clocked using the PILO. Instead, either the \ref group_sysclk_ilo "ILO" or
 326:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \ref group_sysclk_wco "WCO" should be used when hibernate operation is required. 
 327:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 328:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_backup.png)
 329:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 330:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Periodic calibration to a high-accuracy clock (such as ECO) is required to
 331:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   maintain accuracy. The application should use the functions described in the 
 332:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \ref group_sysclk_calclk API to measure the current PILO frequency before trimming.
 333:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 334:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_pilo_funcs      Functions
 335:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 336:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_calclk          Clock Measurement
 337:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 338:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   These functions measure the frequency of a specified clock relative to a
 339:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   reference clock. They are typically called in the following order:
 340:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 10
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 10
>>>>>>> Isac


 341:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   1. Specify the measured clock, the count, and the reference clock
 342:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   2. Start the counters
 343:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   3. Wait for the measurement counter to finish counting
 344:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   4. Retrieve the measured frequency
 345:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 346:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \note These functions may also be used as part of a clock trimming
 347:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   process. Refer to the \ref group_sysclk_trim "Clock Trim" API.
 348:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 349:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_calclk_funcs    Functions
 350:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_calclk_enums    Enumerated Types
 351:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 352:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_trim            Clock Trim (ILO, PILO)
 353:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 354:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   These functions perform a single trim operation on the ILO or PILO. Each
 355:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   function's parameter is the actual frequency of the clock. To measure the
 356:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   frequency, use the functions described in the \ref group_sysclk_calclk API.
 357:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 358:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   To trim the clock as close as possible to the target frequency, multiple
 359:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   calls to the trim function may be needed. A typical usage example is to:
 360:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   1. Call the clock measurement functions to get the actual frequency of the clock
 361:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   2. Call the trim function, passing in the measured frequency
 362:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   3. Repeat the above until the trim function reports that the clock is trimmed to within limits.
 363:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 364:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_trim_funcs      Functions
 365:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 366:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_pm              Low Power Callback
 367:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 368:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Entering and exiting low power modes require compatible clock configurations
 369:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   to be set before entering low power and restored upon wake-up and exit. The
 370:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   SysClk driver provides a Cy_SysClk_DeepSleepCallback() function to support
 371:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   deep-sleep mode entry. 
 372:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 373:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   This function can be called either by itself before initiating low-power mode
 374:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   entry or it can be used in conjunction with the SysPm driver as a registered 
 375:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   callback. To do so, register this function as a callback before calling 
 376:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Cy_SysPm_DeepSleep(). Specify \ref CY_SYSPM_DEEPSLEEP as the callback type, 
 377:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   and call Cy_SysPm_RegisterCallback().
 378:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   
 379:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \note If the FLL or PLL source is the ECO, this function must be called.
 380:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 381:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_pm_funcs        Functions
 382:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 383:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_wco             Watch Crystal Oscillator (WCO)
 384:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 385:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The WCO is a highly accurate 32.768 kHz clock source capable of operating
 386:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   in all power modes (excluding the Off mode). It is the primary clock source for
 387:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the backup domain clock, which is used by the real-time clock (RTC). The 
 388:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   WCO can also be used as a source for the low-frequency clock to support other
 389:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   low power mode peripherals.
 390:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 391:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_backup.png)
 392:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 393:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The WCO requires the configuration of the dedicated WCO pins (SRSS_WCO_IN_PIN,
 394:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   SRSS_WCO_OUT_PIN). These must be configured as Analog Hi-Z drive modes and the
 395:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   HSIOM selection set to GPIO. The WCO can also be used in bypass mode, where
 396:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   an external 32.768 kHz square wave is brought in directly through the 
 397:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   SRSS_WCO_OUT_PIN pin.
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 11
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 11
>>>>>>> Isac


 398:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 399:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Some devices support a built-in clock supervisor (CSV) in the WCO. The clock
 400:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   supervisor detects if the WCO has been lost; that is, the WCO is no longer 
 401:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   producing clock pulses. The CSV does this by checking to ensure there is at 
 402:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   least one WCO clock pulse within a certain time window. The ILO or PILO can be
 403:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the supervising clock. Firmware can configure the CSV to trigger a fault,
 404:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   a reset, or both after specified cycles of the supervising clock.
 405:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 406:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_wco_funcs       Functions
 407:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_wco_structs     Data Structures
 408:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_wco_enums       Enumerated Types
 409:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 410:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_hf          High-Frequency Clocks
 411:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 412:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Multiple high frequency clocks (CLK_HF) are available in the device. For example,
 413:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   PSoC 63 series has five high-frequency root clocks. Each CLK_HF has a particular
 414:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   connection and chip-specific destination on the device.
 415:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 416:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   |Name     |Description                                             |
 417:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   |:--------|:-------------------------------------------------------|
 418:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   |CLK_HF[0]| Root clock for CPUs, PERI, and AHB infrastructure      |
 419:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   |CLK_HF[1]| Root clock for the PDM/PCM and I2S audio subsystem     |
 420:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   |CLK_HF[2]| Root clock for the Serial Memory Interface subsystem   |
 421:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   |CLK_HF[3]| Root clock for USB communications                      |
 422:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   |CLK_HF[4]| Clock output on clk_ext pin (when used as an output)   |
 423:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 424:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_hf.png)
 425:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 426:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Note this is a particular example. The actual tree may vary depending on the device series.
 427:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Consult the Technical Reference Manual for your device for details.
 428:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   
 429:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   High frequency clocks are sourced by path clocks, which should be configured
 430:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   first. An exception to this rule is CLK_HF[0], which cannot be disabled. 
 431:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   This divided clock drives the core processors and the peripherals in the system.
 432:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   In order to update its clock source, CLK_HF[0] source must be selected without
 433:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   disabling the clock.
 434:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 435:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_hf_dist.png)
 436:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 437:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Some devices support a clock supervisor (CSV) for each root clock. These
 438:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   can detect frequency loss, or monitor that the clock frequency stays within
 439:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   a specified range. The possible supervising clocks are IMO, ECO, or ALTHF. 
 440:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Loss detection and frequency monitoring can be enabled or disabled independently.
 441:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Each has its own programmable action that occurs on detection of an error.
 442:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 443:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_hf_funcs    Functions
 444:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_hf_structs  Data Structures
 445:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_hf_enums    Enumerated Types
 446:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 447:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_fast        Fast Clock
 448:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 449:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The fast clock drives the "fast" processor (e.g. Cortex-M4 processor in PSoC 6).
 450:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   This clock is sourced by CLK_HF[0] (\ref group_sysclk_clk_hf "HF Clocks").
 451:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   A divider value of 1~256 can be used to further divide the CLK_HF[0] to a
 452:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   desired clock speed for the processor.
 453:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 454:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_fast.png)
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 12
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 12
>>>>>>> Isac


 455:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 456:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_fast_funcs  Functions
 457:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 458:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_peri        Peripheral Clock
 459:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 460:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The peripheral clock is a divided clock of CLK_HF0 (\ref group_sysclk_clk_hf "HF Clocks").
 461:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   It is the source clock for the \ref group_sysclk_clk_slow, and most active domain
 462:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   peripheral clocks (\ref group_sysclk_clk_peripheral). A divider value of 1~256 
 463:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   can be used to further divide the CLK_HF[0] to a desired clock speed for the peripherals.
 464:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 465:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_peri.png)
 466:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 467:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_peri_funcs  Functions
 468:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 469:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_peripheral  Peripherals Clock Dividers
 470:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 471:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   There are multiple peripheral clock dividers that, in effect, create 
 472:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   multiple separate peripheral clocks. The available dividers vary per device 
 473:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   series. As an example, for the PSoC 63 series there are 29 dividers:
 474:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 475:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - eight 8-bit dividers
 476:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - sixteen 16-bit dividers
 477:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - four fractional 16.5-bit dividers (16 integer bits, 5 fractional bits)
 478:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   - one fractional 24.5-bit divider (24 integer bits, 5 fractional bits)
 479:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 480:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 481:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The 8-bit and 16-bit dividers are integer dividers. A divider value of 1 
 482:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   means the output frequency matches the input frequency (that is, there is
 483:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   no change). Otherwise the frequency is divided by the value of the divider.
 484:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   For example, if the input frequency is 50 MHz, and the divider is value 10,
 485:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the output frequency is 5 MHz.
 486:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 487:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The five fractional bits supports further precision in 1/32nd increments. For
 488:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   example, a divider with an integer value of 3 and a fractional value of
 489:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   4 (4/32) results in a divider of 3.125. Fractional dividers are useful when
 490:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   a high-precision clock is required, for example, for a UART/SPI serial
 491:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   interface.
 492:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 493:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_peri_divs.png)
 494:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 495:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Each peripheral can connect to any one of the programmable dividers. A
 496:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   particular peripheral clock divider can drive multiple peripherals.
 497:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   
 498:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The SysClk driver also supports phase aligning two peripheral clock dividers using
 499:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Cy_SysClk_PeriphEnablePhaseAlignDivider(). Alignment works for both integer
 500:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   and fractional dividers. The divider to which a second divider is aligned
 501:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   must already be enabled.
 502:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 503:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_peripheral_funcs Functions
 504:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_peripheral_enums Enumerated Types
 505:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 506:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_slow        Slow Clock
 507:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 508:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The slow clock is the source clock for the "slow" processor (e.g. Cortex-M0+ in PSoC 6).
 509:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   This clock is a divided version of the \ref group_sysclk_clk_peri, which in turn is 
 510:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   a divided version of CLK_HF[0] (\ref group_sysclk_clk_hf "HF Clocks"). A divider 
 511:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   value of 1~256 can be used to further divide the Peri clock to a desired clock speed
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 13
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 13
>>>>>>> Isac


 512:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   for the processor.
 513:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 514:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_slow.png)
 515:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 516:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_slow_funcs  Functions
 517:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 518:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_lf          Low-Frequency Clock
 519:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 520:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The low-frequency clock is the source clock for the \ref group_mcwdt
 521:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   and can be the source clock for \ref group_sysclk_clk_bak, which drives the
 522:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \ref group_rtc.
 523:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   
 524:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The low-frequency clock has three possible source clocks:
 525:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \ref group_sysclk_ilo "ILO", \ref group_sysclk_pilo "PILO", and
 526:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \ref group_sysclk_wco "WCO".
 527:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 528:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   ![](sysclk_lf.png)
 529:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 530:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_lf_funcs    Functions
 531:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_lf_enums    Enumerated Types
 532:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 533:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_timer       Timer Clock
 534:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 535:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The timer clock can be a source for the alternative clock driving 
 536:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   the \ref group_arm_system_timer. It can also be used as a reference clock 
 537:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   for a counter in the \ref group_energy_profiler "Energy Profiler".
 538:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   
 539:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The timer clock is a divided clock of either the IMO or CLK_HF[0]
 540:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   (\ref group_sysclk_clk_hf "HF Clocks").
 541:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 542:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_timer_funcs Functions
 543:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_timer_enums Enumerated Types
 544:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 545:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_pump        Pump Clock
 546:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 547:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The pump clock is a clock source used to provide analog precision in low voltage
 548:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   applications. Depending on the usage scenario, it may be required to drive the
 549:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   internal voltage pump for the Continuous Time Block mini (CTBm) in the analog 
 550:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   subsystem. The pump clock is a divided clock of one of the clock paths 
 551:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   (\ref group_sysclk_path_src).
 552:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 553:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_pump_funcs  Functions
 554:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_pump_enums  Enumerated Types
 555:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
 556:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_clk_bak         Backup Domain Clock
 557:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 558:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   The backup domain clock drives the \ref group_rtc.
 559:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   This clock has two possible source clocks: \ref group_sysclk_wco "WCO"
 560:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   or the \ref group_sysclk_clk_lf. In turn the low frequency clock is sourced by
 561:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \ref group_sysclk_ilo "ILO", \ref group_sysclk_pilo "PILO", or
 562:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \ref group_sysclk_wco "WCO". Typically the ILO is not suitable as an RTC source,
 563:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   because of its low accuracy. However the ILO does operate in hibernate mode and
 564:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   may be used as an alternative to the WCO with a tradeoff in precision.
 565:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 566:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_bak_funcs   Functions
 567:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   \defgroup group_sysclk_clk_bak_enums   Enumerated Types
 568:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \}
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 14
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 14
>>>>>>> Isac


 569:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 570:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 571:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #if !defined(CY_SYSCLK_H)
 572:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define CY_SYSCLK_H
 573:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 574:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #include <stdbool.h>
 575:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #include "cy_device.h"
 576:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #include "cy_device_headers.h"
 577:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #include "cy_syslib.h"
 578:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #include "cy_syspm.h"
 579:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 580:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 581:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #if defined(__cplusplus)
 582:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** extern "C" {
 583:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #endif /* __cplusplus */
 584:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 585:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 586:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_macros
 587:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 588:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 589:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Driver major version */
 590:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define  CY_SYSCLK_DRV_VERSION_MAJOR   2
 591:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Driver minor version */
 592:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define  CY_SYSCLK_DRV_VERSION_MINOR   0
 593:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Sysclk driver identifier */
 594:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define CY_SYSCLK_ID   CY_PDL_DRV_ID(0x12U)
 595:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 596:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_macros */
 597:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 598:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 599:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_returns
 600:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 601:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 602:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Defines general-purpose function return values. */
 603:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
 604:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 605:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_SUCCESS       = 0u, /**< Command completed with no errors */
 606:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_BAD_PARAM     = (CY_SYSCLK_ID | CY_PDL_STATUS_ERROR | 1U), /**< Invalid function inpu
 607:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_TIMEOUT       = (CY_SYSCLK_ID | CY_PDL_STATUS_ERROR | 2U), /**< Timeout occurred */
 608:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_INVALID_STATE = (CY_SYSCLK_ID | CY_PDL_STATUS_ERROR | 3U)  /**< Clock is in an invali
 609:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_sysclk_status_t;
 610:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_returns */
 611:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 612:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \cond INTERNAL */
 613:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* Calculate a / b with rounding to the nearest integer. a and b must have the same sign. */
 614:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define CY_SYSCLK_DIV_ROUND(a, b) (((a) + ((b) / 2u)) / (b))
 615:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* Calculate a / b with rounding up if remainder != 0. a and b must both be positive. */
 616:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define CY_SYSCLK_DIV_ROUNDUP(a, b) ((((a) - 1U) / (b)) + 1U)
 617:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \endcond */
 618:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 619:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 620:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 621:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ===========================    ECO SECTION    ============================ */
 622:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 623:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 624:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 625:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_macros
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 15
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 15
>>>>>>> Isac


 626:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 627:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 628:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 629:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 630:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \defgroup group_sysclk_ecostatus ECO status
 631:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 632:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Constants used for expressing ECO status.
 633:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 634:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define CY_SYSCLK_ECOSTAT_AMPLITUDE  0UL /**< \brief ECO does not have sufficient amplitude */
 635:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define CY_SYSCLK_ECOSTAT_INACCURATE 1UL /**< \brief ECO may not be meeting accuracy and duty cycle
 636:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** #define CY_SYSCLK_ECOSTAT_STABLE     2UL /**< \brief ECO has fully stabilized */
 637:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} */
 638:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 639:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_macros */
 640:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 641:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 642:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 643:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_eco_funcs
 644:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 645:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 646:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_EcoConfigure(uint32_t freq, uint32_t cLoad, uint32_t esr, uint32_t 
 647:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_EcoEnable(uint32_t timeoutus);
 648:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_EcoDisable(void);
 649:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint32_t Cy_SysClk_EcoGetStatus(void);
 650:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 651:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
 652:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_EcoDisable
 653:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
 654:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 655:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Disables the external crystal oscillator (ECO). This function should not be
 656:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * called if the ECO is sourcing clkHf[0].
 657:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 658:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
 659:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_EcoDisable
 660:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 661:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
 662:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_EcoDisable(void)
 663:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 664:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     SRSS_CLK_ECO_CONFIG &= (uint32_t)~_VAL2FLD(SRSS_CLK_ECO_CONFIG_ECO_EN, 1U); /* 0 = disable */
 665:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
 666:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 667:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
 668:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_EcoGetStatus
 669:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
 670:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 671:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports the current status of the external crystal oscillator (ECO).
 672:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 673:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return
 674:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_ECOSTAT_AMPLITUDE = ECO does not have sufficient amplitude<br>
 675:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_ECOSTAT_INACCURATE = ECO has sufficient amplitude but may not be meeting accuracy and d
 676:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_ECOSTAT_STABLE = ECO has fully stabilized
 677:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 678:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
 679:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_EcoGetStatus
 680:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 681:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
 682:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint32_t Cy_SysClk_EcoGetStatus(void)
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 16
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 16
>>>>>>> Isac


 683:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 684:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint32_t retVal = (SRSS_CLK_ECO_STATUS & (SRSS_CLK_ECO_STATUS_ECO_OK_Msk | SRSS_CLK_ECO_STATUS_
 685:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     /* if ECO is not ready, just report the ECO_OK bit. Otherwise report 2 = ECO ready */
 686:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return ((0UL == (retVal & SRSS_CLK_ECO_STATUS_ECO_READY_Msk)) ? retVal : CY_SYSCLK_ECOSTAT_STAB
 687:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
 688:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_eco_funcs */
 689:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 690:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 691:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 692:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ====================    INPUT MULTIPLEXER SECTION    ===================== */
 693:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 694:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 695:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_path_src_enums
 696:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 697:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 698:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 699:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *   Input multiplexer clock sources
 700:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 701:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
 702:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 703:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_IMO    =     0U, /**< Select the IMO as the output of the path mux */
 704:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_EXT    =     1U, /**< Select the EXT as the output of the path mux */
 705:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_ECO    =     2U, /**< Select the ECO as the output of the path mux */
 706:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_ALTHF  =     3U, /**< Select the ALTHF as the output of the path mux.
 707:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            *   Make sure the ALTHF clock source is available on use
 708:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            */
 709:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_DSIMUX =     4U, /**< Select the DSI MUX output as the output of the path 
 710:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_DSI    = 0x100U, /**< Select a DSI signal (0 - 15) as the output of the DS
 711:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            *   Make sure the DSI clock sources are available on use
 712:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            */
 713:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_ILO    = 0x110U, /**< Select the ILO (16) as the output of the DSI mux and
 714:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_WCO    = 0x111U, /**< Select the WCO (17) as the output of the DSI mux and
 715:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_ALTLF  = 0x112U, /**< Select the ALTLF (18) as the output of the DSI mux a
 716:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            *   Make sure the ALTLF clock sources in available on us
 717:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            */
 718:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKPATH_IN_PILO   = 0x113U  /**< Select the PILO (19) as the output of the DSI mux an
 719:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            *   Make sure the PILO clock sources in available on use
 720:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            */
 721:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_clkpath_in_sources_t;
 722:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_path_src_enums */
 723:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 724:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 725:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_path_src_funcs
 726:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 727:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 728:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_ClkPathSetSource(uint32_t clkPath, cy_en_clkpath_in_sources_t sourc
 729:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_clkpath_in_sources_t Cy_SysClk_ClkPathGetSource(uint32_t clkPath);
 730:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_path_src_funcs */
 731:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 732:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 733:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 734:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ===========================    FLL SECTION    ============================ */
 735:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 736:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 737:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_fll_enums
 738:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 739:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 17
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 17
>>>>>>> Isac


 740:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** FLL and PLL output mode.
 741:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * See registers CLK_FLL_CONFIG3 and CLK_PLL_CONFIG0, bits BYPASS_SEL.
 742:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 743:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
 744:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 745:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLLPLL_OUTPUT_AUTO   = 0U, /**< Output FLL/PLL input source when not locked, and FLL/
 746:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLLPLL_OUTPUT_AUTO1  = 1U, /**< Same as AUTO */
 747:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLLPLL_OUTPUT_INPUT  = 2U, /**< Output FLL/PLL input source regardless of lock status
 748:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLLPLL_OUTPUT_OUTPUT = 3U  /**< Output FLL/PLL output regardless of lock status. This
 749:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_fll_pll_output_mode_t;
 750:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 751:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** FLL current-controlled oscillator (CCO) frequency ranges.
 752:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * See register CLK_FLL_CONFIG4, bits CCO_RANGE.
 753:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 754:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
 755:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 756:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLL_CCO_RANGE0, /**< Target frequency is in range  48 -  64 MHz. */
 757:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLL_CCO_RANGE1, /**< Target frequency is in range  64 -  85 MHz. */
 758:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLL_CCO_RANGE2, /**< Target frequency is in range  85 - 113 MHz. */
 759:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLL_CCO_RANGE3, /**< Target frequency is in range 113 - 150 MHz. */
 760:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_FLL_CCO_RANGE4  /**< Target frequency is in range 150 - 200 MHz. */
 761:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_fll_cco_ranges_t;
 762:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_fll_enums */
 763:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 764:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 765:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_fll_structs
 766:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 767:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 768:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Structure containing information for manual configuration of FLL.
 769:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 770:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef struct
 771:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 772:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint32_t                    fllMult;         /**< CLK_FLL_CONFIG  register, FLL_MULT bits */
 773:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint16_t                    refDiv;          /**< CLK_FLL_CONFIG2 register, FLL_REF_DIV bits */
 774:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_fll_cco_ranges_t      ccoRange;        /**< CLK_FLL_CONFIG4 register, CCO_RANGE bits */
 775:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     bool                        enableOutputDiv; /**< CLK_FLL_CONFIG  register, FLL_OUTPUT_DIV bit 
 776:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint16_t                    lockTolerance;   /**< CLK_FLL_CONFIG2 register, LOCK_TOL bits */
 777:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint8_t                     igain;           /**< CLK_FLL_CONFIG3 register, FLL_LF_IGAIN bits *
 778:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint8_t                     pgain;           /**< CLK_FLL_CONFIG3 register, FLL_LF_PGAIN bits *
 779:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint16_t                    settlingCount;   /**< CLK_FLL_CONFIG3 register, SETTLING_COUNT bits
 780:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_fll_pll_output_mode_t outputMode;      /**< CLK_FLL_CONFIG3 register, BYPASS_SEL bits */
 781:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint16_t                    cco_Freq;        /**< CLK_FLL_CONFIG4 register, CCO_FREQ bits */
 782:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_stc_fll_manual_config_t;
 783:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_fll_structs */
 784:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 785:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 786:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_fll_funcs
 787:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 788:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 789:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_FllConfigure(uint32_t inputFreq, uint32_t outputFreq, cy_en_fll_pll
 790:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_FllManualConfigure(const cy_stc_fll_manual_config_t *config);
 791:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** void Cy_SysClk_FllGetConfiguration(cy_stc_fll_manual_config_t *config);
 792:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_FllEnable(uint32_t timeoutus);
 793:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_FllLocked(void);
 794:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_FllDisable(void);
 795:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 796:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 18
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 18
>>>>>>> Isac


 797:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_FllLocked
 798:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
 799:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 800:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports whether the FLL is locked first time during FLL starting.
 801:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Intended to be used with \ref Cy_SysClk_FllEnable with zero timeout.
 802:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 803:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return 
 804:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * false = not locked<br>
 805:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * true = locked
 806:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 807:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note
 808:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The unlock occurrence may appear during FLL normal operation, so this function 
 809:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * is not recommended to check the FLL normal operation stability.
 810:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 811:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
 812:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_FllLocked
 813:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 814:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
 815:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_FllLocked(void)
 816:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 817:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (_FLD2BOOL(SRSS_CLK_FLL_STATUS_LOCKED, SRSS_CLK_FLL_STATUS));
 818:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
 819:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 820:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 821:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
 822:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_FllDisable
 823:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
 824:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 825:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Disables the FLL and the CCO.
 826:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 827:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_sysclk_status_t
 828:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 829:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
 830:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref SystemCoreClockUpdate after this function calling 
 831:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * if it affects the CLK_HF0 frequency.
 832:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 833:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note
 834:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates after calling this function if
 835:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * the FLL is the source of CLK_HF0 and the CLK_HF0 frequency is decreasing.
 836:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 837:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
 838:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_FllDisable
 839:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 840:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
 841:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_FllDisable(void)
 842:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 843:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_REG32_CLR_SET(SRSS_CLK_FLL_CONFIG3, SRSS_CLK_FLL_CONFIG3_BYPASS_SEL, CY_SYSCLK_FLLPLL_OUTPUT
 844:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     SRSS_CLK_FLL_CONFIG  &= ~SRSS_CLK_FLL_CONFIG_FLL_ENABLE_Msk;
 845:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     SRSS_CLK_FLL_CONFIG4 &= ~SRSS_CLK_FLL_CONFIG4_CCO_ENABLE_Msk;
 846:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return CY_SYSCLK_SUCCESS;
 847:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
 848:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_fll_funcs */
 849:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 850:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 851:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 852:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ===========================    PLL SECTION    ============================ */
 853:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 19
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 19
>>>>>>> Isac


 854:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 855:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_pll_structs
 856:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 857:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 858:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Structure containing information for configuration of a PLL.
 859:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 860:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef struct
 861:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 862:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint32_t                    inputFreq;  /**< frequency of PLL source, in Hz */
 863:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint32_t                    outputFreq; /**< frequency of PLL output, in Hz */
 864:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     bool                        lfMode;     /**< CLK_PLL_CONFIG register, PLL_LF_MODE bit */
 865:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_fll_pll_output_mode_t outputMode; /**< CLK_PLL_CONFIG register, BYPASS_SEL bits */
 866:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_stc_pll_config_t;
 867:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 868:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Structure containing information for manual configuration of a PLL.
 869:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 870:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef struct
 871:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 872:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint8_t                     feedbackDiv;  /**< CLK_PLL_CONFIG register, FEEDBACK_DIV (P) bits *
 873:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint8_t                     referenceDiv; /**< CLK_PLL_CONFIG register, REFERENCE_DIV (Q) bits 
 874:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint8_t                     outputDiv;    /**< CLK_PLL_CONFIG register, OUTPUT_DIV bits */
 875:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     bool                        lfMode;       /**< CLK_PLL_CONFIG register, PLL_LF_MODE bit */
 876:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_fll_pll_output_mode_t outputMode;   /**< CLK_PLL_CONFIG register, BYPASS_SEL bits */
 877:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_stc_pll_manual_config_t;
 878:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_pll_structs */
 879:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 880:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 881:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_pll_funcs
 882:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 883:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 884:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_PllConfigure(uint32_t clkPath, const cy_stc_pll_config_t *config);
 885:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_PllManualConfigure(uint32_t clkPath, const cy_stc_pll_manual_config
 886:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_PllGetConfiguration(uint32_t clkPath, cy_stc_pll_manual_config_t *c
 887:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_PllEnable(uint32_t clkPath, uint32_t timeoutus);
 888:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_PllLocked(uint32_t clkPath);
 889:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_PllLostLock(uint32_t clkPath);
 890:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_PllDisable(uint32_t clkPath);
 891:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 892:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
 893:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PllLocked
 894:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
 895:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 896:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports whether or not the selected PLL is locked.
 897:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 898:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkPath Selects which PLL to check. 1 is the first PLL; 0 is invalid.
 899:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 900:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return 
 901:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * false = not locked<br>
 902:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * true = locked
 903:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 904:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
 905:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PllLocked
 906:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 907:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
 908:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_PllLocked(uint32_t clkPath)
 909:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 910:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     clkPath--; /* to correctly access PLL config and status registers structures */
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 20
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 20
>>>>>>> Isac


 911:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_ASSERT_L1(clkPath < CY_SRSS_NUM_PLL);
 912:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (_FLD2BOOL(SRSS_CLK_PLL_STATUS_LOCKED, SRSS_CLK_PLL_STATUS[clkPath]));
 913:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
 914:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 915:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
 916:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PllLostLock
 917:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
 918:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 919:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports whether or not the selected PLL lost its lock since the last time this
 920:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * function was called. Clears the lost lock indicator.
 921:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 922:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkPath Selects which PLL to check. 1 is the first PLL; 0 is invalid.
 923:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 924:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return 
 925:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * false = did not lose lock<br>
 926:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * true = lost lock
 927:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 928:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
 929:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PllLostLock
 930:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 931:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
 932:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_PllLostLock(uint32_t clkPath)
 933:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 934:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     clkPath--; /* to correctly access PLL config and status registers structures */
 935:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_ASSERT_L1(clkPath < CY_SRSS_NUM_PLL);
 936:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     bool retVal = _FLD2BOOL(SRSS_CLK_PLL_STATUS_UNLOCK_OCCURRED, SRSS_CLK_PLL_STATUS[clkPath]);
 937:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     /* write a 1 to clear the unlock occurred bit */
 938:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     SRSS_CLK_PLL_STATUS[clkPath] = SRSS_CLK_PLL_STATUS_UNLOCK_OCCURRED_Msk;
 939:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
 940:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
 941:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 942:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
 943:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PllDisable
 944:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
 945:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 946:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Disables the selected PLL.
 947:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 948:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkPath Selects which PLL to disable. 1 is the first PLL; 0 is invalid.
 949:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 950:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return Error / status code:<br>
 951:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_SUCCESS - PLL successfully disabled<br>
 952:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_BAD_PARAM - invalid clock path number
 953:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 954:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
 955:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref SystemCoreClockUpdate after this function calling 
 956:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * if it affects the CLK_HF0 frequency.
 957:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 958:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note
 959:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates before calling this function if
 960:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * the PLL is the source of CLK_HF0 and the CLK_HF0 frequency is increasing.
 961:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 962:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note
 963:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates after calling this function if
 964:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * the PLL is the source of CLK_HF0 and the CLK_HF0 frequency is decreasing.
 965:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 966:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
 967:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PllDisable
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 21
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 21
>>>>>>> Isac


 968:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
 969:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
 970:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_PllDisable(uint32_t clkPath)
 971:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
 972:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
 973:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     clkPath--; /* to correctly access PLL config and status registers structures */
 974:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (clkPath < CY_SRSS_NUM_PLL)
 975:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
 976:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         /* First bypass PLL */
 977:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         CY_REG32_CLR_SET(SRSS_CLK_PLL_CONFIG[clkPath], SRSS_CLK_PLL_CONFIG_BYPASS_SEL, CY_SYSCLK_FL
 978:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         /* Wait at least 6 PLL clock cycles */
 979:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         Cy_SysLib_DelayUs(1U);
 980:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         /* And now disable the PLL itself */
 981:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         SRSS_CLK_PLL_CONFIG[clkPath] &= ~SRSS_CLK_PLL_CONFIG_ENABLE_Msk;
 982:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         retVal = CY_SYSCLK_SUCCESS;
 983:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
 984:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
 985:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
 986:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_pll_funcs */
 987:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 988:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
 989:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 990:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ===========================    ILO SECTION    ============================ */
 991:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
 992:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
 993:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_ilo_funcs
 994:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
 995:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
 996:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_IloEnable(void);
 997:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_IloDisable(void);
 998:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_IloHibernateOn(bool on);
 999:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1000:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1001:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_IloEnable
1002:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1003:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1004:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Enables the ILO.
1005:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1006:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note The watchdog timer (WDT) must be unlocked before calling this function.
1007:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1008:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1009:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_IloEnable
1010:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1011:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1012:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_IloEnable(void)
1013:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1014:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     SRSS_CLK_ILO_CONFIG |= SRSS_CLK_ILO_CONFIG_ENABLE_Msk;
1015:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1016:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1017:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1018:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_IloDisable
1019:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1020:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1021:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Disables the ILO. ILO can't be disabled if WDT is enabled.
1022:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1023:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return Error / status code:<br>
1024:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_SUCCESS - ILO successfully disabled<br>
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 22
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 22
>>>>>>> Isac


1025:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_INVALID_STATE - Cannot disable the ILO if the WDT is enabled.
1026:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1027:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note The watchdog timer (WDT) must be unlocked before calling this function.
1028:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Do not call this function if the WDT is enabled, because the WDT is clocked by
1029:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * the ILO.
1030:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1031:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1032:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_IloDisable
1033:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1034:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1035:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_IloDisable(void)
1036:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1037:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_INVALID_STATE;
1038:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (!_FLD2BOOL(SRSS_WDT_CTL_WDT_EN, SRSS_WDT_CTL)) /* if disabled */
1039:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1040:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         SRSS_CLK_ILO_CONFIG &= ~SRSS_CLK_ILO_CONFIG_ENABLE_Msk;
1041:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         retVal = CY_SYSCLK_SUCCESS;
1042:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1043:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return retVal;
1044:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1045:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1046:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1047:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_IloHibernateOn
1048:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1049:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1050:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Controls whether the ILO stays on during a hibernate, or through an XRES or
1051:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * brown-out detect (BOD) event.
1052:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1053:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param on
1054:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * true = ILO stays on during hibernate or across XRES/BOD.<br> 
1055:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * false = ILO turns off for hibernate or XRES/BOD.
1056:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1057:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note Writes to the register/bit are ignored if the watchdog (WDT) is locked.
1058:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1059:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1060:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_IloHibernateOn
1061:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1062:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1063:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_IloHibernateOn(bool on)
1064:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1065:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_REG32_CLR_SET(SRSS_CLK_ILO_CONFIG, SRSS_CLK_ILO_CONFIG_ILO_BACKUP, (uint32_t)on);
1066:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1067:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_ilo_funcs */
1068:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1069:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1070:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1071:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ===========================    PILO SECTION    =========================== */
1072:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1073:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1074:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_pilo_funcs
1075:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1076:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1077:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_PiloEnable(void);
1078:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_PiloDisable(void);
1079:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_PiloSetTrim(uint32_t trimVal);
1080:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint32_t Cy_SysClk_PiloGetTrim(void);
1081:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 23
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 23
>>>>>>> Isac


1082:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1083:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PiloEnable
1084:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1085:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1086:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Enables the PILO. 
1087:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1088:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note This function blocks for 1 millisecond between enabling the PILO and 
1089:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * releasing the PILO reset.
1090:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1091:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1092:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PiloEnable
1093:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1094:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1095:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_PiloEnable(void)
1096:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1097:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     SRSS_CLK_PILO_CONFIG |= _VAL2FLD(SRSS_CLK_PILO_CONFIG_PILO_EN, 1U); /* 1 = enable */
1098:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     Cy_SysLib_Delay(1U/*msec*/);
1099:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     /* release the reset and enable clock output */
1100:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     SRSS_CLK_PILO_CONFIG |= SRSS_CLK_PILO_CONFIG_PILO_RESET_N_Msk |
1101:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                             SRSS_CLK_PILO_CONFIG_PILO_CLK_EN_Msk;
1102:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1103:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1104:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1105:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PiloDisable
1106:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1107:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1108:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Disables the PILO.
1109:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1110:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1111:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PiloDisable
1112:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1113:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1114:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_PiloDisable(void)
1115:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1116:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     /* Clear PILO_EN, PILO_RESET_N, and PILO_CLK_EN bitfields. This disables the
1117:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****        PILO and holds the PILO in a reset state. */
1118:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     SRSS_CLK_PILO_CONFIG &= (uint32_t)~(SRSS_CLK_PILO_CONFIG_PILO_EN_Msk      |
1119:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                         SRSS_CLK_PILO_CONFIG_PILO_RESET_N_Msk |
1120:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                         SRSS_CLK_PILO_CONFIG_PILO_CLK_EN_Msk);
1121:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1122:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1123:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1124:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PiloSetTrim
1125:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1126:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1127:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Sets the PILO trim bits, which adjusts the PILO frequency. This is typically
1128:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * done after measuring the PILO frequency; see \ref Cy_SysClk_StartClkMeasurementCounters().
1129:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1130:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1131:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PiloSetTrim
1132:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1133:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1134:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_PiloSetTrim(uint32_t trimVal)
1135:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1136:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_REG32_CLR_SET(SRSS_CLK_PILO_CONFIG, SRSS_CLK_PILO_CONFIG_PILO_FFREQ, trimVal);
1137:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1138:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 24
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 24
>>>>>>> Isac


1139:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1140:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PiloGetTrim
1141:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1142:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1143:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports the current PILO trim bits value.
1144:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1145:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1146:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Refer to the Cy_SysClk_PiloSetTrim() function usage.
1147:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1148:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1149:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint32_t Cy_SysClk_PiloGetTrim(void)
1150:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1151:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (_FLD2VAL(SRSS_CLK_PILO_CONFIG_PILO_FFREQ, SRSS_CLK_PILO_CONFIG));
1152:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1153:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_pilo_funcs */
1154:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1155:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1156:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1157:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ====================    CLOCK MEASUREMENT SECTION    ===================== */
1158:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1159:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1160:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_calclk_enums
1161:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1162:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1163:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Defines all possible clock sources. */
1164:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1165:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1166:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_NC =            0U,
1167:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_ILO =           1U,
1168:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_WCO =           2U,
1169:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_BAK =           3U,
1170:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_ALTLF =         4U,
1171:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_LFCLK =         5U,
1172:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_IMO =           6U,
1173:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PILO =          8U,
1174:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_FAST_CLKS =     0x100U,
1175:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_ECO =           0x101U,
1176:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_EXT =           0x102U,
1177:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_ALTHF =         0x103U,
1178:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_TIMERCLK =      0x104U,
1179:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH_CLKS =     0x500U,
1180:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH0 =         0x500U,
1181:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH1 =         0x501U,
1182:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH2 =         0x502U,
1183:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH3 =         0x503U,
1184:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH4 =         0x504U,
1185:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH5 =         0x505U,
1186:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH6 =         0x506U,
1187:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH7 =         0x507U,
1188:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH8 =         0x508U,
1189:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH9 =         0x509U,
1190:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH10 =        0x50AU,
1191:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH11 =        0x50BU,
1192:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH12 =        0x50CU,
1193:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH13 =        0x50DU,
1194:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH14 =        0x50EU,
1195:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_PATH15 =        0x50FU,
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 25
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 25
>>>>>>> Isac


1196:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHFS =        0x600U,
1197:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF0 =        0x600U,
1198:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF1 =        0x601U,
1199:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF2 =        0x602U,
1200:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF3 =        0x603U,
1201:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF4 =        0x604U,
1202:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF5 =        0x605U,
1203:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF6 =        0x606U,
1204:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF7 =        0x607U,
1205:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF8 =        0x608U,
1206:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF9 =        0x609U,
1207:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF10 =       0x60AU,
1208:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF11 =       0x60BU,
1209:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF12 =       0x60CU,
1210:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF13 =       0x60DU,
1211:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF14 =       0x60EU,
1212:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_CLKHF15 =       0x60FU,
1213:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_MEAS_CLK_LAST_CLK =      0x610U
1214:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_meas_clks_t;
1215:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_calclk_enums */
1216:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1217:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1218:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_calclk_funcs
1219:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1220:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1221:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_sysclk_status_t Cy_SysClk_StartClkMeasurementCounters(cy_en_meas_clks_t clock1, uint32_t coun
1222:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_ClkMeasurementCountersDone(void);
1223:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** uint32_t Cy_SysClk_ClkMeasurementCountersGetFreq(bool measuredClock, uint32_t refClkFreq);
1224:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1225:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1226:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkMeasurementCountersDone
1227:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1228:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1229:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Checks if clock measurement counting is done, that is, counter1 has counted down
1230:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * to zero. Call \ref Cy_SysClk_StartClkMeasurementCounters() before calling this function.
1231:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1232:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return Status of calibration counters:<br>
1233:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * true = done<br>
1234:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * false = not done
1235:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1236:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1237:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Refer to the Cy_SysClk_StartClkMeasurementCounters() function usage.
1238:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1239:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1240:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_ClkMeasurementCountersDone(void)
1241:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1242:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (_FLD2BOOL(SRSS_CLK_CAL_CNT1_CAL_COUNTER_DONE, SRSS_CLK_CAL_CNT1));
1243:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1244:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_calclk_funcs */
1245:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1246:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1247:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1248:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ==========================    TRIM SECTION    ============================ */
1249:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1250:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1251:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_trim_funcs
1252:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 26
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 26
>>>>>>> Isac


1253:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1254:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** int32_t Cy_SysClk_IloTrim(uint32_t iloFreq);
1255:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** int32_t Cy_SysClk_PiloTrim(uint32_t piloFreq);
1256:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_trim_funcs */
1257:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1258:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1259:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1260:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ======================    POWER MANAGEMENT SECTION    ==================== */
1261:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1262:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1263:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_pm_funcs
1264:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1265:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1266:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** cy_en_syspm_status_t Cy_SysClk_DeepSleepCallback(cy_stc_syspm_callback_params_t *callbackParams, cy
1267:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_pm_funcs */
1268:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1269:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1270:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1271:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ===========================    WCO SECTION    ============================ */
1272:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1273:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1274:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_wco_enums
1275:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1276:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1277:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** WCO bypass modes */
1278:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1279:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1280:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_WCO_NOT_BYPASSED = 0u, /**< WCO is not bypassed crystal is used */
1281:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_WCO_BYPASSED = 1U      /**< WCO is bypassed external clock must be supplied  on XTAL 
1282:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_wco_bypass_modes_t;
1283:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1284:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** WCO CSV supervisor clock selections */
1285:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1286:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1287:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_WCO_CSV_SUPERVISOR_ILO,   /**< WCO CSV supervisor clock source is the ILO */
1288:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_WCO_CSV_SUPERVISOR_ALTLF, /**< WCO CSV supervisor clock source is the alternate low-f
1289:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_WCO_CSV_SUPERVISOR_PILO   /**< WCO CSV supervisor clock source is the PILO */
1290:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_wco_csv_supervisor_clock_t;
1291:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1292:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1293:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Clock supervisor clock loss window. There must be one clock of the supervised
1294:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * clock within this many clocks of the supervising clock.
1295:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * See registers CLK_CSV_HF_CTL and CLK_CSV_WCO_CTL, bitfield CSV_LOSS_WINDOW.
1296:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1297:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1298:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1299:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_LOSS_4_CYCLES =   0u, /**< 1 clock must be seen within 4 cycles of the supervisin
1300:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_LOSS_8_CYCLES =   1U, /**< 1 clock must be seen within 8 cycles of the supervisin
1301:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_LOSS_16_CYCLES =  2u, /**< 1 clock must be seen within 16 cycles of the supervisi
1302:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_LOSS_32_CYCLES =  3u, /**< 1 clock must be seen within 32 cycles of the supervisi
1303:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_LOSS_64_CYCLES =  4u, /**< 1 clock must be seen within 64 cycles of the supervisi
1304:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_LOSS_128_CYCLES = 5u, /**< 1 clock must be seen within 128 cycles of the supervis
1305:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_LOSS_256_CYCLES = 6u, /**< 1 clock must be seen within 256 cycles of the supervis
1306:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_LOSS_512_CYCLES = 7u  /**< 1 clock must be seen within 512 cycles of the supervis
1307:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_csv_loss_window_t;
1308:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1309:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 27
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 27
>>>>>>> Isac


1310:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Clock supervisor error actions. See register CLK_CSV_HF_CTL[CSV_FREQ_ACTION and CSV_LOSS_ACTION].
1311:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1312:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1313:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1314:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_ERROR_IGNORE = 0u,     /**< Ignore the error reported by the clock supervisor. */
1315:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_ERROR_FAULT = 1U,      /**< Trigger a fault when an error is reported by the cloc
1316:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_ERROR_RESET = 2u,      /**< Trigger a reset when an error is reported by the cloc
1317:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CSV_ERROR_FAULT_RESET = 3u /**< Trigger a fault then reset when an error is reported 
1318:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_csv_error_actions_t;
1319:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_wco_enums */
1320:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1321:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1322:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_wco_structs
1323:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1324:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1325:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1326:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * This structure is used to configure the clock supervisor for the WCO.
1327:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1328:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef struct
1329:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1330:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_wco_csv_supervisor_clock_t supervisorClock; /**< supervisor clock selection */
1331:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     bool enableLossDetection;                         /**< 1= enabled, 0= disabled. Note that if lo
1332:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_csv_loss_window_t lossWindow;               /**< \ref cy_en_csv_loss_window_t */
1333:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_csv_error_actions_t lossAction;             /**< \ref cy_en_csv_error_actions_t */
1334:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_stc_wco_csv_config_t;
1335:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_wco_structs */
1336:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1337:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1338:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_wco_funcs
1339:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1340:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1341:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_WcoEnable(uint32_t timeoutus);
1342:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_WcoOkay(void);
1343:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_WcoDisable(void);
1344:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_WcoBypass(cy_en_wco_bypass_modes_t bypass);
1345:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1346:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1347:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1348:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_WcoEnable
1349:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1350:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1351:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Enables the WCO.
1352:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1353:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param timeoutus amount of time in microseconds to wait for the WCO to be ready.
1354:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * If WCO is not ready, WCO is stopped. To avoid waiting for WCO ready set this to 0,
1355:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * and manually check if WCO is okay using \ref Cy_SysClk_WcoOkay.
1356:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1357:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return Error / status code:<br>
1358:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_SUCCESS - WCO successfully enabled<br>
1359:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CY_SYSCLK_TIMEOUT - Timeout waiting for WCO to stabilize
1360:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1361:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1362:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_WcoEnable
1363:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1364:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1365:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_WcoEnable(uint32_t timeoutus)
1366:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 28
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 28
>>>>>>> Isac


1367:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t rtnval = CY_SYSCLK_TIMEOUT;
1368:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1369:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     /* first set the WCO enable bit */
1370:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     BACKUP_CTL |= BACKUP_CTL_WCO_EN_Msk;
1371:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1372:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     /* now do the timeout wait for STATUS, bit WCO_OK */
1373:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     for (; (Cy_SysClk_WcoOkay() == false) && (0UL != timeoutus); timeoutus--)
1374:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1375:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         Cy_SysLib_DelayUs(1U);
1376:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1377:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (0UL != timeoutus)
1378:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1379:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         rtnval = CY_SYSCLK_SUCCESS;
1380:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1381:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1382:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (rtnval);
1383:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1384:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1385:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1386:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_WcoOkay
1387:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1388:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1389:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports the status of the WCO_OK bit.
1390:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1391:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return 
1392:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * true = okay<br>
1393:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * false = not okay
1394:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1395:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1396:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_WcoOkay
1397:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1398:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1399:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_WcoOkay(void)
1400:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1401:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (_FLD2BOOL(BACKUP_STATUS_WCO_OK, BACKUP_STATUS));
1402:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1403:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1404:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1405:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_WcoDisable
1406:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1407:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1408:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Disables the WCO.
1409:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1410:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1411:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_WcoDisable
1412:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1413:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1414:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_WcoDisable(void)
1415:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1416:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     BACKUP_CTL &= (uint32_t)~BACKUP_CTL_WCO_EN_Msk;
1417:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1418:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1419:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1420:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_WcoBypass
1421:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1422:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1423:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Sets whether the WCO is bypassed or not. If it is bypassed, then a 32-kHz clock
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 29
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 29
>>>>>>> Isac


1424:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * must be provided on the wco_out pin.
1425:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1426:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param bypass \ref cy_en_wco_bypass_modes_t
1427:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1428:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1429:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_WcoBypass
1430:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1431:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1432:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_WcoBypass(cy_en_wco_bypass_modes_t bypass)
1433:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1434:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_REG32_CLR_SET(BACKUP_CTL, BACKUP_CTL_WCO_BYPASS, bypass);
1435:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1436:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_wco_funcs */
1437:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1438:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1439:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1440:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* =========================    clkHf[n] SECTION    ========================= */
1441:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1442:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1443:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_clk_hf_enums
1444:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1445:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1446:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1447:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Selects which clkHf input, or root mux, to configure.
1448:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * See CLK_ROOT_SELECT registers, bits ROOT_MUX.
1449:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Used with functions \ref Cy_SysClk_ClkHfSetSource and \ref Cy_SysClk_ClkHfGetSource.
1450:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1451:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1452:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1453:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH0  = 0U,  /**< clkHf input is Clock Path 0 */
1454:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH1  = 1U,  /**< clkHf input is Clock Path 1 */
1455:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH2  = 2U,  /**< clkHf input is Clock Path 2 */
1456:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH3  = 3U,  /**< clkHf input is Clock Path 3 */
1457:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH4  = 4U,  /**< clkHf input is Clock Path 4 */
1458:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH5  = 5U,  /**< clkHf input is Clock Path 5 */
1459:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH6  = 6U,  /**< clkHf input is Clock Path 6 */
1460:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH7  = 7U,  /**< clkHf input is Clock Path 7 */
1461:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH8  = 8U,  /**< clkHf input is Clock Path 8 */
1462:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH9  = 9U,  /**< clkHf input is Clock Path 9 */
1463:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH10 = 10U, /**< clkHf input is Clock Path 10 */
1464:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH11 = 11U, /**< clkHf input is Clock Path 11 */
1465:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH12 = 12U, /**< clkHf input is Clock Path 12 */
1466:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH13 = 13U, /**< clkHf input is Clock Path 13 */
1467:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH14 = 14U, /**< clkHf input is Clock Path 14 */
1468:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_IN_CLKPATH15 = 15U, /**< clkHf input is Clock Path 15 */
1469:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_clkhf_in_sources_t;
1470:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1471:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1472:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1473:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * clkHf divider values. See CLK_ROOT_SELECT registers, bits ROOT_DIV.
1474:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Used with functions \ref Cy_SysClk_ClkHfSetDivider and \ref Cy_SysClk_ClkHfGetDivider.
1475:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1476:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1477:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1478:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_NO_DIVIDE   = 0U,    /**< don't divide clkHf. */
1479:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_DIVIDE_BY_2 = 1U,    /**< divide clkHf by 2 */
1480:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_DIVIDE_BY_4 = 2U,    /**< divide clkHf by 4 */
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 30
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 30
>>>>>>> Isac


1481:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_DIVIDE_BY_8 = 3U     /**< divide clkHf by 8 */
1482:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_clkhf_dividers_t;
1483:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1484:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1485:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * clkHf clock supervisor input sources. See register CLK_CSV_HF_CTL[CSV_MUX].
1486:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1487:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1488:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1489:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_CSV_SUPERVISOR_IMO   = 0U,  /**< Supervising clock is the IMO. */
1490:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_CSV_SUPERVISOR_EXT   = 1U,  /**< Supervising clock is the external clock */
1491:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_CLKHF_CSV_SUPERVISOR_ALTHF = 2U   /**< Supervising clock is clk_althf */
1492:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_clkhf_csv_supervisor_clock_t;
1493:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_clk_hf_enums */
1494:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1495:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1496:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_clk_hf_structs
1497:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{SupervisingWindow
1498:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1499:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1500:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * This structure is used to configure the clock supervisor for clkHf.
1501:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1502:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef struct
1503:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1504:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_clkhf_csv_supervisor_clock_t supervisorClock; /**< \ref cy_en_clkhf_csv_supervisor_clock_
1505:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint16_t supervisingWindow;                         /**< Number of supervising clock cycles */
1506:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     bool enableFrequencyFaultDetection;                 /**< 1= enabled, 0= disabled */
1507:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint16_t frequencyLowerLimit;                       /**< Lowest frequency in kHz that supervise
1508:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint16_t frequencyUpperLimit;                       /**< Highest frequency in kHz that supervis
1509:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_csv_error_actions_t frequencyAction;          /**< \ref cy_en_csv_error_actions_t */
1510:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     bool enableLossDetection;                           /**< 1= enabled, 0= disabled */
1511:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_csv_loss_window_t lossWindow;                 /**< \ref cy_en_csv_loss_window_t */
1512:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_csv_error_actions_t lossAction;               /**< \ref cy_en_csv_error_actions_t */
1513:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_stc_clkhf_csv_config_t;
1514:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_clk_hf_structs */
1515:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1516:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1517:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_clk_hf_funcs
1518:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1519:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1520:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_ClkHfEnable(uint32_t clkHf);
1521:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_ClkHfDisable(uint32_t clkHf);
1522:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_ClkHfSetSource(uint32_t clkHf, cy_en_clkhf_in_sourc
1523:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_clkhf_in_sources_t Cy_SysClk_ClkHfGetSource(uint32_t clkHf);
1524:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_ClkHfSetDivider(uint32_t clkHf, cy_en_clkhf_divider
1525:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_clkhf_dividers_t Cy_SysClk_ClkHfGetDivider(uint32_t clkHf);
1526:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1527:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1528:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1529:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkHfEnable
1530:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1531:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1532:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Enables the selected clkHf.
1533:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1534:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkHf Selects which clkHf to enable.
1535:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1536:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_sysclk_status_t
1537:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 31
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 31
>>>>>>> Isac


1538:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1539:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkHfEnable
1540:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1541:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1542:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_ClkHfEnable(uint32_t clkHf)
1543:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1544:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
1545:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (clkHf < CY_SRSS_NUM_HFROOT)
1546:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1547:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         SRSS_CLK_ROOT_SELECT[clkHf] |= SRSS_CLK_ROOT_SELECT_ENABLE_Msk;
1548:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         retVal = CY_SYSCLK_SUCCESS;
1549:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1550:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
1551:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1552:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1553:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1554:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkHfDisable
1555:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1556:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1557:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Disables the selected clkHf.
1558:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1559:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkHf Selects which clkHf to enable.
1560:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1561:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_sysclk_status_t
1562:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1563:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note clkHf[0] cannot be disabled.
1564:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1565:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1566:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkHfDisable
1567:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1568:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1569:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_ClkHfDisable(uint32_t clkHf)
1570:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1571:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
1572:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if ((0UL < clkHf) /* prevent CLK_HF0 disabling */
1573:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****            && (clkHf < CY_SRSS_NUM_HFROOT))
1574:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1575:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         SRSS_CLK_ROOT_SELECT[clkHf] &= ~SRSS_CLK_ROOT_SELECT_ENABLE_Msk;
1576:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         retVal = CY_SYSCLK_SUCCESS;
1577:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1578:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
1579:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1580:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1581:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1582:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkHfSetSource
1583:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1584:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1585:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Selects the source of the selected clkHf.
1586:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1587:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkHf selects which clkHf mux to configure.
1588:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1589:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param source \ref cy_en_clkhf_in_sources_t
1590:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1591:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_sysclk_status_t
1592:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1593:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
1594:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref SystemCoreClockUpdate after this function calling 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 32
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 32
>>>>>>> Isac


1595:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * if it affects the CLK_HF0 frequency.
1596:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1597:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
1598:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates before calling this function if
1599:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CLK_HF0 frequency is increasing.
1600:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1601:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note
1602:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates after calling this function if
1603:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CLK_HF0 frequency is decreasing.
1604:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1605:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1606:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkHfSetSource
1607:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1608:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1609:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_ClkHfSetSource(uint32_t clkHf, cy_en_clkhf_in_sourc
1610:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1611:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
1612:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if ((clkHf < CY_SRSS_NUM_HFROOT) && (source <= CY_SYSCLK_CLKHF_IN_CLKPATH15))
1613:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1614:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         CY_REG32_CLR_SET(SRSS_CLK_ROOT_SELECT[clkHf], SRSS_CLK_ROOT_SELECT_ROOT_MUX, source);
1615:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         retVal = CY_SYSCLK_SUCCESS;
1616:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1617:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
1618:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1619:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1620:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1621:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkHfGetSource
1622:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1623:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1624:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports the source of the selected clkHf.
1625:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1626:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkHf selects which clkHf to get the source of.
1627:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1628:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_clkhf_in_sources_t
1629:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1630:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1631:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkHfSetSource
1632:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1633:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1634:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_clkhf_in_sources_t Cy_SysClk_ClkHfGetSource(uint32_t clkHf)
1635:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1636:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_ASSERT_L1(clkHf < CY_SRSS_NUM_HFROOT);
1637:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (cy_en_clkhf_in_sources_t)(_FLD2VAL(SRSS_CLK_ROOT_SELECT_ROOT_MUX, SRSS_CLK_ROOT_SELECT[
1638:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1639:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1640:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1641:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkHfSetDivider
1642:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1643:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1644:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Sets the pre-divider for a clkHf.
1645:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1646:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkHf selects which clkHf divider to configure.
1647:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1648:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param divider \ref cy_en_clkhf_dividers_t
1649:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1650:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_sysclk_status_t
1651:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 33
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 33
>>>>>>> Isac


1652:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note Also call \ref Cy_SysClk_ClkHfSetSource to set the clkHf source.
1653:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1654:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
1655:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref SystemCoreClockUpdate after this function calling 
1656:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * if it affects the CLK_HF0 frequency.
1657:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1658:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
1659:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates before calling this function if
1660:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CLK_HF0 frequency is increasing.
1661:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1662:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note
1663:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates after calling this function if
1664:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CLK_HF0 frequency is decreasing.
1665:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1666:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1667:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkHfSetDivider
1668:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1669:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1670:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_ClkHfSetDivider(uint32_t clkHf, cy_en_clkhf_divider
1671:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1672:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
1673:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if ((clkHf < CY_SRSS_NUM_HFROOT) && (divider <= CY_SYSCLK_CLKHF_DIVIDE_BY_8))
1674:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1675:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         CY_REG32_CLR_SET(SRSS_CLK_ROOT_SELECT[clkHf], SRSS_CLK_ROOT_SELECT_ROOT_DIV, divider);
1676:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         retVal = CY_SYSCLK_SUCCESS;
1677:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1678:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
1679:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1680:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1681:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1682:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkHfGetDivider
1683:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1684:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1685:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports the pre-divider value for a clkHf.
1686:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1687:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param clkHf selects which clkHf to check divider of.
1688:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1689:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_clkhf_dividers_t
1690:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1691:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1692:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkHfSetDivider
1693:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1694:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1695:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_clkhf_dividers_t Cy_SysClk_ClkHfGetDivider(uint32_t clkHf)
1696:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1697:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_ASSERT_L1(clkHf < CY_SRSS_NUM_HFROOT);
1698:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (cy_en_clkhf_dividers_t)(_FLD2VAL(SRSS_CLK_ROOT_SELECT_ROOT_DIV, SRSS_CLK_ROOT_SELECT[cl
1699:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1700:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_clk_hf_funcs */
1701:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1702:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1703:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1704:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* =========================    clk_fast SECTION    ========================= */
1705:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1706:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1707:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_clk_fast_funcs
1708:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 34
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 34
>>>>>>> Isac


1709:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1710:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_ClkFastSetDivider(uint8_t divider);
1711:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint8_t Cy_SysClk_ClkFastGetDivider(void);
1712:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1713:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1714:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkFastSetDivider
1715:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1716:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1717:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Sets the clock divider for the fast clock, which sources the main processor.
1718:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The source of this divider is clkHf[0].
1719:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1720:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param divider divider value between 0 and 255.
1721:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Causes integer division of (divider value + 1), or division by 1 to 256.
1722:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1723:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
1724:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref SystemCoreClockUpdate after this function calling.
1725:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1726:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
1727:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates before calling this function if
1728:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CLK_FAST frequency is increasing.
1729:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1730:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note
1731:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref Cy_SysLib_SetWaitStates after calling this function if
1732:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * CLK_FAST frequency is decreasing.
1733:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1734:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1735:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkFastSetDivider
1736:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1737:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1738:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_ClkFastSetDivider(uint8_t divider)
1739:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1740:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_REG32_CLR_SET(CPUSS_CM4_CLOCK_CTL, CPUSS_CM4_CLOCK_CTL_FAST_INT_DIV, divider);
1741:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1742:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1743:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1744:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkFastGetDivider
1745:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1746:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1747:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Returns the clock divider for the fast clock.
1748:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1749:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return The divider value for the fast clock.
1750:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The integer division done is by (divider value + 1), or division by 1 to 256.
1751:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1752:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1753:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkFastSetDivider
1754:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1755:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1756:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint8_t Cy_SysClk_ClkFastGetDivider(void)
1757:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1758:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return ((uint8_t)_FLD2VAL(CPUSS_CM4_CLOCK_CTL_FAST_INT_DIV, CPUSS_CM4_CLOCK_CTL));
1759:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1760:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_clk_fast_funcs */
1761:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1762:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1763:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1764:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================    clk_peri SECTION    ========================== */
1765:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 35
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 35
>>>>>>> Isac


1766:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1767:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_clk_peri_funcs
1768:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1769:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1770:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_ClkPeriSetDivider(uint8_t divider);
1771:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint8_t Cy_SysClk_ClkPeriGetDivider(void);
1772:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1773:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1774:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkPeriSetDivider
1775:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1776:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1777:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Sets the clock divider for the peripheral clock tree. All peripheral clock
1778:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * dividers are sourced from this clock. Also the Cortex M0+ clock divider is
1779:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * sourced from this clock. The source of this divider is clkHf[0]
1780:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1781:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param divider divider value between 0 and 255
1782:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Causes integer division of (divider value + 1), or division by 1 to 256.
1783:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1784:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note 
1785:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Call \ref SystemCoreClockUpdate after this function calling.
1786:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1787:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1788:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkPeriSetDivider
1789:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1790:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1791:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_ClkPeriSetDivider(uint8_t divider)
1792:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1793:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_REG32_CLR_SET(CPUSS_CM0_CLOCK_CTL, CPUSS_CM0_CLOCK_CTL_PERI_INT_DIV, divider);
1794:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1795:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1796:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1797:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_ClkPeriGetDivider
1798:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1799:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1800:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Returns the clock divider of the peripheral (peri) clock.
1801:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1802:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return The divider value.
1803:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The integer division done is by (divider value + 1), or division by 1 to 256.
1804:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1805:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1806:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_ClkPeriSetDivider
1807:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1808:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1809:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint8_t Cy_SysClk_ClkPeriGetDivider(void)
1810:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1811:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return ((uint8_t)_FLD2VAL(CPUSS_CM0_CLOCK_CTL_PERI_INT_DIV, CPUSS_CM0_CLOCK_CTL));
1812:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1813:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_clk_peri_funcs */
1814:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1815:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1816:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1817:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* =====================    clk_peripherals SECTION    ====================== */
1818:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /* ========================================================================== */
1819:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1820:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_clk_peripheral_enums
1821:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1822:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 36
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 36
>>>>>>> Isac


1823:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** Programmable clock divider types */
1824:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** typedef enum
1825:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1826:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_DIV_8_BIT    = 0U, /**< Divider Type is an 8 bit divider */
1827:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_DIV_16_BIT   = 1U, /**< Divider Type is a 16 bit divider */
1828:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_DIV_16_5_BIT = 2U, /**< Divider Type is a 16.5 bit fractional divider */
1829:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_SYSCLK_DIV_24_5_BIT = 3U  /**< Divider Type is a 24.5 bit fractional divider */
1830:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** } cy_en_divider_types_t;
1831:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /** \} group_sysclk_clk_peripheral_enums */
1832:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1833:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /**
1834:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \addtogroup group_sysclk_clk_peripheral_funcs
1835:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \{
1836:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** */
1837:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_PeriphSetDivider(cy_en_divider_types_t dividerType,
1838:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint32_t Cy_SysClk_PeriphGetDivider(cy_en_divider_types_t dividerType, uint32_t div
1839:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_PeriphSetFracDivider(cy_en_divider_types_t dividerT
1840:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_PeriphGetFracDivider(cy_en_divider_types_t dividerType, uint32_t div
1841:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_PeriphAssignDivider(en_clk_dst_t ipBlock, cy_en_div
1842:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint32_t Cy_SysClk_PeriphGetAssignedDivider(en_clk_dst_t ipBlock);
1843:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_PeriphEnableDivider(cy_en_divider_types_t dividerTy
1844:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_PeriphDisableDivider(cy_en_divider_types_t dividerT
1845:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t Cy_SysClk_PeriphEnablePhaseAlignDivider(cy_en_divider_types_t
1846:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE bool Cy_SysClk_PeriphGetDividerEnabled(cy_en_divider_types_t dividerType, uint32_t 
1847:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** uint32_t Cy_SysClk_PeriphGetFrequency(cy_en_divider_types_t dividerType, uint32_t dividerNum);
1848:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1849:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1850:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PeriphSetDivider
1851:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1852:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1853:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Sets one of the programmable clock dividers. This is only used for integer
1854:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * dividers. Use \ref Cy_SysClk_PeriphSetFracDivider for setting factional dividers.
1855:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1856:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \pre If the specified clock divider is already enabled - it should be disabled
1857:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * prior to use this function by \ref Cy_SysClk_PeriphDisableDivider.
1858:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1859:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerType specifies which type of divider to use; \ref cy_en_divider_types_t
1860:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1861:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerNum the divider number.
1862:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1863:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerValue divider value
1864:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Causes integer division of (divider value + 1), or division by 1 to 256
1865:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * (8-bit divider) or 1 to 65536 (16-bit divider).
1866:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1867:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_sysclk_status_t
1868:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1869:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1870:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PeriphSetDivider
1871:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1872:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1873:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t
1874:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                 Cy_SysClk_PeriphSetDivider(cy_en_divider_types_t dividerType,
1875:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                            uint32_t dividerNum, uint32_t dividerValue)
1876:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1877:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
1878:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (dividerType == CY_SYSCLK_DIV_8_BIT)
1879:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 37
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 37
>>>>>>> Isac


1880:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         if ((dividerNum < PERI_DIV_8_NR) &&
1881:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             (dividerValue <= (PERI_DIV_8_CTL_INT8_DIV_Msk >> PERI_DIV_8_CTL_INT8_DIV_Pos)))
1882:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         {
1883:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             CY_REG32_CLR_SET(PERI_DIV_8_CTL[dividerNum], PERI_DIV_8_CTL_INT8_DIV, dividerValue);
1884:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             retVal = CY_SYSCLK_SUCCESS;
1885:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         }
1886:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1887:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     else if (dividerType == CY_SYSCLK_DIV_16_BIT)
1888:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1889:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         if ((dividerNum < PERI_DIV_16_NR) &&
1890:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             (dividerValue <= (PERI_DIV_16_CTL_INT16_DIV_Msk >> PERI_DIV_16_CTL_INT16_DIV_Pos)))
1891:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         {
1892:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             CY_REG32_CLR_SET(PERI_DIV_16_CTL[dividerNum], PERI_DIV_16_CTL_INT16_DIV, dividerValue);
1893:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             retVal = CY_SYSCLK_SUCCESS;
1894:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         }
1895:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1896:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     else
1897:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     { /* return bad parameter */
1898:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1899:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
1900:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1901:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1902:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1903:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PeriphGetDivider
1904:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1905:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1906:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Returns the integer divider value for the specified divider. One works for
1907:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * integer dividers. Use \ref Cy_SysClk_PeriphGetFracDivider to get the fractional
1908:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * divider value
1909:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1910:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerType specifies which type of divider to use; \ref cy_en_divider_types_t
1911:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1912:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerNum specifies which divider of the selected type to configure
1913:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1914:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return The divider value.
1915:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The integer division done is by (divider value + 1), or division by 1 to 256
1916:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * (8-bit divider) or 1 to 65536 (16-bit divider).
1917:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1918:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1919:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PeriphSetDivider
1920:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1921:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1922:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint32_t Cy_SysClk_PeriphGetDivider(cy_en_divider_types_t dividerType, uint32_t div
1923:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1924:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     uint32_t retVal;
1925:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1926:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_ASSERT_L1(dividerType <= CY_SYSCLK_DIV_16_BIT);
1927:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1928:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (dividerType == CY_SYSCLK_DIV_8_BIT)
1929:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1930:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         CY_ASSERT_L1(dividerNum < PERI_DIV_8_NR);
1931:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         retVal = _FLD2VAL(PERI_DIV_8_CTL_INT8_DIV, PERI_DIV_8_CTL[dividerNum]);
1932:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1933:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     else
1934:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     { /* 16-bit divider */
1935:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         CY_ASSERT_L1(dividerNum < PERI_DIV_16_NR);
1936:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         retVal = _FLD2VAL(PERI_DIV_16_CTL_INT16_DIV, PERI_DIV_16_CTL[dividerNum]);
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 38
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 38
>>>>>>> Isac


1937:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1938:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
1939:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
1940:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
1941:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
1942:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PeriphSetFracDivider
1943:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
1944:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1945:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Sets one of the programmable clock dividers. This function should only be used
1946:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * for fractional clock dividers.
1947:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1948:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \pre If the specified clock divider is already enabled - it should be disabled
1949:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * prior to use this function by \ref Cy_SysClk_PeriphDisableDivider.
1950:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1951:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerType specifies which type of divider to use; \ref cy_en_divider_types_t
1952:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1953:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerNum specifies which divider of the selected type to configure
1954:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1955:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerIntValue the integer divider value
1956:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The source of the divider is peri_clk, which is a divided version of hf_clk[0].
1957:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The divider value causes integer division of (divider value + 1), or division
1958:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * by 1 to 65536 (16-bit divider) or 1 to 16777216 (24-bit divider).
1959:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1960:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerFracValue the fraction part of the divider
1961:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * The fractional divider can be 1-32, thus it divides the clock by 1/32 for each
1962:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * count. To divide the clock by 11/32nds set this value to 11.
1963:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1964:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_sysclk_status_t
1965:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1966:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
1967:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PeriphSetFracDivider
1968:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
1969:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
1970:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t
1971:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                 Cy_SysClk_PeriphSetFracDivider(cy_en_divider_types_t dividerType, uint32_t dividerN
1972:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                                uint32_t dividerIntValue, uint32_t dividerFracValue)
1973:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
1974:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
1975:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (dividerType == CY_SYSCLK_DIV_16_5_BIT)
1976:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1977:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         if ((dividerNum < PERI_DIV_16_5_NR) &&
1978:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             (dividerIntValue <= (PERI_DIV_16_5_CTL_INT16_DIV_Msk >> PERI_DIV_16_5_CTL_INT16_DIV_Pos
1979:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             (dividerFracValue <= (PERI_DIV_16_5_CTL_FRAC5_DIV_Msk >> PERI_DIV_16_5_CTL_FRAC5_DIV_Po
1980:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         {
1981:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             CY_REG32_CLR_SET(PERI_DIV_16_5_CTL[dividerNum], PERI_DIV_16_5_CTL_INT16_DIV, dividerInt
1982:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             CY_REG32_CLR_SET(PERI_DIV_16_5_CTL[dividerNum], PERI_DIV_16_5_CTL_FRAC5_DIV, dividerFra
1983:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             retVal = CY_SYSCLK_SUCCESS;
1984:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         }
1985:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1986:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     else if (dividerType == CY_SYSCLK_DIV_24_5_BIT)
1987:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
1988:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         if ((dividerNum < PERI_DIV_24_5_NR) &&
1989:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             (dividerIntValue <= (PERI_DIV_24_5_CTL_INT24_DIV_Msk >> PERI_DIV_24_5_CTL_INT24_DIV_Pos
1990:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             (dividerFracValue <= (PERI_DIV_24_5_CTL_FRAC5_DIV_Msk >> PERI_DIV_24_5_CTL_FRAC5_DIV_Po
1991:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         {
1992:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             CY_REG32_CLR_SET(PERI_DIV_24_5_CTL[dividerNum], PERI_DIV_24_5_CTL_INT24_DIV, dividerInt
1993:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             CY_REG32_CLR_SET(PERI_DIV_24_5_CTL[dividerNum], PERI_DIV_24_5_CTL_FRAC5_DIV, dividerFra
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 39
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 39
>>>>>>> Isac


1994:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             retVal = CY_SYSCLK_SUCCESS;
1995:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         }
1996:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
1997:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     else
1998:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     { /* return bad parameter */
1999:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
2000:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
2001:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
2002:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
2003:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
2004:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PeriphGetFracDivider
2005:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
2006:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2007:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports the integer and fractional parts of the divider
2008:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2009:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerType specifies which type of divider to use; \ref cy_en_divider_types_t
2010:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2011:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerNum specifies which divider of the selected type to configure
2012:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2013:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param *dividerIntValue pointer to return integer divider value
2014:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2015:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param *dividerFracValue pointer to return fractional divider value
2016:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2017:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return None. Loads pointed-to variables.
2018:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2019:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
2020:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PeriphSetFracDivider
2021:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2022:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
2023:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE void Cy_SysClk_PeriphGetFracDivider(cy_en_divider_types_t dividerType, uint32_t div
2024:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                                     uint32_t *dividerIntValue, uint32_t *dividerFra
2025:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
2026:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_ASSERT_L1(((dividerType == CY_SYSCLK_DIV_16_5_BIT) || (dividerType == CY_SYSCLK_DIV_24_5_BIT
2027:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                  (dividerIntValue != NULL) && (dividerFracValue != NULL));
2028:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
2029:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (dividerType == CY_SYSCLK_DIV_16_5_BIT)
2030:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
2031:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         CY_ASSERT_L1(dividerNum < PERI_DIV_16_5_NR);
2032:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         *dividerIntValue  = _FLD2VAL(PERI_DIV_16_5_CTL_INT16_DIV, PERI_DIV_16_5_CTL[dividerNum]);
2033:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         *dividerFracValue = _FLD2VAL(PERI_DIV_16_5_CTL_FRAC5_DIV, PERI_DIV_16_5_CTL[dividerNum]);
2034:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
2035:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     else
2036:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     { /* 24.5-bit divider */
2037:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         CY_ASSERT_L1(dividerNum < PERI_DIV_24_5_NR);
2038:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         *dividerIntValue  = _FLD2VAL(PERI_DIV_24_5_CTL_INT24_DIV, PERI_DIV_24_5_CTL[dividerNum]);
2039:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         *dividerFracValue = _FLD2VAL(PERI_DIV_24_5_CTL_FRAC5_DIV, PERI_DIV_24_5_CTL[dividerNum]);
2040:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
2041:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
2042:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
2043:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
2044:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PeriphAssignDivider
2045:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
2046:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2047:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Assigns a programmable divider to a selected IP block, such as a TCPWM or SCB.
2048:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2049:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param ipBlock specifies ip block to connect the clock divider to.
2050:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 40
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 40
>>>>>>> Isac


2051:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerType specifies which type of divider to use; \ref cy_en_divider_types_t
2052:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2053:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerNum specifies which divider of the selected type to configure
2054:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2055:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return \ref cy_en_sysclk_status_t
2056:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2057:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
2058:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PeriphAssignDivider
2059:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2060:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
2061:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t
2062:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                 Cy_SysClk_PeriphAssignDivider(en_clk_dst_t ipBlock,
2063:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                               cy_en_divider_types_t dividerType, uint32_t dividerNu
2064:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
2065:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
2066:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if ((CY_PERI_CLOCK_NR > (uint32_t)ipBlock) && (CY_SYSCLK_DIV_24_5_BIT >= dividerType))
2067:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
2068:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         if (((dividerType == CY_SYSCLK_DIV_8_BIT)    && (dividerNum < PERI_DIV_8_NR))    ||
2069:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_16_BIT)   && (dividerNum < PERI_DIV_16_NR))   ||
2070:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_16_5_BIT) && (dividerNum < PERI_DIV_16_5_NR)) ||
2071:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_24_5_BIT) && (dividerNum < PERI_DIV_24_5_NR)))
2072:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         {
2073:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             PERI_CLOCK_CTL[ipBlock] = _VAL2FLD(CY_PERI_CLOCK_CTL_TYPE_SEL, dividerType) |
2074:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                                       _VAL2FLD(CY_PERI_CLOCK_CTL_DIV_SEL, dividerNum);
2075:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             retVal = CY_SYSCLK_SUCCESS;
2076:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         }
2077:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
2078:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
2079:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
2080:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
2081:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
2082:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PeriphGetAssignedDivider
2083:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
2084:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2085:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Reports which clock divider is assigned to a selected IP block.
2086:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2087:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param ipBlock specifies ip block to connect the clock divider to.
2088:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2089:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \return The divider type and number, where bits [7:6] = type, bits[5:0] = divider
2090:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * number within that type
2091:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2092:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
2093:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PeriphAssignDivider
2094:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2095:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
2096:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE uint32_t Cy_SysClk_PeriphGetAssignedDivider(en_clk_dst_t ipBlock)
2097:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
2098:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     CY_ASSERT_L1(CY_PERI_CLOCK_NR > (uint32_t)ipBlock);
2099:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (PERI_CLOCK_CTL[ipBlock] & (CY_PERI_CLOCK_CTL_DIV_SEL_Msk | CY_PERI_CLOCK_CTL_TYPE_SEL_M
2100:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
2101:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
2102:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
2103:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PeriphEnableDivider
2104:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
2105:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2106:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Enables the selected divider.
2107:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 41
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 41
>>>>>>> Isac


2108:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerType specifies which type of divider to use; \ref cy_en_divider_types_t
2109:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2110:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerNum specifies which divider of the selected type to configure
2111:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2112:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \note This function also sets the phase alignment bits such that the enabled
2113:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * divider is aligned to clk_peri. See \ref Cy_SysClk_PeriphDisableDivider()
2114:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * for information on how to phase-align a divider after it is enabled.
2115:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2116:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
2117:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PeriphEnableDivider
2118:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2119:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
2120:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t
2121:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                 Cy_SysClk_PeriphEnableDivider(cy_en_divider_types_t dividerType, uint32_t dividerNu
2122:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
2123:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
2124:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (dividerType <= CY_SYSCLK_DIV_24_5_BIT)
2125:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
2126:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         if (((dividerType == CY_SYSCLK_DIV_8_BIT)    && (dividerNum < PERI_DIV_8_NR))    ||
2127:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_16_BIT)   && (dividerNum < PERI_DIV_16_NR))   ||
2128:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_16_5_BIT) && (dividerNum < PERI_DIV_16_5_NR)) ||
2129:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_24_5_BIT) && (dividerNum < PERI_DIV_24_5_NR)))
2130:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         {
2131:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             /* specify the divider, make the reference = clk_peri, and enable the divider */
2132:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             PERI_DIV_CMD = PERI_DIV_CMD_ENABLE_Msk                         |
2133:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            CY_PERI_DIV_CMD_PA_TYPE_SEL_Msk                 |
2134:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            CY_PERI_DIV_CMD_PA_DIV_SEL_Msk                  |
2135:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            _VAL2FLD(CY_PERI_DIV_CMD_TYPE_SEL, dividerType) |
2136:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            _VAL2FLD(CY_PERI_DIV_CMD_DIV_SEL,  dividerNum);
2137:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             (void)PERI_DIV_CMD; /* dummy read to handle buffered writes */
2138:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             retVal = CY_SYSCLK_SUCCESS;
2139:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         }
2140:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     }
2141:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     return (retVal);
2142:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** }
2143:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** 
2144:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** /*******************************************************************************
2145:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Function Name: Cy_SysClk_PeriphDisableDivider
2146:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** ****************************************************************************//**
2147:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2148:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * Disables a selected divider.
2149:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2150:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerType specifies which type of divider to use; \ref cy_en_divider_types_t.
2151:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2152:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \param dividerNum specifies which divider of the selected type to configure.
2153:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2154:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \funcusage
2155:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** * \snippet sysclk/2.0/snippet/main.c snippet_Cy_SysClk_PeriphDisableDivider
2156:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *
2157:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** *******************************************************************************/
2158:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** __STATIC_INLINE cy_en_sysclk_status_t
2159:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                 Cy_SysClk_PeriphDisableDivider(cy_en_divider_types_t dividerType, uint32_t dividerN
2160:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h **** {
2161:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     cy_en_sysclk_status_t retVal = CY_SYSCLK_BAD_PARAM;
2162:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     if (dividerType <= CY_SYSCLK_DIV_24_5_BIT)
2163:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****     {
2164:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         if (((dividerType == CY_SYSCLK_DIV_8_BIT)    && (dividerNum < PERI_DIV_8_NR))    ||
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 42
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 42
>>>>>>> Isac


2165:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_16_BIT)   && (dividerNum < PERI_DIV_16_NR))   ||
2166:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_16_5_BIT) && (dividerNum < PERI_DIV_16_5_NR)) ||
2167:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             ((dividerType == CY_SYSCLK_DIV_24_5_BIT) && (dividerNum < PERI_DIV_24_5_NR)))
2168:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****         {
2169:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             /* specify the divider and disable it */
2170:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             PERI_DIV_CMD = PERI_DIV_CMD_DISABLE_Msk          |
  45              		.loc 2 2170 0
  46 0004 1F4B     		ldr	r3, .L3
  47 0006 1A68     		ldr	r2, [r3]
2171:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****              _VAL2FLD(CY_PERI_DIV_CMD_TYPE_SEL, dividerType) |
2172:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****              _VAL2FLD(CY_PERI_DIV_CMD_DIV_SEL,  dividerNum);
  48              		.loc 2 2172 0
  49 0008 7023     		movs	r3, #112
  50 000a D35C     		ldrb	r3, [r2, r3]
  51 000c 0321     		movs	r1, #3
  52 000e 0B40     		ands	r3, r1
2171:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****              _VAL2FLD(CY_PERI_DIV_CMD_TYPE_SEL, dividerType) |
  53              		.loc 2 2171 0
  54 0010 8021     		movs	r1, #128
  55 0012 C905     		lsls	r1, r1, #23
  56 0014 0B43     		orrs	r3, r1
2170:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****              _VAL2FLD(CY_PERI_DIV_CMD_TYPE_SEL, dividerType) |
  57              		.loc 2 2170 0
  58 0016 8021     		movs	r1, #128
  59 0018 C900     		lsls	r1, r1, #3
  60 001a 9068     		ldr	r0, [r2, #8]
  61              	.LVL2:
  62 001c 4350     		str	r3, [r0, r1]
  63              	.LVL3:
  64              	.LBE40:
  65              	.LBE39:
  66              	.LBE38:
 130:Generated_Source\PSoC6/ADC.c ****     bool deInitRouting = false;
 131:Generated_Source\PSoC6/ADC.c **** 
 132:Generated_Source\PSoC6/ADC.c ****     /* If there is an internal SAR clock, set up its divider values. */
 133:Generated_Source\PSoC6/ADC.c ****     #if (ADC_CLOCK_INTERNAL)
 134:Generated_Source\PSoC6/ADC.c ****         ADC_intSarClock_Disable();
 135:Generated_Source\PSoC6/ADC.c ****         ADC_intSarClock_SetDivider(config->clkDivider);
  67              		.loc 1 135 0
  68 001e 2369     		ldr	r3, [r4, #16]
  69              	.LVL4:
  70              	.LBB41:
  71              	.LBB42:
  72              	.LBB43:
1880:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             (dividerValue <= (PERI_DIV_8_CTL_INT8_DIV_Msk >> PERI_DIV_8_CTL_INT8_DIV_Pos)))
  73              		.loc 2 1880 0
  74 0020 FF2B     		cmp	r3, #255
  75 0022 0AD8     		bhi	.L2
1883:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             retVal = CY_SYSCLK_SUCCESS;
  76              		.loc 2 1883 0
  77 0024 9168     		ldr	r1, [r2, #8]
  78 0026 7420     		movs	r0, #116
  79 0028 125A     		ldrh	r2, [r2, r0]
  80 002a 8A18     		adds	r2, r1, r2
  81 002c D068     		ldr	r0, [r2, #12]
  82 002e 1649     		ldr	r1, .L3+4
  83 0030 0140     		ands	r1, r0
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 43
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 43
>>>>>>> Isac


  84 0032 1B06     		lsls	r3, r3, #24
  85              	.LVL5:
  86 0034 1B0C     		lsrs	r3, r3, #16
  87 0036 0B43     		orrs	r3, r1
  88 0038 D360     		str	r3, [r2, #12]
  89              	.LVL6:
  90              	.L2:
  91              	.LBE43:
  92              	.LBE42:
  93              	.LBE41:
  94              	.LBB44:
  95              	.LBB45:
  96              	.LBB46:
2132:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            CY_PERI_DIV_CMD_PA_TYPE_SEL_Msk                 |
  97              		.loc 2 2132 0
  98 003a 124B     		ldr	r3, .L3
  99 003c 1A68     		ldr	r2, [r3]
2133:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            CY_PERI_DIV_CMD_PA_DIV_SEL_Msk                  |
 100              		.loc 2 2133 0
 101 003e 7323     		movs	r3, #115
 102 0040 D35C     		ldrb	r3, [r2, r3]
 103 0042 0320     		movs	r0, #3
 104 0044 0500     		movs	r5, r0
 105 0046 9D40     		lsls	r5, r5, r3
2134:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            _VAL2FLD(CY_PERI_DIV_CMD_TYPE_SEL, dividerType) |
 106              		.loc 2 2134 0
 107 0048 7023     		movs	r3, #112
 108 004a D35C     		ldrb	r3, [r2, r3]
 109 004c 7221     		movs	r1, #114
 110 004e 515C     		ldrb	r1, [r2, r1]
 111 0050 1E00     		movs	r6, r3
 112 0052 8E40     		lsls	r6, r6, r1
 113 0054 3100     		movs	r1, r6
2133:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            CY_PERI_DIV_CMD_PA_DIV_SEL_Msk                  |
 114              		.loc 2 2133 0
 115 0056 2943     		orrs	r1, r5
2136:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             (void)PERI_DIV_CMD; /* dummy read to handle buffered writes */
 116              		.loc 2 2136 0
 117 0058 0340     		ands	r3, r0
2135:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            _VAL2FLD(CY_PERI_DIV_CMD_DIV_SEL,  dividerNum);
 118              		.loc 2 2135 0
 119 005a 0B43     		orrs	r3, r1
 120 005c 8021     		movs	r1, #128
 121 005e 0906     		lsls	r1, r1, #24
 122 0060 0B43     		orrs	r3, r1
2132:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****                            CY_PERI_DIV_CMD_PA_TYPE_SEL_Msk                 |
 123              		.loc 2 2132 0
 124 0062 8021     		movs	r1, #128
 125 0064 C900     		lsls	r1, r1, #3
 126 0066 9068     		ldr	r0, [r2, #8]
 127 0068 4350     		str	r3, [r0, r1]
2137:Generated_Source\PSoC6\pdl\drivers/peripheral/sysclk/cy_sysclk.h ****             retVal = CY_SYSCLK_SUCCESS;
 128              		.loc 2 2137 0
 129 006a 9368     		ldr	r3, [r2, #8]
 130 006c 5B58     		ldr	r3, [r3, r1]
 131              	.LVL7:
 132              	.LBE46:
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 44
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 44
>>>>>>> Isac


 133              	.LBE45:
 134              	.LBE44:
 136:Generated_Source\PSoC6/ADC.c ****         ADC_intSarClock_Enable();
 137:Generated_Source\PSoC6/ADC.c ****     #endif /* ADC_CLOCK_INTERNAL */
 138:Generated_Source\PSoC6/ADC.c **** 
 139:Generated_Source\PSoC6/ADC.c ****     /* Init SAR and MUX registers */
 140:Generated_Source\PSoC6/ADC.c ****     (void)Cy_SAR_DeInit(ADC_SAR__HW, deInitRouting);
 135              		.loc 1 140 0
 136 006e 074D     		ldr	r5, .L3+8
 137 0070 0021     		movs	r1, #0
 138 0072 2800     		movs	r0, r5
 139 0074 FFF7FEFF 		bl	Cy_SAR_DeInit
 140              	.LVL8:
 141:Generated_Source\PSoC6/ADC.c ****     (void)Cy_SAR_Init(ADC_SAR__HW, config->hwConfigStc);
 141              		.loc 1 141 0
 142 0078 A168     		ldr	r1, [r4, #8]
 143 007a 2800     		movs	r0, r5
 144 007c FFF7FEFF 		bl	Cy_SAR_Init
 145              	.LVL9:
 142:Generated_Source\PSoC6/ADC.c **** 
 143:Generated_Source\PSoC6/ADC.c ****     /* Connect Vminus to VSSA when even one channel is single-ended or multiple channels configured
 144:Generated_Source\PSoC6/ADC.c ****     if(1uL == ADC_MUX_SWITCH0_INIT)
 145:Generated_Source\PSoC6/ADC.c ****     {
 146:Generated_Source\PSoC6/ADC.c ****         Cy_SAR_SetVssaVminusSwitch(ADC_SAR__HW, CY_SAR_SWITCH_CLOSE);
 147:Generated_Source\PSoC6/ADC.c **** 
 148:Generated_Source\PSoC6/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 149:Generated_Source\PSoC6/ADC.c ****         if(1uL < config->numChannels)
 150:Generated_Source\PSoC6/ADC.c ****         {
 151:Generated_Source\PSoC6/ADC.c ****             Cy_SAR_SetVssaSarSeqCtrl(ADC_SAR__HW, CY_SAR_SWITCH_SEQ_CTRL_ENABLE);
 152:Generated_Source\PSoC6/ADC.c ****         }
 153:Generated_Source\PSoC6/ADC.c ****     }
 154:Generated_Source\PSoC6/ADC.c **** 
 155:Generated_Source\PSoC6/ADC.c ****     return;
 156:Generated_Source\PSoC6/ADC.c **** }
 146              		.loc 1 156 0
 147              		@ sp needed
 148              	.LVL10:
 149 0080 70BD     		pop	{r4, r5, r6, pc}
 150              	.L4:
 151 0082 C046     		.align	2
 152              	.L3:
 153 0084 00000000 		.word	cy_device
 154 0088 FF00FFFF 		.word	-65281
 155 008c 00001D41 		.word	1092419584
 156              		.cfi_endproc
 157              	.LFE188:
 158              		.size	ADC_InitConfig, .-ADC_InitConfig
 159              		.section	.text.ADC_StartConvert,"ax",%progbits
 160              		.align	2
 161              		.global	ADC_StartConvert
 162              		.code	16
 163              		.thumb_func
 164              		.type	ADC_StartConvert, %function
 165              	ADC_StartConvert:
 166              	.LFB190:
 157:Generated_Source\PSoC6/ADC.c **** 
 158:Generated_Source\PSoC6/ADC.c **** /* ****************************************************************************
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 45
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 45
>>>>>>> Isac


 159:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_SelectConfig
 160:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//*
 161:Generated_Source\PSoC6/ADC.c **** *
 162:Generated_Source\PSoC6/ADC.c **** * \brief Selects the predefined configuration for scanning.
 163:Generated_Source\PSoC6/ADC.c **** *
 164:Generated_Source\PSoC6/ADC.c **** * \param config Number of configuration in the ADC.
 165:Generated_Source\PSoC6/ADC.c **** *
 166:Generated_Source\PSoC6/ADC.c **** * \param restart Set to 1u if the ADC should be  restarted after
 167:Generated_Source\PSoC6/ADC.c **** * selecting the configuration.
 168:Generated_Source\PSoC6/ADC.c **** *
 169:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 170:Generated_Source\PSoC6/ADC.c **** void ADC_SelectConfig(uint32_t config, uint32_t restart)
 171:Generated_Source\PSoC6/ADC.c **** {
 172:Generated_Source\PSoC6/ADC.c ****     /* Check whether the configuration number is valid or not */
 173:Generated_Source\PSoC6/ADC.c ****     if(ADC_TOTAL_CONFIGS > config)
 174:Generated_Source\PSoC6/ADC.c ****     {
 175:Generated_Source\PSoC6/ADC.c ****         /* Stop the ADC before changing configurations */
 176:Generated_Source\PSoC6/ADC.c ****         ADC_Stop();
 177:Generated_Source\PSoC6/ADC.c ****         ADC_selected = 1u;
 178:Generated_Source\PSoC6/ADC.c **** 
 179:Generated_Source\PSoC6/ADC.c ****         if(0u == ADC_initVar)
 180:Generated_Source\PSoC6/ADC.c ****         {
 181:Generated_Source\PSoC6/ADC.c ****             ADC_Init();
 182:Generated_Source\PSoC6/ADC.c ****             ADC_initVar |= ADC_INIT_VAR_INIT_FLAG;
 183:Generated_Source\PSoC6/ADC.c ****         }
 184:Generated_Source\PSoC6/ADC.c ****         #if (ADC_VREF_ROUTED)
 185:Generated_Source\PSoC6/ADC.c ****             ADC_vrefAMux_DisconnectAll();
 186:Generated_Source\PSoC6/ADC.c ****         #endif
 187:Generated_Source\PSoC6/ADC.c **** 
 188:Generated_Source\PSoC6/ADC.c ****         ADC_InitConfig(&ADC_allConfigs[config]);
 189:Generated_Source\PSoC6/ADC.c **** 
 190:Generated_Source\PSoC6/ADC.c ****         #if (ADC_VREF_ROUTED)
 191:Generated_Source\PSoC6/ADC.c ****             ADC_vrefAMux_Select((uint8)config);
 192:Generated_Source\PSoC6/ADC.c ****         #endif
 193:Generated_Source\PSoC6/ADC.c **** 
 194:Generated_Source\PSoC6/ADC.c ****         ADC_currentConfig = config;
 195:Generated_Source\PSoC6/ADC.c **** 
 196:Generated_Source\PSoC6/ADC.c ****         if(1u == restart)
 197:Generated_Source\PSoC6/ADC.c ****         {
 198:Generated_Source\PSoC6/ADC.c ****             /* Restart the ADC */
 199:Generated_Source\PSoC6/ADC.c ****             ADC_Start();
 200:Generated_Source\PSoC6/ADC.c **** 
 201:Generated_Source\PSoC6/ADC.c ****             /* Restart the scan */
 202:Generated_Source\PSoC6/ADC.c ****             ADC_StartConvert();
 203:Generated_Source\PSoC6/ADC.c ****         }
 204:Generated_Source\PSoC6/ADC.c ****     }
 205:Generated_Source\PSoC6/ADC.c ****     return;
 206:Generated_Source\PSoC6/ADC.c **** }
 207:Generated_Source\PSoC6/ADC.c **** 
 208:Generated_Source\PSoC6/ADC.c **** /*******************************************************************************
 209:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_StartConvert
 210:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//**
 211:Generated_Source\PSoC6/ADC.c **** *
 212:Generated_Source\PSoC6/ADC.c **** * \brief In continuous mode, this API starts the conversion process and it runs
 213:Generated_Source\PSoC6/ADC.c **** * continuously.
 214:Generated_Source\PSoC6/ADC.c **** 
 215:Generated_Source\PSoC6/ADC.c **** * In Single Shot mode, the function triggers a single scan and
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 46
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 46
>>>>>>> Isac


 216:Generated_Source\PSoC6/ADC.c **** * every scan requires a call of this function. The mode is set with the
 217:Generated_Source\PSoC6/ADC.c **** * Sample Mode parameter in the customizer. The customizer setting can be
 218:Generated_Source\PSoC6/ADC.c **** * overridden at run time with the ADC_SetConvertMode() function.
 219:Generated_Source\PSoC6/ADC.c **** *
 220:Generated_Source\PSoC6/ADC.c **** * \param None
 221:Generated_Source\PSoC6/ADC.c **** *
 222:Generated_Source\PSoC6/ADC.c **** * \return None
 223:Generated_Source\PSoC6/ADC.c **** *
 224:Generated_Source\PSoC6/ADC.c **** * \sideeffect None
 225:Generated_Source\PSoC6/ADC.c **** *
 226:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 227:Generated_Source\PSoC6/ADC.c **** void ADC_StartConvert(void)
 228:Generated_Source\PSoC6/ADC.c **** {
 167              		.loc 1 228 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171 0000 10B5     		push	{r4, lr}
 172              		.cfi_def_cfa_offset 8
 173              		.cfi_offset 4, -8
 174              		.cfi_offset 14, -4
 229:Generated_Source\PSoC6/ADC.c ****     if (SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk == (ADC_SAR__HW->SAMPLE_CTRL & SAR_SAMPLE_CTRL_DSI_TR
 175              		.loc 1 229 0
 176 0002 074B     		ldr	r3, .L8
 177 0004 5B68     		ldr	r3, [r3, #4]
 178 0006 5B03     		lsls	r3, r3, #13
 179 0008 04D5     		bpl	.L6
 230:Generated_Source\PSoC6/ADC.c ****     {
 231:Generated_Source\PSoC6/ADC.c ****         Cy_SAR_StartConvert(ADC_SAR__HW, CY_SAR_START_CONVERT_CONTINUOUS);
 180              		.loc 1 231 0
 181 000a 0121     		movs	r1, #1
 182 000c 0448     		ldr	r0, .L8
 183 000e FFF7FEFF 		bl	Cy_SAR_StartConvert
 184              	.LVL11:
 185 0012 03E0     		b	.L5
 186              	.L6:
 232:Generated_Source\PSoC6/ADC.c ****     }
 233:Generated_Source\PSoC6/ADC.c ****     else
 234:Generated_Source\PSoC6/ADC.c ****     {
 235:Generated_Source\PSoC6/ADC.c ****         Cy_SAR_StartConvert(ADC_SAR__HW, CY_SAR_START_CONVERT_SINGLE_SHOT);
 187              		.loc 1 235 0
 188 0014 0021     		movs	r1, #0
 189 0016 0248     		ldr	r0, .L8
 190 0018 FFF7FEFF 		bl	Cy_SAR_StartConvert
 191              	.LVL12:
 192              	.L5:
 236:Generated_Source\PSoC6/ADC.c ****     }
 237:Generated_Source\PSoC6/ADC.c **** }
 193              		.loc 1 237 0
 194              		@ sp needed
 195 001c 10BD     		pop	{r4, pc}
 196              	.L9:
 197 001e C046     		.align	2
 198              	.L8:
 199 0020 00001D41 		.word	1092419584
 200              		.cfi_endproc
 201              	.LFE190:
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 47
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 47
>>>>>>> Isac


 202              		.size	ADC_StartConvert, .-ADC_StartConvert
 203              		.section	.text.ADC_SetConvertMode,"ax",%progbits
 204              		.align	2
 205              		.global	ADC_SetConvertMode
 206              		.code	16
 207              		.thumb_func
 208              		.type	ADC_SetConvertMode, %function
 209              	ADC_SetConvertMode:
 210              	.LFB191:
 238:Generated_Source\PSoC6/ADC.c **** 
 239:Generated_Source\PSoC6/ADC.c **** /*******************************************************************************
 240:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_SetConvertMode
 241:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//**
 242:Generated_Source\PSoC6/ADC.c **** *
 243:Generated_Source\PSoC6/ADC.c **** * \brief Sets the conversion mode to either Single-Shot or continuous. This
 244:Generated_Source\PSoC6/ADC.c **** * function overrides the settings applied in the customizer. Changing
 245:Generated_Source\PSoC6/ADC.c **** * configurations will restore the values set in the customizer.
 246:Generated_Source\PSoC6/ADC.c **** *
 247:Generated_Source\PSoC6/ADC.c **** * \param mode Sets the conversion mode.
 248:Generated_Source\PSoC6/ADC.c **** *
 249:Generated_Source\PSoC6/ADC.c **** * \return None
 250:Generated_Source\PSoC6/ADC.c **** *
 251:Generated_Source\PSoC6/ADC.c **** * \sideeffect None
 252:Generated_Source\PSoC6/ADC.c **** *
 253:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 254:Generated_Source\PSoC6/ADC.c **** void ADC_SetConvertMode(cy_en_sar_start_convert_sel_t mode)
 255:Generated_Source\PSoC6/ADC.c **** {
 211              		.loc 1 255 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 215              		@ link register save eliminated.
 216              	.LVL13:
 256:Generated_Source\PSoC6/ADC.c ****     switch(mode)
 217              		.loc 1 256 0
 218 0000 0128     		cmp	r0, #1
 219 0002 06D1     		bne	.L14
 257:Generated_Source\PSoC6/ADC.c ****     {
 258:Generated_Source\PSoC6/ADC.c ****     case CY_SAR_START_CONVERT_CONTINUOUS:
 259:Generated_Source\PSoC6/ADC.c ****         ADC_SAR__HW->SAMPLE_CTRL |= SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk;
 220              		.loc 1 259 0
 221 0004 064A     		ldr	r2, .L15
 222 0006 5368     		ldr	r3, [r2, #4]
 223 0008 8021     		movs	r1, #128
 224 000a C902     		lsls	r1, r1, #11
 225 000c 0B43     		orrs	r3, r1
 226 000e 5360     		str	r3, [r2, #4]
 260:Generated_Source\PSoC6/ADC.c ****         break;
 227              		.loc 1 260 0
 228 0010 04E0     		b	.L10
 229              	.L14:
 261:Generated_Source\PSoC6/ADC.c ****     case CY_SAR_START_CONVERT_SINGLE_SHOT:
 262:Generated_Source\PSoC6/ADC.c ****     default:
 263:Generated_Source\PSoC6/ADC.c ****         ADC_SAR__HW->SAMPLE_CTRL &= ~SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk;
 230              		.loc 1 263 0
 231 0012 034A     		ldr	r2, .L15
 232 0014 5168     		ldr	r1, [r2, #4]
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 48
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 48
>>>>>>> Isac


 233 0016 034B     		ldr	r3, .L15+4
 234 0018 0B40     		ands	r3, r1
 235 001a 5360     		str	r3, [r2, #4]
 236              	.L10:
 264:Generated_Source\PSoC6/ADC.c ****         break;
 265:Generated_Source\PSoC6/ADC.c ****     }
 266:Generated_Source\PSoC6/ADC.c **** }
 237              		.loc 1 266 0
 238              		@ sp needed
 239 001c 7047     		bx	lr
 240              	.L16:
 241 001e C046     		.align	2
 242              	.L15:
 243 0020 00001D41 		.word	1092419584
 244 0024 FFFFFBFF 		.word	-262145
 245              		.cfi_endproc
 246              	.LFE191:
 247              		.size	ADC_SetConvertMode, .-ADC_SetConvertMode
 248              		.section	.text.ADC_IRQ_Enable,"ax",%progbits
 249              		.align	2
 250              		.global	ADC_IRQ_Enable
 251              		.code	16
 252              		.thumb_func
 253              		.type	ADC_IRQ_Enable, %function
 254              	ADC_IRQ_Enable:
 255              	.LFB192:
 267:Generated_Source\PSoC6/ADC.c **** 
 268:Generated_Source\PSoC6/ADC.c **** /* ****************************************************************************
 269:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_IRQ_Enable
 270:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//*
 271:Generated_Source\PSoC6/ADC.c **** *
 272:Generated_Source\PSoC6/ADC.c **** * \brief Enables interrupts to occur at the end of a conversion. Global
 273:Generated_Source\PSoC6/ADC.c **** * interrupts must also be enabled for the ADC interrupts to occur.
 274:Generated_Source\PSoC6/ADC.c **** *
 275:Generated_Source\PSoC6/ADC.c **** * \param None
 276:Generated_Source\PSoC6/ADC.c **** *
 277:Generated_Source\PSoC6/ADC.c **** * \return None
 278:Generated_Source\PSoC6/ADC.c **** *
 279:Generated_Source\PSoC6/ADC.c **** * \sideeffect None
 280:Generated_Source\PSoC6/ADC.c **** *
 281:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 282:Generated_Source\PSoC6/ADC.c **** void ADC_IRQ_Enable(void){
 256              		.loc 1 282 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              		@ link register save eliminated.
 283:Generated_Source\PSoC6/ADC.c ****     /* Interrupt core assignment will be up to the user. */
 284:Generated_Source\PSoC6/ADC.c ****     #ifdef ADC_IRQ__INTC_CORTEXM4_ASSIGNED
 285:Generated_Source\PSoC6/ADC.c ****     #if (CY_CPU_CORTEX_M4)
 286:Generated_Source\PSoC6/ADC.c ****         NVIC_EnableIRQ(ADC_IRQ_cfg.intrSrc);
 287:Generated_Source\PSoC6/ADC.c ****     #endif
 288:Generated_Source\PSoC6/ADC.c ****     #endif
 289:Generated_Source\PSoC6/ADC.c **** 
 290:Generated_Source\PSoC6/ADC.c ****     #ifdef ADC_IRQ__INTC_CORTEXM0P_ASSIGNED
 291:Generated_Source\PSoC6/ADC.c ****     #if (CY_CPU_CORTEX_M0P)
 292:Generated_Source\PSoC6/ADC.c ****         NVIC_EnableIRQ(ADC_IRQ_cfg.intrSrc);
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 49
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 49
>>>>>>> Isac


 293:Generated_Source\PSoC6/ADC.c ****     #endif
 294:Generated_Source\PSoC6/ADC.c ****     #endif
 295:Generated_Source\PSoC6/ADC.c **** }
 261              		.loc 1 295 0
 262              		@ sp needed
 263 0000 7047     		bx	lr
 264              		.cfi_endproc
 265              	.LFE192:
 266              		.size	ADC_IRQ_Enable, .-ADC_IRQ_Enable
 267 0002 C046     		.section	.text.ADC_IRQ_Disable,"ax",%progbits
 268              		.align	2
 269              		.global	ADC_IRQ_Disable
 270              		.code	16
 271              		.thumb_func
 272              		.type	ADC_IRQ_Disable, %function
 273              	ADC_IRQ_Disable:
 274              	.LFB193:
 296:Generated_Source\PSoC6/ADC.c **** 
 297:Generated_Source\PSoC6/ADC.c **** /* ****************************************************************************
 298:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_IRQ_Disable
 299:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//*
 300:Generated_Source\PSoC6/ADC.c **** *
 301:Generated_Source\PSoC6/ADC.c **** * \brief Disables end of conversion interrupts.
 302:Generated_Source\PSoC6/ADC.c **** *
 303:Generated_Source\PSoC6/ADC.c **** * \param None
 304:Generated_Source\PSoC6/ADC.c **** *
 305:Generated_Source\PSoC6/ADC.c **** * \return None
 306:Generated_Source\PSoC6/ADC.c **** *
 307:Generated_Source\PSoC6/ADC.c **** * \sideeffect None
 308:Generated_Source\PSoC6/ADC.c **** *
 309:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 310:Generated_Source\PSoC6/ADC.c **** void ADC_IRQ_Disable(void){
 275              		.loc 1 310 0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              		@ link register save eliminated.
 311:Generated_Source\PSoC6/ADC.c ****     /* Interrupt core assignment will be up to the user. */
 312:Generated_Source\PSoC6/ADC.c ****     #ifdef ADC_IRQ__INTC_CORTEXM4_ASSIGNED
 313:Generated_Source\PSoC6/ADC.c ****     #if (CY_CPU_CORTEX_M4)
 314:Generated_Source\PSoC6/ADC.c ****         NVIC_DisableIRQ(ADC_IRQ_cfg.intrSrc);
 315:Generated_Source\PSoC6/ADC.c ****     #endif
 316:Generated_Source\PSoC6/ADC.c ****     #endif
 317:Generated_Source\PSoC6/ADC.c **** 
 318:Generated_Source\PSoC6/ADC.c ****     #ifdef ADC_IRQ__INTC_CORTEXM0P_ASSIGNED
 319:Generated_Source\PSoC6/ADC.c ****     #if (CY_CPU_CORTEX_M0P)
 320:Generated_Source\PSoC6/ADC.c ****         NVIC_DisableIRQ(ADC_IRQ_cfg.intrSrc);
 321:Generated_Source\PSoC6/ADC.c ****     #endif
 322:Generated_Source\PSoC6/ADC.c ****     #endif
 323:Generated_Source\PSoC6/ADC.c **** }
 280              		.loc 1 323 0
 281              		@ sp needed
 282 0000 7047     		bx	lr
 283              		.cfi_endproc
 284              	.LFE193:
 285              		.size	ADC_IRQ_Disable, .-ADC_IRQ_Disable
 286 0002 C046     		.section	.text.ADC_SetEosMask,"ax",%progbits
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 50
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 50
>>>>>>> Isac


 287              		.align	2
 288              		.global	ADC_SetEosMask
 289              		.code	16
 290              		.thumb_func
 291              		.type	ADC_SetEosMask, %function
 292              	ADC_SetEosMask:
 293              	.LFB194:
 324:Generated_Source\PSoC6/ADC.c **** 
 325:Generated_Source\PSoC6/ADC.c **** /*******************************************************************************
 326:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_SetEosMask
 327:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//**
 328:Generated_Source\PSoC6/ADC.c **** *
 329:Generated_Source\PSoC6/ADC.c **** * \brief Sets or clears the End of Scan (EOS) interrupt mask.
 330:Generated_Source\PSoC6/ADC.c **** *
 331:Generated_Source\PSoC6/ADC.c **** * \param mask 1 to set the mask, 0 to clear the mask.
 332:Generated_Source\PSoC6/ADC.c **** *
 333:Generated_Source\PSoC6/ADC.c **** * \return None
 334:Generated_Source\PSoC6/ADC.c **** *
 335:Generated_Source\PSoC6/ADC.c **** * \sideeffect All other bits in the INTR register are cleared by this function.
 336:Generated_Source\PSoC6/ADC.c **** *
 337:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 338:Generated_Source\PSoC6/ADC.c **** void ADC_SetEosMask(uint32_t mask)
 339:Generated_Source\PSoC6/ADC.c **** {
 294              		.loc 1 339 0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 0, uses_anonymous_args = 0
 298              	.LVL14:
 299 0000 10B5     		push	{r4, lr}
 300              		.cfi_def_cfa_offset 8
 301              		.cfi_offset 4, -8
 302              		.cfi_offset 14, -4
 340:Generated_Source\PSoC6/ADC.c ****     uint32_t intrMaskReg;
 341:Generated_Source\PSoC6/ADC.c **** 
 342:Generated_Source\PSoC6/ADC.c ****     intrMaskReg = (0uL == mask) ? CY_SAR_DEINIT : SAR_INTR_MASK_EOS_MASK_Msk;
 303              		.loc 1 342 0
 304 0002 441E     		subs	r4, r0, #1
 305 0004 A041     		sbcs	r0, r0, r4
 306              	.LVL15:
 307 0006 C4B2     		uxtb	r4, r0
 308              	.LVL16:
 309              	.LBB47:
 310              	.LBB48:
 311              		.file 3 "Generated_Source\\PSoC6\\pdl\\drivers/peripheral/sar/cy_sar.h"
   1:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /***************************************************************************//**
   2:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \file cy_sar.h
   3:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \version 1.20
   4:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
   5:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Header file for the SAR driver.
   6:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
   7:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ********************************************************************************
   8:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \copyright
   9:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Copyright 2017-2018, Cypress Semiconductor Corporation. All rights reserved.
  10:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * You may use this file only in accordance with the license, terms, conditions,
  11:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * disclaimers, and limitations in the end user license agreement accompanying
  12:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the software package with which this file was provided.
  13:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 51
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 51
>>>>>>> Isac


  14:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
  15:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /**
  16:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \addtogroup group_sar
  17:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
  18:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This driver configures and controls the SAR ADC subsystem block.
  19:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  20:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The functions and other declarations used in this driver are in cy_sar.h. 
  21:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * You can include cy_pdl.h (ModusToolbox only) to get access to all functions 
  22:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and declarations in the PDL. 
  23:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  24:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This SAR ADC subsystem is comprised of:
  25:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - a 12-bit SAR converter (SARADC)
  26:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - an embedded reference block (SARREF)
  27:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - a mux (\ref group_sar_sarmux "SARMUX") at the inputs of the converter
  28:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - a sequence controller (\ref group_sar_sarmux "SARSEQ") that enables multi-channel acquisition
  29:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       in a round robin fashion, without CPU intervention, to maximize scan rates.
  30:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  31:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_block_diagram.png
  32:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  33:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The high level features of the subsystem are:
  34:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - maximum sample rate of 1 Msps
  35:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Sixteen individually configurable channels (depends on device routing capabilities)
  36:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - per channel selectable
  37:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - single-ended or differential input mode
  38:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - input from external pin (8 channels in single-ended mode or 4 channels in differential mo
  39:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *         or from internal signals (AMUXBUS, CTB, Die Temperature Sensor)
  40:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - choose one of four programmable acquisition times
  41:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - averaging and accumulation
  42:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - scan can be triggered by firmware or hardware in single shot or continuous mode
  43:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - hardware averaging from 2 to 256 samples
  44:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - selectable voltage references
  45:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - internal VDDA and VDDA/2 references
  46:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - buffered 1.2 V bandgap reference from \ref group_sysanalog "AREF"
  47:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - external reference from dedicated pin
  48:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Interrupt generation
  49:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  50:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_usage Usage
  51:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  52:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The high level steps to use this driver are:
  53:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  54:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   -# \ref group_sar_initialization
  55:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   -# \ref group_sar_trigger_conversions
  56:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   -# \ref group_sar_handle_interrupts
  57:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   -# \ref group_sar_retrieve_result
  58:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  59:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_initialization Initialization and Enable
  60:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  61:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To configure the SAR subsystem, call \ref Cy_SAR_Init. Pass in a pointer to the \ref SAR_Type
  62:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * structure for the base hardware register address and pass in the configuration structure,
  63:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref cy_stc_sar_config_t.
  64:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  65:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * After initialization, call \ref Cy_SAR_Enable to enable the hardware.
  66:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  67:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Here is guidance on how to set the data fields of the configuration structure:
  68:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  69:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_ctrl uint32_t ctrl
  70:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 52
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 52
>>>>>>> Isac


  71:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field specifies configurations that apply to all channels such as the Vref
  72:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * source or the negative terminal selection for all single-ended channels.
  73:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Select a value from each of the following enums that begin with "cy_en_sar_ctrl_" and "OR" them t
  74:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_pwr_ctrl_vref_t
  75:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_vref_sel_t
  76:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_bypass_cap_t
  77:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_neg_sel_t
  78:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_hw_ctrl_negvref_t
  79:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_comp_delay_t
  80:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_comp_pwr_t
  81:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_sarmux_deep_sleep_t
  82:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_sarseq_routing_switches_t
  83:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  84:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SAR_CTRL
  85:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  86:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_sampleCtrl uint32_t sampleCtrl
  87:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  88:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures sampling details that apply to all channels.
  89:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Select a value from each of the following enums that begin with "cy_en_sar_sample_" and "OR" them
  90:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_result_align_t
  91:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_single_ended_format_t
  92:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_differential_format_t
  93:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_avg_cnt_t
  94:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_avg_mode_t
  95:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_trigger_mode_t
  96:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  97:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SAMPLE_CTRL
  98:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  99:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_sampleTime01 uint32_t sampleTime01
 100:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 101:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures the value for sample times 0 and 1 in ADC clock cycles.
 102:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 103:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR has four programmable 10-bit aperture times that are configured using two data fields,
 104:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref group_sar_init_struct_sampleTime01 and
 105:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref group_sar_init_struct_sampleTime23.
 106:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Ten bits allow for a range of 0 to 1023 cycles, however 0 and 1 are invalid.
 107:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The minimum aperture time is 167 ns. With an 18 MHz ADC clock, this is
 108:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * equal to 3 cycles or a value of 4 in this field. The actual aperture time is one cycle less than
 109:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the value stored in this field.
 110:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 111:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use the shifts defined in \ref cy_en_sar_sample_time_shift_t.
 112:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 113:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SAMPLE_TIME01
 114:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 115:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_sampleTime23 uint32_t sampleTime23
 116:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 117:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures the value for sample times 2 and 3 in ADC clock cycles.
 118:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use the shifts defined in \ref cy_en_sar_sample_time_shift_t.
 119:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 120:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SAMPLE_TIME23
 121:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 122:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_rangeThres uint32_t rangeThres
 123:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 124:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures the upper and lower thresholds for the range interrupt.
 125:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * These thresholds apply on a global level for all channels with range detection enabled.
 126:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 127:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SARSEQ supports range detection to allow for automatic detection of sample values
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 53
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 53
>>>>>>> Isac


 128:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * compared to two programmable thresholds without CPU involvement.
 129:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Range detection is done after averaging, alignment, and sign extension (if applicable). In other 
 130:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * threshold values need to have the same data format as the result data.
 131:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The values are interpreted as signed or unsigned according to each channel's configuration.
 132:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 133:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use the shifts defined in \ref cy_en_sar_range_thres_shift_t.
 134:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 135:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The \ref Cy_SAR_SetLowLimit and \ref Cy_SAR_SetHighLimit provide run-time configurability of thes
 136:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 137:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_RANGE_THRES
 138:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 139:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_rangeCond cy_en_sar_range_detect_condition_t rangeCond
 140:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 141:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures the condition (below, inside, outside, or above) that will trigger
 142:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the range interrupt. Select a value from the \ref cy_en_sar_range_detect_condition_t enum.
 143:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 144:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_chanEn uint32_t chanEn
 145:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 146:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures which channels will be scanned.
 147:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Each bit corresponds to a channel. Bit 0 enables channel 0, bit 1 enables channel 1,
 148:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * bit 2 enables channel 2, and so on.
 149:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 150:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_chanConfig uint32_t chanConfig[16]
 151:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 152:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Each channel has its own channel configuration register.
 153:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel configuration specifies which pin/signal is connected to that channel
 154:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and how the channel is sampled.
 155:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 156:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Select a value from each of the following enums that begin with "cy_en_sar_chan_config_" and "OR"
 157:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 158:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_input_mode_t
 159:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_pos_pin_addr_t
 160:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_pos_port_addr_t
 161:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_avg_en_t
 162:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_sample_time_t
 163:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_neg_pin_addr_t
 164:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_neg_port_addr_t
 165:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 166:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Some important considerations are:
 167:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - The POS_PORT_ADDR and POS_PIN_ADDR bit fields are used by the SARSEQ to select
 168:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   the connection to the positive terminal (Vplus) of the ADC for each channel.
 169:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - When the channel is an unpaired differential input (\ref CY_SAR_CHAN_DIFFERENTIAL_UNPAIRED), 
 170:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   NEG_PORT_ADDR and NEG_PIN_ADDR are used by the SARSEQ to select the connection
 171:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   to the negative terminal (Vminus) of the ADC.
 172:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - When the channel is a differential input pair (\ref CY_SAR_CHAN_DIFFERENTIAL_PAIRED), the NEG
 173:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   For differential input pairs, only the pin for the positive terminal needs to be
 174:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   specified and this pin must be even. For example, Pin 0 (positive terminal) and Pin 1 (negative
 175:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   are a pair. Pin 2 (positive terminal) and Pin 3 (negative terminal) are a pair.
 176:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 177:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If the SARSEQ is disabled (\ref cy_en_sar_ctrl_sarseq_routing_switches_t) or
 178:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * it is not controlling any switches (\ref group_sar_init_struct_muxSwitchSqCtrl = 0), the port and
 179:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are ignored. This is possible when there is only one channel to scan.
 180:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 181:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_CHAN_CONFIG
 182:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 183:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_intrMask uint32_t intrMask
 184:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 54
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 54
>>>>>>> Isac


 185:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures which interrupt events (end of scan, overflow, or firmware collision) will 
 186:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 187:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Select one or more values from the \ref cy_en_sar_intr_mask_t enum and "OR" them
 188:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * together.
 189:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 190:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_INTR_MASK
 191:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 192:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_satIntrMask uint32_t satIntrMask
 193:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 194:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures which channels will cause a saturation interrupt.
 195:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 196:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SARSEQ has a saturation detect that is always applied to every conversion.
 197:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This feature detects whether a channel's sample value is equal to the minimum or maximum values.
 198:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This allows the firmware to take action, for example, discard the result, when the SARADC saturat
 199:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The sample value is tested right after conversion, that is, before averaging. This means that it
 200:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * can happen that the interrupt is set while the averaged result in the data register is not
 201:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * equal to the minimum or maximum.
 202:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 203:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Each bit corresponds to a channel. A value of 0 disables saturation detection for all channels.
 204:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 205:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_rangeIntrMask uint32_t rangeIntrMask
 206:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 207:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures which channels will cause a range detection interrupt.
 208:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Each bit corresponds to a channel. A value of 0 disables range detection for all channels.
 209:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 210:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_muxSwitch uint32_t muxSwitch
 211:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 212:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field is the firmware control of the SARMUX switches.
 213:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 214:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use one or more values from the \ref cy_en_sar_mux_switch_fw_ctrl_t enum and "OR" them together.
 215:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If the SARSEQ is enabled, the SARMUX switches that will be used must
 216:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * also be closed using this firmware control.
 217:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 218:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_MUX_SWITCH
 219:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 220:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Firmware control can be changed at run-time by calling \ref Cy_SAR_SetAnalogSwitch with \ref CY_S
 221:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and the desired switch states.
 222:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 223:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_muxSwitchSqCtrl uint32_t muxSwitchSqCtrl
 224:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 225:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field enables or disables SARSEQ control of the SARMUX switches.
 226:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To disable control of all switches, set this field to 0. To disable the SARSEQ all together,
 227:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * use \ref CY_SAR_SARSEQ_SWITCH_DISABLE when configuring the \ref group_sar_init_struct_ctrl regist
 228:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 229:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use one or more values from the \ref cy_en_sar_mux_switch_sq_ctrl_t enum and "OR" them together.
 230:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 231:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_MUX_SQ_CTRL
 232:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 233:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * SARSEQ control can be changed at run-time by calling \ref Cy_SAR_SetSwitchSarSeqCtrl.
 234:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 235:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_configRouting bool configRouting
 236:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 237:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If true, the \ref group_sar_init_struct_muxSwitch and \ref group_sar_init_struct_muxSwitchSqCtrl 
 238:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * will be used. If false, the fields will be ignored.
 239:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 240:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_vrefMvValue uint32_t vrefMvValue
 241:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 55
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 55
>>>>>>> Isac


 242:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field sets the value of the reference voltage in millivolts used. This value
 243:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * is used for converting counts to volts in the \ref Cy_SAR_CountsTo_Volts, \ref Cy_SAR_CountsTo_mV
 244:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref Cy_SAR_CountsTo_uVolts functions.
 245:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 246:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_trigger_conversions Triggering Conversions
 247:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 248:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR subsystem has the following modes for triggering a conversion:
 249:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * <table class="doxtable">
 250:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 251:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Mode</th>
 252:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Description</th>
 253:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Usage</th>
 254:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 255:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 256:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Continuous</td>
 257:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>After completing a scan, the
 258:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     SARSEQ will immediately start the next scan. That is, the SARSEQ will always be BUSY.
 259:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     As a result all other triggers, firmware or hardware, are essentially ignored.
 260:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *  </td>
 261:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>To enter this mode, call \ref Cy_SAR_StartConvert with \ref CY_SAR_START_CONVERT_CONTINUO
 262:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     To stop continuous conversions, call \ref Cy_SAR_StopConvert.
 263:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     </td>
 264:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 265:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 266:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Firmware single shot</td>
 267:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>A single conversion of all enabled channels is triggered with a function call to \ref Cy_
 268:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     \ref CY_SAR_START_CONVERT_SINGLE_SHOT.
 269:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     </td>
 270:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>
 271:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     Firmware triggering is always available by calling \ref Cy_SAR_StartConvert with \ref CY_SAR_
 272:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     To allow only firmware triggering, or disable
 273:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     hardware triggering, set up the \ref cy_stc_sar_config_t config structure with \ref CY_SAR_TR
 274:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     </td>
 275:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 276:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 277:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Hardware edge sensitive</td>
 278:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>A single conversion of all enabled channels is triggered on the rising edge of the hardwa
 279:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     trigger signal.</td>
 280:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>To enable this mode, set up the \ref cy_stc_sar_config_t config structure with
 281:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     \ref CY_SAR_TRIGGER_MODE_FW_AND_HWEDGE.</td>
 282:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *    </tr>
 283:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *    <tr>
 284:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Hardware level sensitive</td>
 285:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Conversions are triggered continuously when the hardware trigger signal is high.</td>
 286:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>To enable this mode, set up the \ref cy_stc_sar_config_t config structure with
 287:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     \ref CY_SAR_TRIGGER_MODE_FW_AND_HWLEVEL.</td>
 288:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *    </tr>
 289:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * </table>
 290:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 291:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The trigger mode can be changed during run time with \ref Cy_SAR_SetConvertMode.
 292:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 293:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * For the hardware trigger modes, use the \ref group_trigmux driver to route an internal or externa
 294:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * signal to the SAR trigger input.
 295:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When making the required \ref Cy_TrigMux_Connect calls, use the pre-defined enum, TRIG6_OUT_PASS_
 296:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * for the SAR trigger input.
 297:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 298:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_CONFIG_TRIGGER
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 56
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 56
>>>>>>> Isac


 299:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 300:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_handle_interrupts Handling Interrupts
 301:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 302:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR can generate interrupts on these events:
 303:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 304:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - End of scan (EOS): when scanning of all enabled channels complete.
 305:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Overflow: when the result register is updated before the previous result is read.
 306:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - FW collision: when a new trigger is received while the SAR is still processing the previous t
 307:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Saturation detection: when the channel result is equal to the minimum or maximum value.
 308:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Range detection: when the channel result meets the programmed upper or lower threshold values
 309:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 310:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR interrupt to the NVIC is raised any time the intersection (logic and) of the interrupt
 311:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * flags and the corresponding interrupt masks are non-zero.
 312:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 313:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Implement an interrupt routine and assign it to the SAR interrupt.
 314:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use the pre-defined enum, pass_interrupt_sar_IRQn, as the interrupt source for the SAR.
 315:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 316:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following code snippet demonstrates how to implement a routine to handle the interrupt.
 317:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The routine gets called when any one of the SAR interrupts are triggered.
 318:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When servicing an interrupt, the user must clear the interrupt so that subsequent
 319:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * interrupts can be handled.
 320:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 321:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_ISR
 322:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 323:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following code snippet demonstrates how to configure and enable the interrupt.
 324:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 325:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_CONFIG_INTR
 326:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 327:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Alternately, instead of handling the interrupts, the \ref Cy_SAR_IsEndConversion function
 328:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * allows for firmware polling of the end of conversion status.
 329:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 330:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_retrieve_result Retrieve Channel Results
 331:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 332:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Retrieve the ADC result by calling \ref Cy_SAR_GetResult16 with the desired channel.
 333:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To convert the result to a voltage, pass the ADC result to \ref Cy_SAR_CountsTo_Volts, \ref Cy_SA
 334:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref Cy_SAR_CountsTo_uVolts.
 335:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 336:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_clock SAR Clock Configuration
 337:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 338:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR requires a clock. Assign a clock to the SAR using the
 339:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * pre-defined enum, PCLK_PASS_CLOCK_SAR, to identify the SAR subsystem.
 340:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Set the clock divider value to achieve the desired clock rate. The SAR can support
 341:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * a maximum frequency of 18 MHz.
 342:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 343:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm4.c SAR_SNIPPET_CONFIGURE_CLOCK
 344:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 345:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_scan_time Scan Rate
 346:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 347:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The scan rate is dependent on the following:
 348:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 349:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - ADC clock rate
 350:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Number of channels
 351:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Averaging
 352:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Resolution
 353:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Acquisition times
 354:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 355:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_acquisition_time Acquisition Time
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 57
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 57
>>>>>>> Isac


 356:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 357:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The acquisition time of a channel is based on which of the four global aperture times are selecte
 358:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * channel. The selection is done during initialization per channel with \ref group_sar_init_struct_
 359:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The four global aperture times are also set during initialization with \ref group_sar_init_struct
 360:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref group_sar_init_struct_sampleTime23. Note that these global aperture times are in SAR clock c
 361:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * acquisition time is 1 less than that value in the register.
 362:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 363:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_acquisition_time_eqn.png
 364:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 365:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_channel_sample_time Channel Sample Time
 366:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 367:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The sample time for a channel is the time required to acquire the analog signal
 368:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and convert it to a digital code.
 369:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 370:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_channel_sample_time_eqn.png
 371:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 372:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR ADC is a 12-bit converter so Resolution = 12.
 373:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 374:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_total_scan_time Total Scan Time
 375:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 376:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Channels using one of the sequential averaging modes (\ref CY_SAR_AVG_MODE_SEQUENTIAL_ACCUM or \r
 377:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are sampled multiple times per scan. The number of samples averaged are set during initialization
 378:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * with \ref group_sar_init_struct_sampleCtrl using one of the values from \ref cy_en_sar_sample_ctr
 379:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Channels that are not averaged or use the \ref CY_SAR_AVG_MODE_INTERLEAVED mode are only sampled 
 380:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 381:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The total scan time is the sum of each channel's sample time multiplied by the samples per scan.
 382:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 383:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_scan_rate_eqn.png
 384:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 385:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * where N is the total number of channels in the scan.
 386:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 387:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_sarmux SARMUX and SARSEQ
 388:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 389:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SARMUX is an analog programmable multiplexer. Its switches can be controlled by the SARSEQ or
 390:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and the inputs can come from:
 391:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - a dedicated port (can support 8 single-ended channels or 4 differential channels)
 392:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - an internal die temperature (DieTemp) sensor
 393:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - CTB output via SARBUS0/1 (if CTBs are available on the device)
 394:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - AMUXBUSA/B
 395:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 396:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following figure shows the SARMUX switches. See the device datasheet for the exact location o
 397:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 398:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_sarmux_switches.png
 399:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 400:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When using the SARSEQ, the following configurations must be performed:
 401:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - enable SARSEQ control of required switches (see \ref group_sar_init_struct_muxSwitchSqCtrl)
 402:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - close the required switches with firmware (see \ref group_sar_init_struct_muxSwitch)
 403:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - configure the POS_PORT_ADDR and POS_PIN_ADDR, and if used, the NEG_PORT_ADDR and NEG_PIN_ADDR
 404:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 405:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * While firmware can control every switch in the SARMUX, not every switch can be controlled by the 
 406:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Additionally, switches outside of the SARMUX such as the AMUXBUSA/B switches or
 407:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * CTB switches will require separate function calls (see \ref group_gpio "GPIO" and \ref group_ctb 
 408:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SARSEQ can control three switches in the \ref group_ctb "CTB" driver (see \ref Cy_CTB_EnableS
 409:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * These switches need to be enabled for SARSEQ control if the CTB outputs are used as the SARMUX in
 410:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 411:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following table shows the required POS_PORT_ADDR and POS_PIN_ADDR settings
 412:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * for different input connections.
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 58
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 58
>>>>>>> Isac


 413:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 414:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * <table class="doxtable">
 415:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 416:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Input Connection Selection</th>
 417:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>POS_PORT_ADDR</th>
 418:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>POS_PIN_ADDR</th>
 419:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 420:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 421:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>SARMUX dedicated port</td>
 422:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_SARMUX</td>
 423:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_0 through \ref CY_SAR_CHAN_POS_PIN_ADDR_7</td>
 424:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 425:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 426:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>DieTemp sensor</td>
 427:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_SARMUX_VIRT</td>
 428:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_0</td>
 429:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 430:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 431:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>AMUXBUSA</td>
 432:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_SARMUX_VIRT</td>
 433:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_2</td>
 434:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 435:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 436:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>AMUXBUSB</td>
 437:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_SARMUX_VIRT</td>
 438:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_3</td>
 439:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 440:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 441:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>CTB0 Opamp0 1x output</td>
 442:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_CTB0</td>
 443:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_2</td>
 444:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 445:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 446:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>CTB0 Opamp1 1x output</td>
 447:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_CTB0</td>
 448:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_3</td>
 449:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 450:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * </table>
 451:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 452:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_sarmux_dietemp Input from DieTemp sensor
 453:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 454:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When using the DieTemp sensor, always use single-ended mode.
 455:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The temperature sensor can be routed to Vplus using the \ref CY_SAR_MUX_FW_TEMP_VPLUS switch.
 456:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Connecting this switch will also enable the sensor. Set the \ref group_sar_acquisition_time "acqu
 457:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * be at least 1 us to meet the settling time of the temperature sensor.
 458:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 459:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_sarmux_dietemp.png
 460:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 461:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_02.cydsn/main_cm4.c SNIPPET_SAR_SARMUX_DIETEMP
 462:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 463:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_sarmux_se_diff Input from SARMUX port
 464:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 465:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following figure and code snippet show how two GPIOs on the SARMUX dedicated port
 466:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are connected to the SARADC as separate single-ended channels and as a differential-pair channel.
 467:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 468:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_sarmux_dedicated_port.png
 469:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 59
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 59
>>>>>>> Isac


 470:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_02.cydsn/main_cm4.c SNIPPET_SAR_SARMUX_SE_DIFF
 471:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 472:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_sarmux_ctb Input from CTB output visa SARBUS0/1
 473:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 474:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following figure and code snippet show how the two opamp outputs from the CTB
 475:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are connected to the SARADC as separate single-ended channels and as a differential-pair channel.
 476:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Note that separate function calls are needed to configure and enable the opamps, perform required
 477:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and enable SARSEQ control of the switches contained in the CTB.
 478:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 479:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_sarmux_ctb.png
 480:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 481:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_02.cydsn/main_cm4.c SNIPPET_SAR_SARMUX_CTB
 482:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 483:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_sarmux_amuxbus Input from other pins through AMUXBUSA/B
 484:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 485:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following figure and code snippet show how two GPIOs on any port through the AMUXBUSA and AMU
 486:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are connected to the SARADC as separate single-ended channels and as a differential-pair channel.
 487:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Note that separate function calls are needed to route the device pins to the SARMUX. The AMUXBUSe
 488:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are separated into multiple segments and these segments are connected/disconnected using the AMUX
 489:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * registers in the HSIOM. In the following code snippet, to connect Port 1 to the SARMUX, the left 
 490:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * switches of AMUX_SPLIT_CTL[1] and AMUX_SPLIT_CTL[6] need to be closed.
 491:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 492:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_sarmux_amuxbus.png
 493:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 494:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_02.cydsn/main_cm4.c SNIPPET_SAR_SARMUX_AMUXBUS
 495:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 496:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_low_power Low Power Support
 497:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This SAR driver provides a callback function to handle power mode transitions.
 498:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The \ref Cy_SAR_DeepSleepCallback function ensures that SAR conversions are stopped
 499:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * before Deep Sleep entry. Upon wakeup, the callback
 500:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * enables the hardware and continuous conversions, if previously enabled.
 501:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 502:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To trigger the callback execution, the callback must be registered before calling \ref Cy_SysPm_C
 503:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref group_syspm driver for more information about power mode transitions and
 504:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * callback registration.
 505:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 506:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Recall that during configuration of the \ref group_sar_init_struct_ctrl "ctrl" field,
 507:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the SARMUX can be configured to remain enabled in Deep Sleep mode.
 508:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * All other blocks (SARADC, REFBUF, and SARSEQ) do not support Deep Sleep mode operation.
 509:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 510:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_more_information More Information
 511:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * For more information on the SAR ADC subsystem, refer to the technical reference manual (TRM).
 512:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 513:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_MISRA MISRA-C Compliance]
 514:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 515:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This driver has the following specific deviations:
 516:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 517:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * <table class="doxtable">
 518:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 519:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>MISRA Rule</th>
 520:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Rule Class (Required/Advisory)</th>
 521:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Rule Description</th>
 522:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Description of Deviation(s)</th>
 523:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 524:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 525:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>11.4</td>
 526:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Advisory</td>
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 60
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 60
>>>>>>> Isac


 527:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>A cast should not be performed between a pointer to object type and a different pointer t
 528:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>The cy_syspm driver defines the pointer to void in the \ref cy_stc_syspm_callback_params_
 529:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       This SAR driver implements a Deep Sleep callback conforming to the cy_syspm driver requirem
 530:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       When the callback is called, the base should point to the SAR_Type register address.
 531:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     </td>
 532:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 533:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * </table>
 534:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 535:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_changelog Changelog
 536:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * <table class="doxtable">
 537:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr><th>Version</th><th>Changes</th><th>Reason for Change</th></tr>
 538:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 539:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td rowspan="2">1.20</td>
 540:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Flattened the organization of the driver source code into the single source directory and
 541:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Driver library directory-structure simplification.</td>
 542:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 543:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 544:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Added register access layer. Use register access macros instead
 545:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *         of direct register access using dereferenced pointers.</td>
 546:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Makes register access device-independent, so that the PDL does 
 547:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *         not need to be recompiled for each supported part number.</td>
 548:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 549:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 550:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td rowspan="3">1.10</td>
 551:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td> Added workaround for parts with out of range CAP_TRIM in Init API.</td>
 552:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td> Correct CAP_TRIM is necessary achieving specified SAR ADC linearity</td>
 553:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 554:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 555:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td> Turn off the entire hardware block only if the SARMUX is not enabled 
 556:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *          for Deep Sleep operation.                
 557:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     </td>
 558:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td> Improvement of the \ref Cy_SAR_DeepSleep flow</td>
 559:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 560:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 561:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Updated "Low Power Support" section to describe registering the Deep Sleep callback.
 562:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *         Added parenthesis around logical AND operation in Sleep API.</td>
 563:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Documentation update and clarification</td>
 564:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 565:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 566:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>1.0</td>
 567:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Initial version</td>
 568:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td></td>
 569:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 570:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * </table>
 571:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 572:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \defgroup group_sar_macros Macros
 573:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \defgroup group_sar_functions Functions
 574:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \{
 575:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_basic         Initialization and Basic Functions
 576:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_power         Low Power Callback
 577:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_config        Run-time Configuration Functions
 578:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_countsto      Counts Conversion Functions
 579:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_interrupt     Interrupt Functions
 580:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_switches      SARMUX Switch Control Functions
 581:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_helper        Useful Configuration Query Functions
 582:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \}
 583:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \defgroup group_sar_globals Global Variables
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 61
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 61
>>>>>>> Isac


 584:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \defgroup group_sar_data_structures Data Structures
 585:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \defgroup group_sar_enums Enumerated Types
 586:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \{
 587:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_ctrl_register_enums         Control Register Enums
 588:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_sample_ctrl_register_enums  Sample Control Register Enums
 589:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_sample_time_shift_enums     Sample Time Register Enums
 590:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_range_thres_register_enums  Range Interrupt Register Enums
 591:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_chan_config_register_enums  Channel Configuration Register Enums
 592:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_intr_mask_t_register_enums  Interrupt Mask Register Enums
 593:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_mux_switch_register_enums   SARMUX Switch Control Register Enums
 594:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \}
 595:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 596:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 597:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #if !defined(CY_SAR_H)
 598:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_H
 599:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 600:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include <stdint.h>
 601:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include <stdbool.h>
 602:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include <stddef.h>
 603:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include "cy_device_headers.h"
 604:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include "cy_syslib.h"
 605:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include "cy_syspm.h"
 606:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include "cy_device.h"
 607:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 608:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #ifdef CY_IP_MXS40PASS_SAR
 609:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 610:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #if defined(__cplusplus)
 611:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** extern "C" {
 612:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #endif
 613:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 614:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_macros
 615:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
 616:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 617:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 618:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Driver major version */
 619:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_DRV_VERSION_MAJOR        1
 620:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 621:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Driver minor version */
 622:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_DRV_VERSION_MINOR        20
 623:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 624:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** SAR driver identifier */
 625:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_ID                       CY_PDL_DRV_ID(0x01u)
 626:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 627:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Maximum number of channels */
 628:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_MAX_NUM_CHANNELS         (PASS_SAR_SAR_CHANNELS)
 629:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 630:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \cond INTERNAL */
 631:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_DEINIT                   (0uL)             /**< De-init value for most SAR registers
 632:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SAMPLE_TIME_DEINIT       ((3uL << SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos) | (3uL << SAR_
 633:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CLEAR_ALL_SWITCHES       (0x3FFFFFFFuL)    /**< Value to clear all SARMUX switches *
 634:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_DEINIT_SQ_CTRL           (SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P0_Msk \
 635:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P1_Msk \
 636:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P2_Msk \
 637:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P3_Msk \
 638:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P4_Msk \
 639:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P5_Msk \
 640:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P6_Msk \
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 62
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 62
>>>>>>> Isac


 641:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P7_Msk \
 642:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_VSSA_Msk \
 643:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_TEMP_Msk \
 644:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_AMUXBUSA_Msk \
 645:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_AMUXBUSB_Msk \
 646:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_SARBUS0_Msk \
 647:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_SARBUS1_Msk)
 648:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_REG_CTRL_MASK            (SAR_CTRL_PWR_CTRL_VREF_Msk \
 649:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_VREF_SEL_Msk \
 650:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_VREF_BYP_CAP_EN_Msk \
 651:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_NEG_SEL_Msk \
 652:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_SAR_HW_CTRL_NEGVREF_Msk \
 653:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_COMP_DLY_Msk \
 654:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_REFBUF_EN_Msk \
 655:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_COMP_PWR_Msk \
 656:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_DEEPSLEEP_ON_Msk \
 657:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_DSI_SYNC_CONFIG_Msk \
 658:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_DSI_MODE_Msk \
 659:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_SWITCH_DISABLE_Msk \
 660:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_ENABLED_Msk)
 661:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_REG_SAMPLE_CTRL_MASK     (SAR_SAMPLE_CTRL_LEFT_ALIGN_Msk \
 662:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Msk \
 663:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Msk \
 664:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_AVG_CNT_Msk \
 665:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_AVG_SHIFT_Msk \
 666:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_AVG_MODE_Msk \
 667:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_CONTINUOUS_Msk \
 668:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Msk \
 669:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk \
 670:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_DSI_SYNC_TRIGGER_Msk \
 671:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_UAB_SCAN_MODE_Msk \
 672:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_REPEAT_INVALID_Msk \
 673:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_VALID_SEL_Msk \
 674:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_VALID_SEL_EN_Msk \
 675:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_VALID_IGNORE_Msk \
 676:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_TRIGGER_OUT_EN_Msk \
 677:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_EOS_DSI_OUT_EN_Msk)
 678:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_REG_CHAN_CONFIG_MASK     (SAR_CHAN_CONFIG_POS_PIN_ADDR_Msk \
 679:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_POS_PORT_ADDR_Msk \
 680:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_DIFFERENTIAL_EN_Msk \
 681:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_AVG_EN_Msk \
 682:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_SAMPLE_TIME_SEL_Msk \
 683:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_NEG_PIN_ADDR_Msk \
 684:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_NEG_PORT_ADDR_Msk \
 685:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_NEG_ADDR_EN_Msk \
 686:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_DSI_OUT_EN_Msk)
 687:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_REG_SAMPLE_TIME_MASK     (SAR_SAMPLE_TIME01_SAMPLE_TIME0_Msk | SAR_SAMPLE_TIME01_SAM
 688:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 689:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_2US_DELAY                (2u)              /**< Delay used in Enable API function to
 690:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_10V_COUNTS               (10.0F)           /**< Value of 10 in volts */
 691:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_10MV_COUNTS              (10000)           /**< Value of 10 in millivolts */
 692:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_10UV_COUNTS              (10000000L)       /**< Value of 10 in microvolts */
 693:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_WRK_MAX_12BIT            (0x00001000uL)    /**< Maximum SAR work register value for 
 694:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_RANGE_LIMIT_MAX          (0xFFFFuL)        /**< Maximum value for the low and high r
 695:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CAP_TRIM_MAX             (0x3FuL)          /**< Maximum value for CAP_TRIM */
 696:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CAP_TRIM_MIN             (0x00uL)          /**< Maximum value for CAP_TRIM */
 697:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CAP_TRIM                 (0x0BuL)          /**< Correct cap trim value */
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 63
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 63
>>>>>>> Isac


 698:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 699:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /**< Macros for conditions used in CY_ASSERT calls */
 700:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CHANNUM(chan)            ((chan) < CY_SAR_MAX_NUM_CHANNELS)
 701:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CHANMASK(mask)           ((mask) < (1uL << CY_SAR_MAX_NUM_CHANNELS))
 702:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_RANGECOND(cond)          ((cond) <= CY_SAR_RANGE_COND_OUTSIDE)
 703:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_INTRMASK(mask)           ((mask) <= (uint32_t)(CY_SAR_INTR_EOS_MASK | CY_SAR_INTR_OV
 704:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_TRIGGER(mode)            (((mode) == CY_SAR_TRIGGER_MODE_FW_ONLY) \
 705:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         || ((mode) == CY_SAR_TRIGGER_MODE_FW_AND_HWEDGE) \
 706:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         || ((mode) == CY_SAR_TRIGGER_MODE_FW_AND_HWLEVEL))
 707:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_RETURN(mode)             (((mode) == CY_SAR_RETURN_STATUS) || ((mode) == CY_SAR_WAIT
 708:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_STARTCONVERT(mode)       (((mode) == CY_SAR_START_CONVERT_SINGLE_SHOT) || ((mode) ==
 709:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_RANGE_LIMIT(limit)       ((limit) <= CY_SAR_RANGE_LIMIT_MAX)
 710:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SWITCHSELECT(select)     ((select) == CY_SAR_MUX_SWITCH0)
 711:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SWITCHMASK(mask)         ((mask) <= CY_SAR_CLEAR_ALL_SWITCHES)
 712:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SWITCHSTATE(state)       (((state) == CY_SAR_SWITCH_OPEN) || ((state) == CY_SAR_SWIT
 713:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SQMASK(mask)             (((mask) & (~CY_SAR_DEINIT_SQ_CTRL)) == 0uL)
 714:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SQCTRL(ctrl)             (((ctrl) == CY_SAR_SWITCH_SEQ_CTRL_ENABLE) || ((ctrl) == CY
 715:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 716:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CTRL(value)              (((value) & (~CY_SAR_REG_CTRL_MASK)) == 0uL)
 717:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SAMPLE_CTRL(value)       (((value) & (~CY_SAR_REG_SAMPLE_CTRL_MASK)) == 0uL)
 718:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SAMPLE_TIME(value)       (((value) & (~CY_SAR_REG_SAMPLE_TIME_MASK)) == 0uL)
 719:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CHAN_CONFIG(value)       (((value) & (~CY_SAR_REG_CHAN_CONFIG_MASK)) == 0uL)
 720:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \endcond */
 721:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 722:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} group_sar_macro */
 723:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 724:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_globals
 725:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
 726:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 727:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /***************************************
 728:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *        Global Variables
 729:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ***************************************/
 730:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 731:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** This array is used to calibrate the offset for each channel.
 732:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 733:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * At initialization, channels that are single-ended, signed, and with Vneg = Vref
 734:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * have an offset of -(2^12)/2 = -2048. All other channels have an offset of 0.
 735:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The offset can be overridden using \ref Cy_SAR_SetOffset.
 736:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 737:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel offsets are used by the \ref Cy_SAR_CountsTo_Volts, \ref Cy_SAR_CountsTo_mVolts, and
 738:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref Cy_SAR_CountsTo_uVolts functions to convert counts to voltage.
 739:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 740:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 741:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** extern volatile int16_t Cy_SAR_offset[CY_SAR_MAX_NUM_CHANNELS];
 742:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 743:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** This array is used to calibrate the gain for each channel.
 744:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 745:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * It is set at initialization and the value depends on the SARADC resolution
 746:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and voltage reference, 10*(2^12)/(2*Vref).
 747:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The gain can be overridden using \ref Cy_SAR_SetGain.
 748:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 749:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel gains are used by the \ref Cy_SAR_CountsTo_Volts, \ref Cy_SAR_CountsTo_mVolts, and
 750:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref Cy_SAR_CountsTo_uVolts functions to convert counts to voltage.
 751:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 752:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** extern volatile int32_t Cy_SAR_countsPer10Volt[CY_SAR_MAX_NUM_CHANNELS];
 753:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 754:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} group_sar_globals */
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 64
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 64
>>>>>>> Isac


 755:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 756:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_enums
 757:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
 758:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 759:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 760:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /******************************************************************************
 761:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****  * Enumerations
 762:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****  *****************************************************************************/
 763:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 764:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** The SAR status/error code definitions */
 765:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 766:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 767:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SUCCESS    = 0x00uL,                                      /**< Success */
 768:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_BAD_PARAM  = CY_SAR_ID | CY_PDL_STATUS_ERROR | 0x01uL,    /**< Invalid input parameters 
 769:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_TIMEOUT    = CY_SAR_ID | CY_PDL_STATUS_ERROR | 0x02uL,    /**< A timeout occurred */
 770:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CONVERSION_NOT_COMPLETE = CY_SAR_ID | CY_PDL_STATUS_ERROR | 0x03uL,    /**< SAR conversi
 771:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_status_t;
 772:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 773:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Definitions for starting a conversion used in \ref Cy_SAR_StartConvert */
 774:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 775:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 776:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_START_CONVERT_SINGLE_SHOT = 0uL, /**< Start a single scan (one shot) from firmware */
 777:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_START_CONVERT_CONTINUOUS  = 1uL, /**< Continuously scan enabled channels and ignores all
 778:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_start_convert_sel_t;
 779:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 780:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Definitions for the return mode used in \ref Cy_SAR_IsEndConversion */
 781:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 782:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 783:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RETURN_STATUS    = 0uL,      /**< Immediately returns the conversion status. */
 784:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_WAIT_FOR_RESULT  = 1uL,    /**< Does not return a result until the conversion of all seq
 785:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_return_mode_t;
 786:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 787:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Switch state definitions */
 788:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 789:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 790:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SWITCH_OPEN      = 0uL,    /**< Open the switch */
 791:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SWITCH_CLOSE     = 1uL     /**< Close the switch */
 792:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_switch_state_t;
 793:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 794:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Definitions for sequencer control of switches */
 795:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 796:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 797:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SWITCH_SEQ_CTRL_DISABLE = 0uL, /**< Disable sequencer control of switch */
 798:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SWITCH_SEQ_CTRL_ENABLE  = 1uL  /**< Enable sequencer control of switch */
 799:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_switch_sar_seq_ctrl_t;
 800:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 801:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Switch register selection for \ref Cy_SAR_SetAnalogSwitch and \ref Cy_SAR_GetAnalogSwitch */
 802:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 803:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 804:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SWITCH0  = 0uL,      /**< SARMUX switch control register */
 805:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_switch_register_sel_t;
 806:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 807:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_ctrl_register_enums
 808:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the SAR CTRL register
 809:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
 810:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 811:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Reference voltage buffer power mode definitions */
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 65
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 65
>>>>>>> Isac


 812:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 813:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 814:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_100     = 0uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< Full power (100%) */
 815:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_80      = 1uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 80% power */
 816:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_60      = 2uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 60% power */
 817:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_50      = 3uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 50% power */
 818:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_40      = 4uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 40% power */
 819:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_30      = 5uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 30% power */
 820:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_20      = 6uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 20% power */
 821:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_10      = 7uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 10% power */
 822:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_pwr_ctrl_vref_t;
 823:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 824:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Reference voltage selection definitions */
 825:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 826:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 827:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_SEL_BGR         = 4uL << SAR_CTRL_VREF_SEL_Pos,     /**< System wide bandgap from \
 828:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_SEL_EXT         = 5uL << SAR_CTRL_VREF_SEL_Pos,     /**< External Vref direct from 
 829:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_SEL_VDDA_DIV_2  = 6uL << SAR_CTRL_VREF_SEL_Pos,     /**< Vdda/2 (Vref buffer on) */
 830:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_SEL_VDDA        = 7uL << SAR_CTRL_VREF_SEL_Pos      /**< Vdda */
 831:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_vref_sel_t;
 832:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 833:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Vref bypass cap enable.
 834:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When enabled, a bypass capacitor should
 835:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * be connected to the dedicated Vref pin of the device.
 836:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Refer to the device datasheet for the minimum bypass capacitor value to use.
 837:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 838:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 839:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 840:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_BYPASS_CAP_DISABLE = 0uL << SAR_CTRL_VREF_BYP_CAP_EN_Pos,    /**< Disable Vref bypass ca
 841:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_BYPASS_CAP_ENABLE  = 1uL << SAR_CTRL_VREF_BYP_CAP_EN_Pos     /**< Enable Vref bypass cap
 842:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_bypass_cap_t;
 843:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 844:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Negative terminal (Vminus) selection definitions for single-ended channels.
 845:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 846:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The Vminus input for single ended channels can be connected to
 847:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Vref, VSSA, or routed out to an external pin.
 848:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The options for routing to a pin are through Pin 1, Pin 3, Pin 5, or Pin 7
 849:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * of the SARMUX dedicated port or an acore wire in AROUTE, if available on the device.
 850:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 851:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref CY_SAR_NEG_SEL_VSSA_KELVIN comes straight from a Vssa pad without any shared branches
 852:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * so as to keep quiet and avoid voltage drops.
 853:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 854:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 855:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 856:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_VSSA_KELVIN  = 0uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to VSSA_KELVIN 
 857:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_P1           = 2uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to Pin 1 of SAR
 858:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_P3           = 3uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to Pin 3 of SAR
 859:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_P5           = 4uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to Pin 5 of SAR
 860:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_P7           = 5uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to Pin 6 of SAR
 861:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_ACORE        = 6uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to an ACORE in 
 862:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_VREF         = 7uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to VREF input o
 863:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_neg_sel_t;
 864:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 865:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Enable hardware control of the switch between Vref and the Vminus input */
 866:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 867:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 868:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_NEGVREF_FW_ONLY = 0uL << SAR_CTRL_SAR_HW_CTRL_NEGVREF_Pos,    /**< Only firmware co
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 66
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 66
>>>>>>> Isac


 869:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_NEGVREF_HW      = 1uL << SAR_CTRL_SAR_HW_CTRL_NEGVREF_Pos     /**< Enable hardware 
 870:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_hw_ctrl_negvref_t;
 871:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 872:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the comparator latch delay */
 873:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 874:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 875:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_COMP_DLY_2P5    = 0uL << SAR_CTRL_COMP_DLY_Pos,    /**< 2.5 ns delay, use for SAR c
 876:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_COMP_DLY_4      = 1uL << SAR_CTRL_COMP_DLY_Pos,    /**< 4 ns delay, use for SAR con
 877:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_COMP_DLY_10     = 2uL << SAR_CTRL_COMP_DLY_Pos,    /**< 10 ns delay, use for SAR co
 878:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_COMP_DLY_12     = 3uL << SAR_CTRL_COMP_DLY_Pos     /**< 12 ns delay, use for SAR co
 879:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_comp_delay_t;
 880:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 881:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the comparator power mode */
 882:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 883:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 884:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_100     = 0uL << SAR_CTRL_COMP_PWR_Pos,      /**< 100% power, use this for > 2 
 885:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_80      = 1uL << SAR_CTRL_COMP_PWR_Pos,      /**< 80% power, use this for 1.5 -
 886:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_60      = 2uL << SAR_CTRL_COMP_PWR_Pos,      /**< 60% power, use this for 1.0 -
 887:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_50      = 3uL << SAR_CTRL_COMP_PWR_Pos,      /**< 50% power, use this for 500 k
 888:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_40      = 4uL << SAR_CTRL_COMP_PWR_Pos,      /**< 40% power, use this for 250 -
 889:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_30      = 5uL << SAR_CTRL_COMP_PWR_Pos,      /**< 30% power, use this for 100 -
 890:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_20      = 6uL << SAR_CTRL_COMP_PWR_Pos,      /**< 20% power, use this for TDB s
 891:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_10      = 7uL << SAR_CTRL_COMP_PWR_Pos,      /**< 10% power, use this for < 100
 892:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_comp_pwr_t;
 893:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 894:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Enable or disable the SARMUX during Deep Sleep power mode. */
 895:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 896:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 897:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_DEEPSLEEP_SARMUX_OFF = 0uL << SAR_CTRL_DEEPSLEEP_ON_Pos,    /**< Disable SARMUX operatio
 898:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_DEEPSLEEP_SARMUX_ON  = 1uL << SAR_CTRL_DEEPSLEEP_ON_Pos     /**< Enable SARMUX operation
 899:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_sarmux_deep_sleep_t;
 900:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 901:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Enable or disable the SARSEQ control of routing switches */
 902:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 903:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 904:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SARSEQ_SWITCH_ENABLE    = 0uL << SAR_CTRL_SWITCH_DISABLE_Pos,    /**< Enable the SARSEQ 
 905:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SARSEQ_SWITCH_DISABLE   = 1uL << SAR_CTRL_SWITCH_DISABLE_Pos     /**< Disable the SARSEQ
 906:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_sarseq_routing_switches_t;
 907:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 908:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
 909:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 910:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_sample_ctrl_register_enums
 911:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations are used in configuring the SAR SAMPLE_CTRL register
 912:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
 913:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 914:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure result alignment, either left or right aligned.
 915:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 916:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \note
 917:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Averaging always uses right alignment. If the \ref CY_SAR_LEFT_ALIGN
 918:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * is selected with averaging enabled, it is ignored.
 919:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 920:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \note
 921:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The voltage conversion functions (\ref Cy_SAR_CountsTo_Volts, \ref Cy_SAR_CountsTo_mVolts,
 922:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref Cy_SAR_CountsTo_uVolts) are only valid for right alignment.
 923:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * */
 924:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 925:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 67
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 67
>>>>>>> Isac


 926:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RIGHT_ALIGN  = 0uL << SAR_SAMPLE_CTRL_LEFT_ALIGN_Pos,    /**< Right align result data to
 927:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_LEFT_ALIGN   = 1uL << SAR_SAMPLE_CTRL_LEFT_ALIGN_Pos     /**< Left align result data to 
 928:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_result_align_t;
 929:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 930:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure format, signed or unsigned, of single-ended channels */
 931:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 932:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 933:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SINGLE_ENDED_UNSIGNED  = 0uL << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos,    /**< Result 
 934:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SINGLE_ENDED_SIGNED    = 1uL << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos     /**< Result 
 935:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_single_ended_format_t;
 936:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 937:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure format, signed or unsigned, of differential channels */
 938:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 939:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 940:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_DIFFERENTIAL_UNSIGNED  = 0uL << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos,    /**< Result 
 941:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_DIFFERENTIAL_SIGNED    = 1uL << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos     /**< Result 
 942:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_differential_format_t;
 943:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 944:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure number of samples for averaging.
 945:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This applies only to channels with averaging enabled.
 946:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 947:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 948:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 949:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_2          = 0uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 950:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_4          = 1uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 951:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_8          = 2uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 952:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_16         = 3uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 953:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_32         = 4uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 954:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_64         = 5uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 955:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_128        = 6uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 956:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_256        = 7uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos     /**< Set samples averaged to
 957:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_avg_cnt_t;
 958:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 959:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the averaging mode.
 960:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 961:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Sequential accumulate and dump: a channel will be sampled back to back.
 962:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   The result is added to a running sum in a 20-bit register. At the end
 963:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   of the scan, the accumulated value is shifted right to fit into 16 bits
 964:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   and stored into the CHAN_RESULT register.
 965:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Sequential fixed:  a channel will be sampled back to back.
 966:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   The result is added to a running sum in a 20-bit register. At the end
 967:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   of the scan, the accumulated value is shifted right to fit into 12 bits
 968:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   and stored into the CHAN_RESULT register.
 969:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Interleaved: a channel will be sampled once per scan.
 970:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   The result is added to a running sum in a 16-bit register.
 971:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   In the scan where the final averaging count is reached,
 972:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   the accumulated value is shifted right to fit into 12 bits
 973:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   and stored into the CHAN_RESULT register.
 974:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   In all other scans, the CHAN_RESULT will have an invalid result.
 975:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   In interleaved mode, make sure that the averaging
 976:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   count is low enough to ensure that the intermediate value does not exceed 16 bits,
 977:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   that is averaging count is 16 or less. Otherwise, the MSBs will be lost.
 978:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   In the special case that averaging is enabled for all enabled channels
 979:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   and interleaved mode is used, the interrupt frequency
 980:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   will be reduced by a factor of the number of samples averaged.
 981:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 982:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 68
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 68
>>>>>>> Isac


 983:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 984:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_MODE_SEQUENTIAL_ACCUM    = 0uL,                               /**< Set mode to seque
 985:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_MODE_SEQUENTIAL_FIXED    = SAR_SAMPLE_CTRL_AVG_SHIFT_Msk,     /**< Set mode to seque
 986:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_MODE_INTERLEAVED         = SAR_SAMPLE_CTRL_AVG_MODE_Msk,      /**< Set mode to inter
 987:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_avg_mode_t;
 988:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 989:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the trigger mode.
 990:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 991:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Firmware triggering is always enabled and can be single shot or continuous.
 992:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Additionally, hardware triggering can be enabled with the option to be
 993:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * edge or level sensitive.
 994:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 995:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 996:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 997:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_TRIGGER_MODE_FW_ONLY        = 0uL,                                /**< Firmware trigger 
 998:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_TRIGGER_MODE_FW_AND_HWEDGE  = SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Msk, /**< Enable edge sensi
 999:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_TRIGGER_MODE_FW_AND_HWLEVEL = SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Msk | SAR_SAMPLE_CTRL_DSI_T
1000:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_trigger_mode_t;
1001:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1002:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1003:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1004:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_sample_time_shift_enums
1005:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the SAR SAMPLE_TIME* registers
1006:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1007:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1008:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the sample time by using these shifts */
1009:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1010:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1011:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SAMPLE_TIME0_SHIFT       = SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos,             /**< Shift fo
1012:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SAMPLE_TIME1_SHIFT       = SAR_SAMPLE_TIME01_SAMPLE_TIME1_Pos,             /**< Shift fo
1013:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SAMPLE_TIME2_SHIFT       = SAR_SAMPLE_TIME23_SAMPLE_TIME2_Pos,             /**< Shift fo
1014:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SAMPLE_TIME3_SHIFT       = SAR_SAMPLE_TIME23_SAMPLE_TIME3_Pos,             /**< Shift fo
1015:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_time_shift_t;
1016:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1017:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1018:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_range_thres_register_enums
1019:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the SAR RANGE* registers
1020:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1021:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1022:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the lower and upper thresholds for range detection
1023:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1024:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SARSEQ supports range detection to allow for automatic detection of sample
1025:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * values compared to two programmable thresholds without CPU involvement.
1026:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Range detection is defined by two global thresholds and a condition.
1027:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The RANGE_LOW value defines the lower threshold and RANGE_HIGH defines
1028:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the upper threshold of the range.
1029:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1030:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Range detect is done after averaging, alignment, and sign extension (if applicable).
1031:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * In other words, the thresholds values must have the same data format as the result data.
1032:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Range detection is always done for all channels scanned. By making RANGE_INTR_MASK=0,
1033:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the firmware can choose to ignore the range detect interrupt for any channel.
1034:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1035:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1036:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1037:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_LOW_SHIFT      = SAR_RANGE_THRES_RANGE_LOW_Pos,        /**< Shift for setting lowe
1038:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_HIGH_SHIFT     = SAR_RANGE_THRES_RANGE_HIGH_Pos,       /**< Shift for setting uppe
1039:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_range_thres_shift_t;
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 69
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 69
>>>>>>> Isac


1040:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1041:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the condition (below, inside, above, or outside) of the range detection interrupt */
1042:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1043:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1044:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_COND_BELOW     = 0uL,  /**< Range interrupt detected when result < RANGE_LOW */
1045:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_COND_INSIDE    = 1uL,  /**< Range interrupt detected when RANGE_LOW <= result < RA
1046:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_COND_ABOVE     = 2uL,  /**< Range interrupt detected when RANGE_HIGH <= result */
1047:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_COND_OUTSIDE   = 3uL,  /**< Range interrupt detected when result < RANGE_LOW || RA
1048:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_range_detect_condition_t;
1049:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1050:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1051:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_chan_config_register_enums
1052:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the SAR CHAN_CONFIG register
1053:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1054:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1055:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the input mode of the channel
1056:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1057:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Single ended channel: the \ref cy_en_sar_ctrl_neg_sel_t selection in the \ref group_sar_init_st
1058:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   determines what drives the Vminus pin
1059:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Differential paired: Vplus and Vminus are a pair. Bit 0 of \ref cy_en_sar_chan_config_pos_pin_a
1060:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   is ignored and considered to be 0.
1061:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   In other words, \ref cy_en_sar_chan_config_pos_pin_addr_t "POS_PIN_ADDR" points to the even pin
1062:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   The even pin is connected to Vplus and the odd pin is connected to Vminus.
1063:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \ref cy_en_sar_chan_config_pos_port_addr_t "POS_PORT_ADDR" is used to identify the port that co
1064:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Differential unpaired: The \ref cy_en_sar_chan_config_neg_pin_addr_t "NEG_PIN_ADDR" and
1065:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \ref cy_en_sar_chan_config_neg_port_addr_t "NEG_PORT_ADDR" determine what drives the Vminus pin
1066:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   This is a variation of differential mode with no even-odd pair limitation
1067:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1068:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1069:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1070:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_SINGLE_ENDED            = 0uL,                                     /**< Single ende
1071:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_DIFFERENTIAL_PAIRED     = SAR_CHAN_CONFIG_DIFFERENTIAL_EN_Msk,     /**< Differentia
1072:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_DIFFERENTIAL_UNPAIRED   = SAR_CHAN_CONFIG_NEG_ADDR_EN_Msk          /**< Differentia
1073:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_input_mode_t;
1074:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1075:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure address of the pin connected to the Vplus terminal of the SARADC. */
1076:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1077:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1078:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_0     = 0uL,                                            /**< Pin 0 on 
1079:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_1     = 1uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 1 on 
1080:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_2     = 2uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 2 on 
1081:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_3     = 3uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 3 on 
1082:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_4     = 4uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 4 on 
1083:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_5     = 5uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 5 on 
1084:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_6     = 6uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 6 on 
1085:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_7     = 7uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 7 on 
1086:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_pos_pin_addr_t;
1087:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1088:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure address of the port that contains the pin connected to the Vplus terminal of the SARA
1089:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1090:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_POS_PORT_ADDR_SARMUX is for the dedicated SARMUX port (8 pins)
1091:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Port 1 through 4 are respectively the pins of CTB0, CTB1, CTB2, and CTB3 (if present)
1092:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Port 7, 5, and 6 (VPORT0/1/2) are the groups of internal signals that can be selected
1093:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   in the SARMUX or AROUTE (if present).
1094:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1095:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * See the \ref group_sar_sarmux section for more guidance.
1096:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 70
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 70
>>>>>>> Isac


1097:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1098:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1099:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_SARMUX         = 0uL,                                       /**< Dedicated
1100:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_CTB0           = 1uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< Outputs f
1101:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_CTB1           = 2uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< Outputs f
1102:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_CTB2           = 3uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< Outputs f
1103:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_CTB3           = 4uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< Outputs f
1104:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_AROUTE_VIRT2   = 5uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< AROUTE vi
1105:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_AROUTE_VIRT1   = 6uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< AROUTE vi
1106:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_SARMUX_VIRT    = 7uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< SARMUX vi
1107:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_pos_port_addr_t;
1108:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1109:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Enable or disable averaging for the channel */
1110:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1111:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1112:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_AVG_DISABLE      = 0uL,                                 /**< Disable averaging for 
1113:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_AVG_ENABLE       = 1uL << SAR_CHAN_CONFIG_AVG_EN_Pos    /**< Enable averaging for t
1114:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_avg_en_t;
1115:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1116:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Select which sample time to use for the channel.
1117:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * There are four global samples times available set by \ref group_sar_init_struct_sampleTime01 and
1118:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref group_sar_init_struct_sampleTime23.
1119:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1120:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1121:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1122:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_SAMPLE_TIME_0     = 0uL,                                          /**< Use sample t
1123:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_SAMPLE_TIME_1     = 1uL << SAR_CHAN_CONFIG_SAMPLE_TIME_SEL_Pos,   /**< Use sample t
1124:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_SAMPLE_TIME_2     = 2uL << SAR_CHAN_CONFIG_SAMPLE_TIME_SEL_Pos,   /**< Use sample t
1125:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_SAMPLE_TIME_3     = 3uL << SAR_CHAN_CONFIG_SAMPLE_TIME_SEL_Pos,   /**< Use sample t
1126:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_sample_time_t;
1127:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1128:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure address of the pin connected to the Vminus terminal of the SARADC. */
1129:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1130:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1131:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_0     = 0uL,                                            /**< Pin 0 on 
1132:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_1     = 1uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 1 on 
1133:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_2     = 2uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 2 on 
1134:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_3     = 3uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 3 on 
1135:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_4     = 4uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 4 on 
1136:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_5     = 5uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 5 on 
1137:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_6     = 6uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 6 on 
1138:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_7     = 7uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 7 on 
1139:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_neg_pin_addr_t;
1140:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1141:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure address of the port that contains the pin connected to the Vminus terminal of the SAR
1142:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1143:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Port 0 is 8 pins of the SARMUX
1144:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Port 7, 5, and 6 (VPORT0/1/2) are the groups of internal signals that can be selected
1145:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   in the SARMUX or AROUTE (if present).
1146:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1147:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1148:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1149:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_PORT_ADDR_SARMUX         = 0uL,                                       /**< Dedicated
1150:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_PORT_ADDR_AROUTE_VIRT2   = 5uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< AROUTE vi
1151:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_PORT_ADDR_AROUTE_VIRT1   = 6uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< AROUTE vi
1152:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_PORT_ADDR_SARMUX_VIRT    = 7uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< SARMUX vi
1153:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_neg_port_addr_t;
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 71
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 71
>>>>>>> Isac


1154:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1155:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1156:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1157:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_intr_mask_t_register_enums
1158:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the SAR INTR_MASK register
1159:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1160:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1161:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure which signal will cause an interrupt event.
1162:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1163:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - End of scan (EOS): occurs after completing a scan of all enabled channels
1164:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Overflow: occurs when hardware sets a new EOS interrupt while the previous interrupt
1165:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   has not be cleared by the firmware
1166:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Firmware collision: occurs when firmware attempts to start one-shot
1167:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   conversion while the SAR is busy.
1168:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1169:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Enable all, one, or none of the interrupt events.
1170:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1171:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1172:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1173:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_INTR_MASK_NONE           = 0uL,                                  /**< Disable all interr
1174:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_INTR_EOS_MASK            = SAR_INTR_MASK_EOS_MASK_Msk,           /**< Enable end of scan
1175:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_INTR_OVERFLOW_MASK       = SAR_INTR_MASK_OVERFLOW_MASK_Msk,      /**< Enable overflow in
1176:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_INTR_FW_COLLISION_MASK   = SAR_INTR_MASK_FW_COLLISION_MASK_Msk,  /**< Enable firmware co
1177:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_intr_mask_t;
1178:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1179:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1180:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1181:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_mux_switch_register_enums
1182:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the \ref group_sar_init_struct_muxSwitch and \ref gr
1183:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1184:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1185:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1186:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Firmware control for the SARMUX switches to connect analog signals to the SAR ADC
1187:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1188:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To close multiple switches, "OR" the enum values together.
1189:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1190:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * See the \ref group_sar_sarmux section for more guidance.
1191:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1192:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1193:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1194:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* SARMUX pins to Vplus */
1195:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P0_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P0_VPLUS_Msk,    /**< Switch between Pi
1196:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P1_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P1_VPLUS_Msk,    /**< Switch between Pi
1197:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P2_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P2_VPLUS_Msk,    /**< Switch between Pi
1198:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P3_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P3_VPLUS_Msk,    /**< Switch between Pi
1199:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P4_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P4_VPLUS_Msk,    /**< Switch between Pi
1200:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P5_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P5_VPLUS_Msk,    /**< Switch between Pi
1201:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P6_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P6_VPLUS_Msk,    /**< Switch between Pi
1202:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P7_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P7_VPLUS_Msk,    /**< Switch between Pi
1203:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1204:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* SARMUX pins to Vminus */
1205:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P0_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P0_VMINUS_Msk,   /**< Switch between Pi
1206:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P1_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P1_VMINUS_Msk,   /**< Switch between Pi
1207:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P2_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P2_VMINUS_Msk,   /**< Switch between Pi
1208:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P3_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P3_VMINUS_Msk,   /**< Switch between Pi
1209:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P4_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P4_VMINUS_Msk,   /**< Switch between Pi
1210:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P5_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P5_VMINUS_Msk,   /**< Switch between Pi
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 72
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 72
>>>>>>> Isac


1211:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P6_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P6_VMINUS_Msk,   /**< Switch between Pi
1212:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P7_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P7_VMINUS_Msk,   /**< Switch between Pi
1213:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1214:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* Vssa to Vminus and temperature sensor to Vplus */
1215:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_VSSA_VMINUS      = SAR_MUX_SWITCH0_MUX_FW_VSSA_VMINUS_Msk,    /**< Switch between
1216:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_TEMP_VPLUS       = SAR_MUX_SWITCH0_MUX_FW_TEMP_VPLUS_Msk,     /**< Switch between
1217:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1218:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* Amuxbus A and B to Vplus and Vminus */
1219:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_AMUXBUSA_VPLUS   = SAR_MUX_SWITCH0_MUX_FW_AMUXBUSA_VPLUS_Msk,     /**< Switch bet
1220:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_AMUXBUSB_VPLUS   = SAR_MUX_SWITCH0_MUX_FW_AMUXBUSB_VPLUS_Msk,     /**< Switch bet
1221:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_AMUXBUSA_VMINUS  = SAR_MUX_SWITCH0_MUX_FW_AMUXBUSA_VMINUS_Msk,    /**< Switch bet
1222:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_AMUXBUSB_VMINUS  = SAR_MUX_SWITCH0_MUX_FW_AMUXBUSB_VMINUS_Msk,    /**< Switch bet
1223:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1224:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* Sarbus 0 and 1 to Vplus and Vminus */
1225:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_SARBUS0_VPLUS    = SAR_MUX_SWITCH0_MUX_FW_SARBUS0_VPLUS_Msk,      /**< Switch bet
1226:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_SARBUS1_VPLUS    = SAR_MUX_SWITCH0_MUX_FW_SARBUS1_VPLUS_Msk,      /**< Switch bet
1227:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_SARBUS0_VMINUS   = SAR_MUX_SWITCH0_MUX_FW_SARBUS0_VMINUS_Msk,     /**< Switch bet
1228:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_SARBUS1_VMINUS   = SAR_MUX_SWITCH0_MUX_FW_SARBUS1_VMINUS_Msk,     /**< Switch bet
1229:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1230:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* SARMUX pins to Core IO */
1231:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P4_COREIO0       = SAR_MUX_SWITCH0_MUX_FW_P4_COREIO0_Msk,      /**< Switch betwee
1232:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P5_COREIO1       = SAR_MUX_SWITCH0_MUX_FW_P5_COREIO1_Msk,      /**< Switch betwee
1233:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P6_COREIO2       = SAR_MUX_SWITCH0_MUX_FW_P6_COREIO2_Msk,      /**< Switch betwee
1234:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P7_COREIO3       = SAR_MUX_SWITCH0_MUX_FW_P7_COREIO3_Msk,      /**< Switch betwee
1235:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_mux_switch_fw_ctrl_t;
1236:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1237:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Mask definitions of SARMUX switches that can be controlled by the SARSEQ.
1238:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1239:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To enable sequencer control of multiple switches, "OR" the enum values together.
1240:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1241:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * See the \ref group_sar_sarmux section for more guidance.
1242:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1243:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1244:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1245:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P0           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P0_Msk,        /**< Enable
1246:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P1           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P1_Msk,        /**< Enable
1247:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P2           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P2_Msk,        /**< Enable
1248:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P3           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P3_Msk,        /**< Enable
1249:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P4           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P4_Msk,        /**< Enable
1250:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P5           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P5_Msk,        /**< Enable
1251:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P6           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P6_Msk,        /**< Enable
1252:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P7           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P7_Msk,        /**< Enable
1253:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_VSSA         = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_VSSA_Msk,      /**< Enable
1254:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_TEMP         = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_TEMP_Msk,      /**< Enable
1255:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_AMUXBUSA     = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_AMUXBUSA_Msk,  /**< Enable
1256:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_AMUXBUSB     = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_AMUXBUSB_Msk,  /**< Enable
1257:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_SARBUS0      = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_SARBUS0_Msk,   /**< Enable
1258:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_SARBUS1      = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_SARBUS1_Msk,   /**< Enable
1259:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_mux_switch_sq_ctrl_t;
1260:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1261:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1262:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1263:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} group_sar_enums */
1264:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1265:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_data_structures
1266:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1267:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 73
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 73
>>>>>>> Isac


1268:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1269:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /***************************************
1270:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       Configuration Structures
1271:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ***************************************/
1272:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1273:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** This structure is used to initialize the SAR ADC subsystem.
1274:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1275:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR ADC subsystem is highly configurable with many options.
1276:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When calling \ref Cy_SAR_Init, provide a pointer to the structure containing this configuration d
1277:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * A set of enumerations is provided in this
1278:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * driver to help with configuring this structure.
1279:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1280:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * See the \ref group_sar_initialization section for guidance.
1281:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** **/
1282:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef struct
1283:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1284:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t ctrl;                                      /**< Control register settings (applies to 
1285:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t sampleCtrl;                                /**< Sample control register settings (appl
1286:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t sampleTime01;                              /**< Sample time in ADC clocks for Sample T
1287:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t sampleTime23;                              /**< Sample time in ADC clocks for Sample T
1288:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t rangeThres;                                /**< Range detect threshold register for al
1289:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     cy_en_sar_range_detect_condition_t rangeCond;       /**< Range detect condition (below, inside,
1290:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t chanEn;                                    /**< Enable bits for the channels */
1291:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t chanConfig[CY_SAR_MAX_NUM_CHANNELS];       /**< Channel configuration */
1292:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t intrMask;                                  /**< Interrupt enable mask */
1293:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t satIntrMask;                               /**< Saturation detection interrupt enable 
1294:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t rangeIntrMask;                             /**< Range detection interrupt enable mask 
1295:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t muxSwitch;                                 /**< SARMUX firmware switches to connect an
1296:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t muxSwitchSqCtrl;                           /**< Enable SARSEQ control of specific SARM
1297:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     bool configRouting;                                 /**< Configure or ignore routing related re
1298:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t vrefMvValue;                               /**< Reference voltage in millivolts used i
1299:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** } cy_stc_sar_config_t;
1300:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1301:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** This structure is used by the driver to backup the state of the SAR
1302:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * before entering sleep so that it can be re-enabled after waking up */
1303:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef struct
1304:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1305:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t hwEnabled;         /**< SAR enabled state */
1306:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t continuous;        /**< State of the continuous bit */
1307:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** } cy_stc_sar_state_backup_t;
1308:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1309:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} group_sar_data_structures */
1310:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1311:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions
1312:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1313:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1314:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1315:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** This macro is for backward compatibility macro for driver v1.10 and before, 
1316:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****  * the preferred API is \ref Cy_SAR_DeepSleep */
1317:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define Cy_SAR_Sleep    Cy_SAR_DeepSleep
1318:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1319:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /***************************************
1320:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *        Function Prototypes
1321:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ***************************************/
1322:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1323:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_basic
1324:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions is for initialization and basic usage
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 74
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 74
>>>>>>> Isac


1325:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1326:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1327:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_sar_status_t Cy_SAR_Init(SAR_Type *base, const cy_stc_sar_config_t *config);
1328:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_sar_status_t Cy_SAR_DeInit(SAR_Type *base, bool deInitRouting);
1329:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_Enable(SAR_Type *base);
1330:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_Disable(SAR_Type *base);
1331:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_StartConvert(SAR_Type *base, cy_en_sar_start_convert_sel_t startSelect);
1332:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_StopConvert(SAR_Type *base);
1333:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_sar_status_t Cy_SAR_IsEndConversion(SAR_Type *base, cy_en_sar_return_mode_t retMode);
1334:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** int16_t Cy_SAR_GetResult16(const SAR_Type *base, uint32_t chan);
1335:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** int32_t Cy_SAR_GetResult32(const SAR_Type *base, uint32_t chan);
1336:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetChanResultUpdated(const SAR_Type *base);
1337:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1338:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1339:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_power
1340:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions is for Deep Sleep entry and exit
1341:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1342:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1343:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_syspm_status_t Cy_SAR_DeepSleepCallback(cy_stc_syspm_callback_params_t *callbackParams, cy_en
1344:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_DeepSleep(SAR_Type *base);
1345:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_Wakeup(SAR_Type *base);
1346:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1347:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1348:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_config
1349:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions allows changes to the SAR configuration
1350:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * after initialization.
1351:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1352:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1353:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_SetConvertMode(SAR_Type *base, cy_en_sar_sample_ctrl_trigger_mode_t mode);
1354:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetChanMask(SAR_Type *base, uint32_t enableMask);
1355:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_SetLowLimit(SAR_Type *base, uint32_t lowLimit);
1356:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_SetHighLimit(SAR_Type *base, uint32_t highLimit);
1357:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetRangeCond(SAR_Type *base, cy_en_sar_range_detect_condition_t cond);
1358:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1359:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1360:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_countsto
1361:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions performs counts to *volts conversions.
1362:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1363:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1364:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** int16_t Cy_SAR_RawCounts2Counts(const SAR_Type *base, uint32_t chan, int16_t adcCounts);
1365:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** float32_t Cy_SAR_CountsTo_Volts(const SAR_Type *base, uint32_t chan, int16_t adcCounts);
1366:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** int16_t Cy_SAR_CountsTo_mVolts(const SAR_Type *base, uint32_t chan, int16_t adcCounts);
1367:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** int32_t Cy_SAR_CountsTo_uVolts(const SAR_Type *base, uint32_t chan, int16_t adcCounts);
1368:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_sar_status_t Cy_SAR_SetOffset(uint32_t chan, int16_t offset);
1369:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_sar_status_t Cy_SAR_SetGain(uint32_t chan, int32_t adcGain);
1370:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1371:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1372:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_switches
1373:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions is for controlling/querying the SARMUX switches
1374:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1375:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1376:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_SetAnalogSwitch(SAR_Type *base, cy_en_sar_switch_register_sel_t switchSelect, uint32_t 
1377:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** uint32_t Cy_SAR_GetAnalogSwitch(const SAR_Type *base, cy_en_sar_switch_register_sel_t switchSelect)
1378:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetVssaVminusSwitch(SAR_Type *base, cy_en_sar_switch_state_t state);
1379:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_SetSwitchSarSeqCtrl(SAR_Type *base, uint32_t switchMask, cy_en_sar_switch_sar_seq_ctrl_
1380:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetVssaSarSeqCtrl(SAR_Type *base, cy_en_sar_switch_sar_seq_ctrl_t ctrl)
1381:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 75
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 75
>>>>>>> Isac


1382:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1383:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_interrupt
1384:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions are related to SAR interrupts.
1385:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1386:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1387:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptStatus(const SAR_Type *base);
1388:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_ClearInterrupt(SAR_Type *base, uint32_t intrMask);
1389:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetInterrupt(SAR_Type *base, uint32_t intrMask);
1390:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetInterruptMask(SAR_Type *base, uint32_t intrMask);
1391:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptMask(const SAR_Type *base);
1392:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptStatusMasked(const SAR_Type *base);
1393:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1394:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetRangeInterruptStatus(const SAR_Type *base);
1395:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_ClearRangeInterrupt(SAR_Type *base, uint32_t chanMask);
1396:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetRangeInterrupt(SAR_Type *base, uint32_t chanMask);
1397:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetRangeInterruptMask(SAR_Type *base, uint32_t chanMask);
1398:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetRangeInterruptMask(const SAR_Type *base);
1399:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetRangeInterruptStatusMasked(const SAR_Type *base);
1400:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1401:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetSatInterruptStatus(const SAR_Type *base);
1402:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_ClearSatInterrupt(SAR_Type *base, uint32_t chanMask);
1403:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetSatInterrupt(SAR_Type *base, uint32_t chanMask);
1404:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetSatInterruptMask(SAR_Type *base, uint32_t chanMask);
1405:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetSatInterruptMask(const SAR_Type *base);
1406:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetSatInterruptStatusMasked(const SAR_Type *base);
1407:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1408:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptCause(const SAR_Type *base);
1409:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1410:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1411:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1412:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_helper
1413:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions is for useful configuration query
1414:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1415:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1416:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** bool Cy_SAR_IsChannelSigned(const SAR_Type *base, uint32_t chan);
1417:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** bool Cy_SAR_IsChannelSingleEnded(const SAR_Type *base, uint32_t chan);
1418:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE bool Cy_SAR_IsChannelDifferential(const SAR_Type *base, uint32_t chan);
1419:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1420:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1421:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_basic
1422:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1423:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1424:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1425:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1426:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1427:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_Disable
1428:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1429:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1430:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Turn off the hardware block.
1431:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1432:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1433:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1434:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1435:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1436:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1437:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1438:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_Disable(SAR_Type *base)
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 76
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 76
>>>>>>> Isac


1439:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1440:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_CTRL(base) &= ~SAR_CTRL_ENABLED_Msk;
1441:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1442:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1443:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1444:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1445:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetChanResultUpdated
1446:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1447:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1448:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return whether the RESULT register has been updated or not.
1449:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If the bit is high, the corresponding channel RESULT register was updated,
1450:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * i.e. was sampled during the previous scan and, in case of Interleaved averaging,
1451:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * reached the averaging count.
1452:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If the bit is low, the corresponding channel is not enabled or the averaging count
1453:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * is not yet reached for Interleaved averaging.
1454:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1455:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1456:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1457:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1458:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return
1459:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Each bit of the result corresponds to the channel.
1460:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Bit 0 is for channel 0, etc.
1461:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1462:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1463:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1464:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_GET_CHAN_RESULT_UPDATED
1465:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1466:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1467:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetChanResultUpdated(const SAR_Type *base)
1468:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1469:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_CHAN_RESULT_UPDATED(base);
1470:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1471:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1472:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1473:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_config
1474:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1475:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1476:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1477:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1478:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1479:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetChanMask
1480:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1481:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1482:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Set the enable/disable mask for the channels.
1483:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1484:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1485:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1486:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1487:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param enableMask
1488:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Channel enable/disable mask. Each bit corresponds to a channel.
1489:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - 0: the corresponding channel is disabled.
1490:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - 1: the corresponding channel is enabled; it will be included in the next scan.
1491:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1492:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1493:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1494:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1495:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 77
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 77
>>>>>>> Isac


1496:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SET_CHAN_MASK
1497:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1498:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1499:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetChanMask(SAR_Type *base, uint32_t enableMask)
1500:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1501:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_CHANMASK(enableMask));
1502:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1503:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_CHAN_EN(base) = enableMask;
1504:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1505:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1506:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1507:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1508:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetRangeCond
1509:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1510:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1511:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Set the condition in which range detection interrupts are triggered.
1512:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1513:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1514:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1515:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1516:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param cond
1517:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * A value of the enum \ref cy_en_sar_range_detect_condition_t.
1518:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1519:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1520:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1521:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1522:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1523:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SET_RANGE_COND
1524:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1525:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1526:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetRangeCond(SAR_Type *base, cy_en_sar_range_detect_condition_t cond)
1527:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1528:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L3(CY_SAR_RANGECOND(cond));
1529:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1530:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_RANGE_COND(base) = (uint32_t)cond << SAR_RANGE_COND_RANGE_COND_Pos;
1531:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1532:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1533:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1534:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1535:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_interrupt
1536:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1537:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1538:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1539:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetInterruptStatus
1540:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1541:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1542:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return the interrupt register status.
1543:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1544:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1545:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1546:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1547:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return Interrupt status
1548:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1549:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1550:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1551:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_ISR
1552:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 78
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 78
>>>>>>> Isac


1553:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1554:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptStatus(const SAR_Type *base)
1555:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1556:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_INTR(base);
1557:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1558:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1559:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1560:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1561:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_ClearInterrupt
1562:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1563:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1564:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Clear the interrupt.
1565:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The interrupt must be cleared with this function so that the hardware
1566:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * can set subsequent interrupts and those interrupts can be forwarded
1567:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * to the interrupt controller, if enabled.
1568:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1569:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1570:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1571:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1572:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param intrMask
1573:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The mask of interrupts to clear. Typically this will be the value returned
1574:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * from \ref Cy_SAR_GetInterruptStatus.
1575:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Alternately, select one or more values from \ref cy_en_sar_intr_mask_t and "OR" them together.
1576:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_EOS_MASK
1577:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_OVERFLOW_MASK
1578:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_FW_COLLISION_MASK
1579:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1580:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1581:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1582:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1583:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_ClearInterrupt(SAR_Type *base, uint32_t intrMask)
1584:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1585:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_INTRMASK(intrMask));
1586:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1587:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_INTR(base) = intrMask;
1588:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1589:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* Dummy read for buffered writes. */
1590:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     (void) SAR_INTR(base);
1591:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1592:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1593:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1594:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1595:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetInterrupt
1596:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1597:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1598:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Trigger an interrupt with software.
1599:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1600:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1601:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1602:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1603:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param intrMask
1604:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The mask of interrupts to set.
1605:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Select one or more values from \ref cy_en_sar_intr_mask_t and "OR" them together.
1606:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_EOS_MASK
1607:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_OVERFLOW_MASK
1608:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_FW_COLLISION_MASK
1609:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 79
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 79
>>>>>>> Isac


1610:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1611:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1612:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1613:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetInterrupt(SAR_Type *base, uint32_t intrMask)
1614:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1615:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_INTRMASK(intrMask));
1616:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1617:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_INTR_SET(base) = intrMask;
1618:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1619:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1620:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1621:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1622:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetInterruptMask
1623:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1624:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1625:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Enable which interrupts can trigger the CPU interrupt controller.
1626:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1627:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1628:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1629:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1630:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param intrMask
1631:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The mask of interrupts. Select one or more values from \ref cy_en_sar_intr_mask_t
1632:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and "OR" them together.
1633:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_MASK_NONE : Disable EOS, overflow, and firmware collision interrupts.
1634:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_EOS_MASK
1635:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_OVERFLOW_MASK
1636:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_FW_COLLISION_MASK
1637:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1638:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1639:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1640:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1641:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1642:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SET_INTERRUPT_MASK
1643:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1644:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1645:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetInterruptMask(SAR_Type *base, uint32_t intrMask)
1646:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1647:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_INTRMASK(intrMask));
 312              		.loc 3 1647 0
 313 0008 072C     		cmp	r4, #7
 314 000a 03D9     		bls	.L20
 315 000c 0449     		ldr	r1, .L21
 316 000e 0548     		ldr	r0, .L21+4
 317 0010 FFF7FEFF 		bl	Cy_SysLib_AssertFailed
 318              	.LVL17:
 319              	.L20:
1648:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1649:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_INTR_MASK(base) = intrMask;
 320              		.loc 3 1649 0
 321 0014 8623     		movs	r3, #134
 322 0016 9B00     		lsls	r3, r3, #2
 323 0018 034A     		ldr	r2, .L21+8
 324 001a D450     		str	r4, [r2, r3]
 325              	.LVL18:
 326              	.LBE48:
 327              	.LBE47:
 343:Generated_Source\PSoC6/ADC.c **** 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 80
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 80
>>>>>>> Isac


 344:Generated_Source\PSoC6/ADC.c ****     Cy_SAR_SetInterruptMask(ADC_SAR__HW, intrMaskReg);
 345:Generated_Source\PSoC6/ADC.c **** }
 328              		.loc 1 345 0
 329              		@ sp needed
 330              	.LVL19:
 331 001c 10BD     		pop	{r4, pc}
 332              	.L22:
 333 001e C046     		.align	2
 334              	.L21:
 335 0020 6F060000 		.word	1647
 336 0024 00000000 		.word	.LC1
 337 0028 00001D41 		.word	1092419584
 338              		.cfi_endproc
 339              	.LFE194:
 340              		.size	ADC_SetEosMask, .-ADC_SetEosMask
 341              		.section	.text.ADC_SetChanMask,"ax",%progbits
 342              		.align	2
 343              		.global	ADC_SetChanMask
 344              		.code	16
 345              		.thumb_func
 346              		.type	ADC_SetChanMask, %function
 347              	ADC_SetChanMask:
 348              	.LFB195:
 346:Generated_Source\PSoC6/ADC.c **** 
 347:Generated_Source\PSoC6/ADC.c **** /******************************************************************************
 348:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_SetChanMask
 349:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//*
 350:Generated_Source\PSoC6/ADC.c **** *
 351:Generated_Source\PSoC6/ADC.c **** * \brief Sets enable/disable mask for all channels in current configuration.
 352:Generated_Source\PSoC6/ADC.c **** *
 353:Generated_Source\PSoC6/ADC.c **** *
 354:Generated_Source\PSoC6/ADC.c **** * \param enableMask
 355:Generated_Source\PSoC6/ADC.c **** *  Channel enable/disable mask.
 356:Generated_Source\PSoC6/ADC.c **** *
 357:Generated_Source\PSoC6/ADC.c **** * \sideeffect
 358:Generated_Source\PSoC6/ADC.c **** *  None.
 359:Generated_Source\PSoC6/ADC.c **** *
 360:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 361:Generated_Source\PSoC6/ADC.c **** void ADC_SetChanMask(uint32_t enableMask)
 362:Generated_Source\PSoC6/ADC.c **** {
 349              		.loc 1 362 0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 0
 352              		@ frame_needed = 0, uses_anonymous_args = 0
 353              	.LVL20:
 354 0000 10B5     		push	{r4, lr}
 355              		.cfi_def_cfa_offset 8
 356              		.cfi_offset 4, -8
 357              		.cfi_offset 14, -4
 363:Generated_Source\PSoC6/ADC.c ****     uint32 chanCount = ADC_allConfigs[ADC_currentConfig].numChannels;
 358              		.loc 1 363 0
 359 0002 0B4B     		ldr	r3, .L25
 360 0004 1B68     		ldr	r3, [r3]
 361 0006 9A00     		lsls	r2, r3, #2
 362 0008 D318     		adds	r3, r2, r3
 363 000a 9A00     		lsls	r2, r3, #2
 364 000c 094B     		ldr	r3, .L25+4
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 81
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 81
>>>>>>> Isac


 365 000e 9A18     		adds	r2, r3, r2
 366 0010 5368     		ldr	r3, [r2, #4]
 367              	.LVL21:
 364:Generated_Source\PSoC6/ADC.c ****     enableMask &= (uint32)((uint32)(1ul << chanCount) - 1ul);
 368              		.loc 1 364 0
 369 0012 0124     		movs	r4, #1
 370 0014 9C40     		lsls	r4, r4, r3
 371 0016 013C     		subs	r4, r4, #1
 372 0018 0440     		ands	r4, r0
 373              	.LVL22:
 374              	.LBB49:
 375              	.LBB50:
1501:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 376              		.loc 3 1501 0
 377 001a 074B     		ldr	r3, .L25+8
 378              	.LVL23:
 379 001c 9C42     		cmp	r4, r3
 380 001e 03D9     		bls	.L24
 381 0020 0649     		ldr	r1, .L25+12
 382 0022 0748     		ldr	r0, .L25+16
 383 0024 FFF7FEFF 		bl	Cy_SysLib_AssertFailed
 384              	.LVL24:
 385              	.L24:
1503:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
 386              		.loc 3 1503 0
 387 0028 064B     		ldr	r3, .L25+20
 388 002a 1C62     		str	r4, [r3, #32]
 389              	.LVL25:
 390              	.LBE50:
 391              	.LBE49:
 365:Generated_Source\PSoC6/ADC.c **** 
 366:Generated_Source\PSoC6/ADC.c ****     Cy_SAR_SetChanMask(ADC_SAR__HW, enableMask);
 367:Generated_Source\PSoC6/ADC.c **** }
 392              		.loc 1 367 0
 393              		@ sp needed
 394              	.LVL26:
 395 002c 10BD     		pop	{r4, pc}
 396              	.L26:
 397 002e C046     		.align	2
 398              	.L25:
 399 0030 00000000 		.word	.LANCHOR0
 400 0034 00000000 		.word	ADC_allConfigs
 401 0038 FFFF0000 		.word	65535
 402 003c DD050000 		.word	1501
 403 0040 00000000 		.word	.LC1
 404 0044 00001D41 		.word	1092419584
 405              		.cfi_endproc
 406              	.LFE195:
 407              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 408              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 409              		.align	2
 410              		.global	ADC_IsEndConversion
 411              		.code	16
 412              		.thumb_func
 413              		.type	ADC_IsEndConversion, %function
 414              	ADC_IsEndConversion:
 415              	.LFB196:
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 82
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 82
>>>>>>> Isac


 368:Generated_Source\PSoC6/ADC.c **** 
 369:Generated_Source\PSoC6/ADC.c **** /*******************************************************************************
 370:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_IsEndConversion
 371:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//**
 372:Generated_Source\PSoC6/ADC.c **** *
 373:Generated_Source\PSoC6/ADC.c **** * \brief Immediately returns the status of the conversion or does not return
 374:Generated_Source\PSoC6/ADC.c **** * (blocking) until the conversion completes, depending on the retMode parameter.
 375:Generated_Source\PSoC6/ADC.c **** * In blocking mode, there is a time out of about 10 seconds for a CPU speed of
 376:Generated_Source\PSoC6/ADC.c **** * 100 Mhz.
 377:Generated_Source\PSoC6/ADC.c **** *
 378:Generated_Source\PSoC6/ADC.c **** * \param retMode Check conversion return mode.
 379:Generated_Source\PSoC6/ADC.c **** *
 380:Generated_Source\PSoC6/ADC.c **** * \return uint32_t: If a nonzero value is returned, the last conversion is complete.
 381:Generated_Source\PSoC6/ADC.c **** * If the returned value is zero, the ADC is still calculating the last result.
 382:Generated_Source\PSoC6/ADC.c **** *
 383:Generated_Source\PSoC6/ADC.c **** * \sideeffect This function reads the end of conversion status, and clears it afterward.
 384:Generated_Source\PSoC6/ADC.c **** *
 385:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 386:Generated_Source\PSoC6/ADC.c **** uint32_t ADC_IsEndConversion(cy_en_sar_return_mode_t retMode)
 387:Generated_Source\PSoC6/ADC.c **** {
 416              		.loc 1 387 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420              	.LVL27:
 421 0000 10B5     		push	{r4, lr}
 422              		.cfi_def_cfa_offset 8
 423              		.cfi_offset 4, -8
 424              		.cfi_offset 14, -4
 425 0002 0100     		movs	r1, r0
 426              	.LVL28:
 388:Generated_Source\PSoC6/ADC.c ****     uint32 endOfConversion = 0u;
 389:Generated_Source\PSoC6/ADC.c ****     cy_en_sar_status_t result;
 390:Generated_Source\PSoC6/ADC.c **** 
 391:Generated_Source\PSoC6/ADC.c ****     result = Cy_SAR_IsEndConversion(ADC_SAR__HW, retMode);
 427              		.loc 1 391 0
 428 0004 0448     		ldr	r0, .L30
 429              	.LVL29:
 430 0006 FFF7FEFF 		bl	Cy_SAR_IsEndConversion
 431              	.LVL30:
 392:Generated_Source\PSoC6/ADC.c **** 
 393:Generated_Source\PSoC6/ADC.c ****     if (result == CY_SAR_SUCCESS)
 432              		.loc 1 393 0
 433 000a 0028     		cmp	r0, #0
 434 000c 01D0     		beq	.L29
 388:Generated_Source\PSoC6/ADC.c ****     uint32 endOfConversion = 0u;
 435              		.loc 1 388 0
 436 000e 0020     		movs	r0, #0
 437              	.LVL31:
 438 0010 00E0     		b	.L28
 439              	.LVL32:
 440              	.L29:
 394:Generated_Source\PSoC6/ADC.c ****     {
 395:Generated_Source\PSoC6/ADC.c ****         endOfConversion = 1u;
 441              		.loc 1 395 0
 442 0012 0120     		movs	r0, #1
 443              	.LVL33:
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 83
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 83
>>>>>>> Isac


 444              	.L28:
 396:Generated_Source\PSoC6/ADC.c ****     }
 397:Generated_Source\PSoC6/ADC.c **** 
 398:Generated_Source\PSoC6/ADC.c ****     return endOfConversion;
 399:Generated_Source\PSoC6/ADC.c **** }
 445              		.loc 1 399 0
 446              		@ sp needed
 447 0014 10BD     		pop	{r4, pc}
 448              	.L31:
 449 0016 C046     		.align	2
 450              	.L30:
 451 0018 00001D41 		.word	1092419584
 452              		.cfi_endproc
 453              	.LFE196:
 454              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 455              		.section	.text.ADC_Init,"ax",%progbits
 456              		.align	2
 457              		.global	ADC_Init
 458              		.code	16
 459              		.thumb_func
 460              		.type	ADC_Init, %function
 461              	ADC_Init:
 462              	.LFB197:
 400:Generated_Source\PSoC6/ADC.c **** 
 401:Generated_Source\PSoC6/ADC.c **** /* ****************************************************************************
 402:Generated_Source\PSoC6/ADC.c **** * Function Name: ADC_Init
 403:Generated_Source\PSoC6/ADC.c **** ****************************************************************************//*
 404:Generated_Source\PSoC6/ADC.c **** *
 405:Generated_Source\PSoC6/ADC.c **** * \brief Initialize the component according to parameters defined in the
 406:Generated_Source\PSoC6/ADC.c **** * customizer.
 407:Generated_Source\PSoC6/ADC.c **** *
 408:Generated_Source\PSoC6/ADC.c **** * \param None
 409:Generated_Source\PSoC6/ADC.c **** *
 410:Generated_Source\PSoC6/ADC.c **** * \return None
 411:Generated_Source\PSoC6/ADC.c **** *
 412:Generated_Source\PSoC6/ADC.c **** * \sideeffect None
 413:Generated_Source\PSoC6/ADC.c **** *
 414:Generated_Source\PSoC6/ADC.c **** *******************************************************************************/
 415:Generated_Source\PSoC6/ADC.c **** void ADC_Init(void)
 416:Generated_Source\PSoC6/ADC.c **** {
 463              		.loc 1 416 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 0
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 467 0000 10B5     		push	{r4, lr}
 468              		.cfi_def_cfa_offset 8
 469              		.cfi_offset 4, -8
 470              		.cfi_offset 14, -4
 471              	.LVL34:
 417:Generated_Source\PSoC6/ADC.c ****     uint32_t configNum = 0u;
 418:Generated_Source\PSoC6/ADC.c **** 
 419:Generated_Source\PSoC6/ADC.c ****     if(0u == ADC_initVar)
 472              		.loc 1 419 0
 473 0002 074B     		ldr	r3, .L34
 474 0004 1B79     		ldrb	r3, [r3, #4]
 475 0006 002B     		cmp	r3, #0
 476 0008 09D1     		bne	.L32
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 84
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 84
>>>>>>> Isac


 420:Generated_Source\PSoC6/ADC.c ****     {
 421:Generated_Source\PSoC6/ADC.c ****         /* Interrupt core assignment will be up to the user. Initialize but do not enable the inter
 422:Generated_Source\PSoC6/ADC.c ****         #ifdef ADC_IRQ__INTC_CORTEXM4_ASSIGNED
 423:Generated_Source\PSoC6/ADC.c ****         #if (CY_CPU_CORTEX_M4)
 424:Generated_Source\PSoC6/ADC.c ****             (void)Cy_SysInt_Init(&ADC_IRQ_cfg, &ADC_ISR);
 425:Generated_Source\PSoC6/ADC.c ****         #endif
 426:Generated_Source\PSoC6/ADC.c ****         #endif
 427:Generated_Source\PSoC6/ADC.c **** 
 428:Generated_Source\PSoC6/ADC.c ****         #ifdef ADC_IRQ__INTC_CORTEXM0P_ASSIGNED
 429:Generated_Source\PSoC6/ADC.c ****         #if (CY_CPU_CORTEX_M0P)
 430:Generated_Source\PSoC6/ADC.c ****             (void)Cy_SysInt_Init(&ADC_IRQ_cfg, &ADC_ISR);
 431:Generated_Source\PSoC6/ADC.c ****         #endif
 432:Generated_Source\PSoC6/ADC.c ****         #endif
 433:Generated_Source\PSoC6/ADC.c **** 
 434:Generated_Source\PSoC6/ADC.c ****         /* Initialize configuration zero if SelectConfig has not been called */
 435:Generated_Source\PSoC6/ADC.c ****         if(0u == ADC_selected)
 477              		.loc 1 435 0
 478 000a 054B     		ldr	r3, .L34
 479 000c 5B79     		ldrb	r3, [r3, #5]
 480 000e 002B     		cmp	r3, #0
 481 0010 05D1     		bne	.L32
 436:Generated_Source\PSoC6/ADC.c ****         {
 437:Generated_Source\PSoC6/ADC.c ****             ADC_selected = 1u;
 482              		.loc 1 437 0
 483 0012 0122     		movs	r2, #1
 484 0014 024B     		ldr	r3, .L34
 485 0016 5A71     		strb	r2, [r3, #5]
 438:Generated_Source\PSoC6/ADC.c ****             configNum = 0uL;
 439:Generated_Source\PSoC6/ADC.c **** 
 440:Generated_Source\PSoC6/ADC.c ****             /* Change Vref selection if is was routed by Creator. Break. */
 441:Generated_Source\PSoC6/ADC.c ****             #if (ADC_VREF_ROUTED)
 442:Generated_Source\PSoC6/ADC.c ****                 ADC_vrefAMux_DisconnectAll();
 443:Generated_Source\PSoC6/ADC.c ****             #endif
 444:Generated_Source\PSoC6/ADC.c **** 
 445:Generated_Source\PSoC6/ADC.c ****             ADC_InitConfig(&ADC_allConfigs[configNum]);
 486              		.loc 1 445 0
 487 0018 0248     		ldr	r0, .L34+4
 488 001a FFF7FEFF 		bl	ADC_InitConfig
 489              	.LVL35:
 490              	.L32:
 446:Generated_Source\PSoC6/ADC.c **** 
 447:Generated_Source\PSoC6/ADC.c ****             /* Change Vref selection if is was routed by Creator. Make. */
 448:Generated_Source\PSoC6/ADC.c ****             #if (ADC_VREF_ROUTED)
 449:Generated_Source\PSoC6/ADC.c ****                 ADC_vrefAMux_Select((uint8)configNum);
 450:Generated_Source\PSoC6/ADC.c ****             #endif
 451:Generated_Source\PSoC6/ADC.c ****         }
 452:Generated_Source\PSoC6/ADC.c ****     }
 453:Generated_Source\PSoC6/ADC.c **** }
 491              		.loc 1 453 0
 492              		@ sp needed
 493 001e 10BD     		pop	{r4, pc}
 494              	.L35:
 495              		.align	2
 496              	.L34:
 497 0020 00000000 		.word	.LANCHOR0
 498 0024 00000000 		.word	ADC_allConfigs
 499              		.cfi_endproc
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 85
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 85
>>>>>>> Isac


 500              	.LFE197:
 501              		.size	ADC_Init, .-ADC_Init
 502              		.section	.text.ADC_Start,"ax",%progbits
 503              		.align	2
 504              		.global	ADC_Start
 505              		.code	16
 506              		.thumb_func
 507              		.type	ADC_Start, %function
 508              	ADC_Start:
 509              	.LFB186:
  66:Generated_Source\PSoC6/ADC.c ****     if (ADC_INIT_VAR_INIT_FLAG != (ADC_INIT_VAR_INIT_FLAG & ADC_initVar))
 510              		.loc 1 66 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514 0000 10B5     		push	{r4, lr}
 515              		.cfi_def_cfa_offset 8
 516              		.cfi_offset 4, -8
 517              		.cfi_offset 14, -4
  67:Generated_Source\PSoC6/ADC.c ****     {
 518              		.loc 1 67 0
 519 0002 074B     		ldr	r3, .L38
 520 0004 1B79     		ldrb	r3, [r3, #4]
 521 0006 DB07     		lsls	r3, r3, #31
 522 0008 06D4     		bmi	.L37
  69:Generated_Source\PSoC6/ADC.c ****         ADC_initVar |= ADC_INIT_VAR_INIT_FLAG;
 523              		.loc 1 69 0
 524 000a FFF7FEFF 		bl	ADC_Init
 525              	.LVL36:
  70:Generated_Source\PSoC6/ADC.c ****     }
 526              		.loc 1 70 0
 527 000e 044A     		ldr	r2, .L38
 528 0010 1179     		ldrb	r1, [r2, #4]
 529 0012 0123     		movs	r3, #1
 530 0014 0B43     		orrs	r3, r1
 531 0016 1371     		strb	r3, [r2, #4]
 532              	.L37:
 533              	.LBB51:
 534              	.LBB52:
 535              		.file 4 "Generated_Source\\PSoC6\\ADC.h"
   1:Generated_Source\PSoC6/ADC.h **** /***************************************************************************//**
   2:Generated_Source\PSoC6/ADC.h **** * \file     ADC.h
   3:Generated_Source\PSoC6/ADC.h **** * \version  3.10
   4:Generated_Source\PSoC6/ADC.h **** *
   5:Generated_Source\PSoC6/ADC.h **** * \brief
   6:Generated_Source\PSoC6/ADC.h **** * Provides the source code to the API for the ADC Component.
   7:Generated_Source\PSoC6/ADC.h **** *
   8:Generated_Source\PSoC6/ADC.h **** ********************************************************************************
   9:Generated_Source\PSoC6/ADC.h **** * \copyright
  10:Generated_Source\PSoC6/ADC.h **** * (c) 2017-2018, Cypress Semiconductor Corporation. All rights reserved.
  11:Generated_Source\PSoC6/ADC.h **** * This software, including source code, documentation and related
  12:Generated_Source\PSoC6/ADC.h **** * materials ("Software"), is owned by Cypress Semiconductor
  13:Generated_Source\PSoC6/ADC.h **** * Corporation ("Cypress") and is protected by and subject to worldwide
  14:Generated_Source\PSoC6/ADC.h **** * patent protection (United States and foreign), United States copyright
  15:Generated_Source\PSoC6/ADC.h **** * laws and international treaty provisions. Therefore, you may use this
  16:Generated_Source\PSoC6/ADC.h **** * Software only as provided in the license agreement accompanying the
  17:Generated_Source\PSoC6/ADC.h **** * software package from which you obtained this Software ("EULA").
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 86
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 86
>>>>>>> Isac


  18:Generated_Source\PSoC6/ADC.h **** * If no EULA applies, Cypress hereby grants you a personal, nonexclusive,
  19:Generated_Source\PSoC6/ADC.h **** * non-transferable license to copy, modify, and compile the
  20:Generated_Source\PSoC6/ADC.h **** * Software source code solely for use in connection with Cypress's
  21:Generated_Source\PSoC6/ADC.h **** * integrated circuit products. Any reproduction, modification, translation,
  22:Generated_Source\PSoC6/ADC.h **** * compilation, or representation of this Software except as specified
  23:Generated_Source\PSoC6/ADC.h **** * above is prohibited without the express written permission of Cypress.
  24:Generated_Source\PSoC6/ADC.h **** * Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO
  25:Generated_Source\PSoC6/ADC.h **** * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
  26:Generated_Source\PSoC6/ADC.h **** * BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED
  27:Generated_Source\PSoC6/ADC.h **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  28:Generated_Source\PSoC6/ADC.h **** * PARTICULAR PURPOSE. Cypress reserves the right to make
  29:Generated_Source\PSoC6/ADC.h **** * changes to the Software without notice. Cypress does not assume any
  30:Generated_Source\PSoC6/ADC.h **** * liability arising out of the application or use of the Software or any
  31:Generated_Source\PSoC6/ADC.h **** * product or circuit described in the Software. Cypress does not
  32:Generated_Source\PSoC6/ADC.h **** * authorize its products for use in any products where a malfunction or
  33:Generated_Source\PSoC6/ADC.h **** * failure of the Cypress product may reasonably be expected to result in
  34:Generated_Source\PSoC6/ADC.h **** * significant property damage, injury or death ("High Risk Product"). By
  35:Generated_Source\PSoC6/ADC.h **** * including Cypress's product in a High Risk Product, the manufacturer
  36:Generated_Source\PSoC6/ADC.h **** * of such system or application assumes all risk of such use and in doing
  37:Generated_Source\PSoC6/ADC.h **** * so agrees to indemnify Cypress against all liability.
  38:Generated_Source\PSoC6/ADC.h **** *******************************************************************************/
  39:Generated_Source\PSoC6/ADC.h **** #if !defined(CY_ADC_H)
  40:Generated_Source\PSoC6/ADC.h **** #define CY_ADC_H
  41:Generated_Source\PSoC6/ADC.h **** 
  42:Generated_Source\PSoC6/ADC.h **** #include <cy_device_headers.h>
  43:Generated_Source\PSoC6/ADC.h **** #include <sar/cy_sar.h>
  44:Generated_Source\PSoC6/ADC.h **** 
  45:Generated_Source\PSoC6/ADC.h **** #define ADC_VREF_ROUTED                  ((0) == 1u)
  46:Generated_Source\PSoC6/ADC.h **** #if (ADC_VREF_ROUTED)
  47:Generated_Source\PSoC6/ADC.h **** #include "ADC_vrefAMux.h"
  48:Generated_Source\PSoC6/ADC.h **** #endif
  49:Generated_Source\PSoC6/ADC.h **** 
  50:Generated_Source\PSoC6/ADC.h **** #define ADC_CLOCK_INTERNAL               ((1) == 1u)
  51:Generated_Source\PSoC6/ADC.h **** #if (ADC_CLOCK_INTERNAL)
  52:Generated_Source\PSoC6/ADC.h **** #include "ADC_intSarClock.h"
  53:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_CLOCK_INTERNAL */
  54:Generated_Source\PSoC6/ADC.h **** 
  55:Generated_Source\PSoC6/ADC.h **** /**
  56:Generated_Source\PSoC6/ADC.h **** * \addtogroup group_structures
  57:Generated_Source\PSoC6/ADC.h **** *
  58:Generated_Source\PSoC6/ADC.h **** */
  59:Generated_Source\PSoC6/ADC.h **** typedef struct
  60:Generated_Source\PSoC6/ADC.h **** {
  61:Generated_Source\PSoC6/ADC.h ****     uint32_t channelBase;                   /* Start of channels for the configuration */
  62:Generated_Source\PSoC6/ADC.h ****     uint32_t numChannels;                   /* Number of channels in the configuration */
  63:Generated_Source\PSoC6/ADC.h ****     const cy_stc_sar_config_t *hwConfigStc; /* PDL structure */
  64:Generated_Source\PSoC6/ADC.h ****     uint32_t miscConfig;                    /* Miscellaneous configuration bits broken down as foll
  65:Generated_Source\PSoC6/ADC.h ****                                             [0] - Freerunning: Set if the sample mode is freerunnin
  66:Generated_Source\PSoC6/ADC.h ****                                             [2] - Mux Switch 0: Set when VSSA is used for the neg i
  67:Generated_Source\PSoC6/ADC.h ****                                             */
  68:Generated_Source\PSoC6/ADC.h **** #if (ADC_CLOCK_INTERNAL)
  69:Generated_Source\PSoC6/ADC.h ****     uint32_t clkDivider;                    /* Clock divider */
  70:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_CLOCK_INTERNAL */
  71:Generated_Source\PSoC6/ADC.h **** 
  72:Generated_Source\PSoC6/ADC.h **** } ADC_CONFIG_STRUCT;
  73:Generated_Source\PSoC6/ADC.h **** /** @} structures */
  74:Generated_Source\PSoC6/ADC.h **** 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 87
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 87
>>>>>>> Isac


  75:Generated_Source\PSoC6/ADC.h **** /*******************************************************************************
  76:Generated_Source\PSoC6/ADC.h **** * Function Prototypes
  77:Generated_Source\PSoC6/ADC.h **** *******************************************************************************/
  78:Generated_Source\PSoC6/ADC.h **** void ADC_SelectConfig(uint32_t config, uint32_t restart);
  79:Generated_Source\PSoC6/ADC.h **** void ADC_InitConfig(const ADC_CONFIG_STRUCT *config);
  80:Generated_Source\PSoC6/ADC.h **** void ADC_Init(void);
  81:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_Enable(void);
  82:Generated_Source\PSoC6/ADC.h **** 
  83:Generated_Source\PSoC6/ADC.h **** /**
  84:Generated_Source\PSoC6/ADC.h **** * \addtogroup group_general
  85:Generated_Source\PSoC6/ADC.h **** * @{
  86:Generated_Source\PSoC6/ADC.h **** */
  87:Generated_Source\PSoC6/ADC.h **** void ADC_Start(void);
  88:Generated_Source\PSoC6/ADC.h **** void ADC_StartEx(cy_israddress userIsr);
  89:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_Stop(void);
  90:Generated_Source\PSoC6/ADC.h **** void ADC_StartConvert(void);
  91:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_StopConvert(void);
  92:Generated_Source\PSoC6/ADC.h **** void ADC_SetConvertMode(cy_en_sar_start_convert_sel_t mode);
  93:Generated_Source\PSoC6/ADC.h **** void ADC_SetEosMask(uint32_t mask);
  94:Generated_Source\PSoC6/ADC.h **** uint32_t ADC_IsEndConversion(cy_en_sar_return_mode_t retMode);
  95:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE int16_t ADC_GetResult16(uint32_t chan);
  96:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE int32_t ADC_GetResult32(uint32_t chan);
  97:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_SetLowLimit(uint32_t lowLimit);
  98:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_SetHighLimit(uint32_t highLimit);
  99:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_SetLimitMask(uint32_t limitMask);
 100:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_SetSatMask(uint32_t satMask);
 101:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE cy_en_sar_status_t ADC_SetOffset(uint32_t chan, int16_t offset);
 102:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE cy_en_sar_status_t ADC_SetGain(uint32_t chan, int32_t adcGain);
 103:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE float32_t ADC_CountsTo_Volts(uint32_t chan, int16_t adcCounts);
 104:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE int16_t ADC_CountsTo_mVolts(uint32_t chan, int16_t adcCounts);
 105:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE int32_t ADC_CountsTo_uVolts(uint32_t chan, int16_t adcCounts);
 106:Generated_Source\PSoC6/ADC.h **** 
 107:Generated_Source\PSoC6/ADC.h **** /** @} general */
 108:Generated_Source\PSoC6/ADC.h **** 
 109:Generated_Source\PSoC6/ADC.h **** void ADC_SetChanMask(uint32_t enableMask);
 110:Generated_Source\PSoC6/ADC.h **** 
 111:Generated_Source\PSoC6/ADC.h **** /**
 112:Generated_Source\PSoC6/ADC.h **** * \addtogroup group_power
 113:Generated_Source\PSoC6/ADC.h **** * @{
 114:Generated_Source\PSoC6/ADC.h **** */
 115:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_Sleep(void);
 116:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_Wakeup(void);
 117:Generated_Source\PSoC6/ADC.h **** 
 118:Generated_Source\PSoC6/ADC.h **** /** @} power */
 119:Generated_Source\PSoC6/ADC.h **** 
 120:Generated_Source\PSoC6/ADC.h **** /**
 121:Generated_Source\PSoC6/ADC.h **** * \addtogroup group_interrupt
 122:Generated_Source\PSoC6/ADC.h **** * @{
 123:Generated_Source\PSoC6/ADC.h **** */
 124:Generated_Source\PSoC6/ADC.h **** void ADC_ISR(void);
 125:Generated_Source\PSoC6/ADC.h **** void ADC_IRQ_Enable(void);
 126:Generated_Source\PSoC6/ADC.h **** void ADC_IRQ_Disable(void);
 127:Generated_Source\PSoC6/ADC.h **** 
 128:Generated_Source\PSoC6/ADC.h **** /** @} interrupt */
 129:Generated_Source\PSoC6/ADC.h **** 
 130:Generated_Source\PSoC6/ADC.h **** /*******************************************************************************
 131:Generated_Source\PSoC6/ADC.h ****                                   Parameters
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 88
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 88
>>>>>>> Isac


 132:Generated_Source\PSoC6/ADC.h **** The parameters that are set in the customizer are redefined as constants here.
 133:Generated_Source\PSoC6/ADC.h **** *******************************************************************************/
 134:Generated_Source\PSoC6/ADC.h **** 
 135:Generated_Source\PSoC6/ADC.h **** /*  Sample Mode setting constants */
 136:Generated_Source\PSoC6/ADC.h **** #define ADC_TOTAL_CONFIGS                (1ul)
 137:Generated_Source\PSoC6/ADC.h **** 
 138:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 139:Generated_Source\PSoC6/ADC.h **** /* Begin configuration 0 customizer defines                                   */
 140:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 141:Generated_Source\PSoC6/ADC.h **** 
 142:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SAMPLE_RATE             (100000)
 143:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_CHANNEL_BASE            (0u)
 144:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_CHANNEL_COUNT           (1u)
 145:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_VREF_SEL_MASK           (0xc0u)
 146:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_NOMINAL_CLOCK_FREQ      (12500000u)
 147:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_CHANNEL_EN              (0x1u)
 148:Generated_Source\PSoC6/ADC.h **** 
 149:Generated_Source\PSoC6/ADC.h **** /* Sample Control Register */
 150:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SINGLE_ENDED_FORMAT     (0uL)
 151:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_DIFFERENTIAL_FORMAT     (1uL)
 152:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SAMPLES_AVERAGED        (0uL)
 153:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_RANGE_INTR_MASK         (0x0u)
 154:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SATURATE_INTR_MASK      (0x0u)
 155:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_VNEG_INPUT_SEL          (7)
 156:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SINGLE_PRESENT          (1)
 157:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_VREF_MV_VALUE           (1200)
 158:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_APERTURE_TIME0          (111uL)
 159:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_APERTURE_TIME1          (2uL)
 160:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_APERTURE_TIME2          (2uL)
 161:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_APERTURE_TIME3          (2uL)
 162:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_FREERUNNING             (1u)
 163:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_AVGERAGING_MODE         (1uL)
 164:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_LOW_LIMIT               (512u)
 165:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_HIGH_LIMIT              (3584u)
 166:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_RANGE_COND              (0uL)
 167:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_USE_SOC                 (0uL)
 168:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_VREF_PWR                (3uL)
 169:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_COMP_PWR                (3uL)
 170:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_COMP_DLY                (3uL)
 171:Generated_Source\PSoC6/ADC.h **** 
 172:Generated_Source\PSoC6/ADC.h **** /* Clock parameters*/
 173:Generated_Source\PSoC6/ADC.h **** #if (ADC_CLOCK_INTERNAL)
 174:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_CLOCKDIVIDER        (((CYDEV_CLK_PERICLK__HZ) / (ADC_CFG0_NOMINAL_CLOCK_FREQ))
 175:Generated_Source\PSoC6/ADC.h **** #endif /* (ADC_CLOCK_INTERNAL) */
 176:Generated_Source\PSoC6/ADC.h **** 
 177:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 178:Generated_Source\PSoC6/ADC.h **** /* End configuration 0 customizer defines                                     */
 179:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 180:Generated_Source\PSoC6/ADC.h **** 
 181:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 182:Generated_Source\PSoC6/ADC.h **** /* Begin configuration 1 customizer defines                                   */
 183:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 184:Generated_Source\PSoC6/ADC.h **** 
 185:Generated_Source\PSoC6/ADC.h **** #if(ADC_TOTAL_CONFIGS > 1)
 186:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SAMPLE_RATE             ()
 187:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_CHANNEL_BASE            (u)
 188:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_CHANNEL_COUNT           (u)
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 89
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 89
>>>>>>> Isac


 189:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_VREF_SEL_MASK           (u)
 190:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_NOMINAL_CLOCK_FREQ      (u)
 191:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_CHANNEL_EN              (u)
 192:Generated_Source\PSoC6/ADC.h **** 
 193:Generated_Source\PSoC6/ADC.h ****     /* Sample Control Register */
 194:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SINGLE_ENDED_FORMAT     (uL)
 195:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_DIFFERENTIAL_FORMAT     (uL)
 196:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SAMPLES_AVERAGED        (uL)
 197:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_RANGE_INTR_MASK         (u)
 198:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SATURATE_INTR_MASK      (u)
 199:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_VNEG_INPUT_SEL          ()
 200:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SINGLE_PRESENT          ()
 201:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_VREF_MV_VALUE           ()
 202:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_APERTURE_TIME0          (uL)
 203:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_APERTURE_TIME1          (uL)
 204:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_APERTURE_TIME2          (uL)
 205:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_APERTURE_TIME3          (uL)
 206:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_FREERUNNING             (u)
 207:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_AVGERAGING_MODE         (uL)
 208:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_LOW_LIMIT               (u)
 209:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_HIGH_LIMIT              (u)
 210:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_RANGE_COND              (uL)
 211:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_USE_SOC                 (0uL)
 212:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_VREF_PWR                (uL)
 213:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_COMP_PWR                (uL)
 214:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_COMP_DLY                (uL)
 215:Generated_Source\PSoC6/ADC.h **** 
 216:Generated_Source\PSoC6/ADC.h ****     /* Clock parameters*/
 217:Generated_Source\PSoC6/ADC.h ****     #if (ADC_CLOCK_INTERNAL)
 218:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG1_CLOCKDIVIDER        (((CYDEV_CLK_PERICLK__HZ) / (ADC_CFG1_NOMINAL_CLOCK_FR
 219:Generated_Source\PSoC6/ADC.h ****     #endif /* (ADC_CLOCK_INTERNAL) */
 220:Generated_Source\PSoC6/ADC.h **** #endif /* #if(ADC_TOTAL_CONFIGS > 1) */
 221:Generated_Source\PSoC6/ADC.h **** 
 222:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 223:Generated_Source\PSoC6/ADC.h **** /* End configuration 1 customizer defines                                     */
 224:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 225:Generated_Source\PSoC6/ADC.h **** 
 226:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 227:Generated_Source\PSoC6/ADC.h **** /* Begin configuration 2 customizer defines                                         */
 228:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 229:Generated_Source\PSoC6/ADC.h **** 
 230:Generated_Source\PSoC6/ADC.h **** #if(ADC_TOTAL_CONFIGS > 2)
 231:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SAMPLE_RATE             ()
 232:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_CHANNEL_BASE            (u)
 233:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_CHANNEL_COUNT           (u)
 234:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_VREF_SEL_MASK           (u)
 235:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_NOMINAL_CLOCK_FREQ      (u)
 236:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_CHANNEL_EN              (u)
 237:Generated_Source\PSoC6/ADC.h **** 
 238:Generated_Source\PSoC6/ADC.h ****     /* Sample Control Register */
 239:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SINGLE_ENDED_FORMAT     (uL)
 240:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_DIFFERENTIAL_FORMAT     (uL)
 241:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SAMPLES_AVERAGED        (uL)
 242:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_RANGE_INTR_MASK         (u)
 243:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SATURATE_INTR_MASK      (u)
 244:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_VNEG_INPUT_SEL          ()
 245:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SINGLE_PRESENT          ()
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 90
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 90
>>>>>>> Isac


 246:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_VREF_MV_VALUE           ()
 247:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_APERTURE_TIME0          (uL)
 248:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_APERTURE_TIME1          (uL)
 249:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_APERTURE_TIME2          (uL)
 250:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_APERTURE_TIME3          (uL)
 251:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_FREERUNNING             (u)
 252:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_AVGERAGING_MODE         (uL)
 253:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_LOW_LIMIT               (u)
 254:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_HIGH_LIMIT              (u)
 255:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_RANGE_COND              (uL)
 256:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_USE_SOC                 (0uL)
 257:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_VREF_PWR                (uL)
 258:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_COMP_PWR                (uL)
 259:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_COMP_DLY                (uL)
 260:Generated_Source\PSoC6/ADC.h **** 
 261:Generated_Source\PSoC6/ADC.h ****     /* Clock parameters*/
 262:Generated_Source\PSoC6/ADC.h ****     #if (ADC_CLOCK_INTERNAL)
 263:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG2_CLOCKDIVIDER        (((CYDEV_CLK_PERICLK__HZ) / (ADC_CFG2_NOMINAL_CLOCK_FR
 264:Generated_Source\PSoC6/ADC.h ****     #endif /* (ADC_CLOCK_INTERNAL) */
 265:Generated_Source\PSoC6/ADC.h **** #endif /* (ADC_TOTAL_CONFIGS > 2) */
 266:Generated_Source\PSoC6/ADC.h **** 
 267:Generated_Source\PSoC6/ADC.h **** 
 268:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 269:Generated_Source\PSoC6/ADC.h **** /* End configuration 2 customizer defines                                     */
 270:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 271:Generated_Source\PSoC6/ADC.h **** 
 272:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 273:Generated_Source\PSoC6/ADC.h **** /* Begin configuration 3 customizer defines                                   */
 274:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 275:Generated_Source\PSoC6/ADC.h **** #if(ADC_TOTAL_CONFIGS > 3)
 276:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SAMPLE_RATE             ()
 277:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_CHANNEL_BASE            (u)
 278:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_CHANNEL_COUNT           (u)
 279:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_VREF_SEL_MASK           (u)
 280:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_NOMINAL_CLOCK_FREQ      (u)
 281:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_CHANNEL_EN              (u)
 282:Generated_Source\PSoC6/ADC.h **** 
 283:Generated_Source\PSoC6/ADC.h ****     /* Sample Control Register */
 284:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SINGLE_ENDED_FORMAT     (uL)
 285:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_DIFFERENTIAL_FORMAT     (uL)
 286:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SAMPLES_AVERAGED        (uL)
 287:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_RANGE_INTR_MASK         (u)
 288:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SATURATE_INTR_MASK      (u)
 289:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_VNEG_INPUT_SEL          ()
 290:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SINGLE_PRESENT          ()
 291:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_VREF_MV_VALUE           ()
 292:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_APERTURE_TIME0          (uL)
 293:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_APERTURE_TIME1          (uL)
 294:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_APERTURE_TIME2          (uL)
 295:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_APERTURE_TIME3          (uL)
 296:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_FREERUNNING             (u)
 297:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_AVGERAGING_MODE         (uL)
 298:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_LOW_LIMIT               (u)
 299:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_HIGH_LIMIT              (u)
 300:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_RANGE_COND              (uL)
 301:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_USE_SOC                 (0uL)
 302:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_VREF_PWR                (uL)
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 91
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 91
>>>>>>> Isac


 303:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_COMP_PWR                (uL)
 304:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_COMP_DLY                (uL)
 305:Generated_Source\PSoC6/ADC.h **** 
 306:Generated_Source\PSoC6/ADC.h ****     /* Clock parameters*/
 307:Generated_Source\PSoC6/ADC.h ****     #if (ADC_CLOCK_INTERNAL)
 308:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG3_CLOCKDIVIDER        (((CYDEV_CLK_PERICLK__HZ) / (ADC_CFG3_NOMINAL_CLOCK_FR
 309:Generated_Source\PSoC6/ADC.h ****     #endif /* (ADC_CLOCK_INTERNAL) */
 310:Generated_Source\PSoC6/ADC.h **** #endif /* (ADC_TOTAL_CONFIGS > 3) */
 311:Generated_Source\PSoC6/ADC.h **** 
 312:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 313:Generated_Source\PSoC6/ADC.h **** /* End configuration 3 customizer defines                                     */
 314:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 315:Generated_Source\PSoC6/ADC.h **** 
 316:Generated_Source\PSoC6/ADC.h **** #define ADC_DEFAULT_SAMPLE_MODE_SEL      (0u)
 317:Generated_Source\PSoC6/ADC.h **** #define ADC_FREERUNNING                  (1u)
 318:Generated_Source\PSoC6/ADC.h **** #define ADC_HARDWARESOC                  (1u)
 319:Generated_Source\PSoC6/ADC.h **** #define ADC_NEG_SEL_VSSA_KELVIN          (0x0uL)
 320:Generated_Source\PSoC6/ADC.h **** #define ADC_NEG_SEL_VREF                 (0x7uL)
 321:Generated_Source\PSoC6/ADC.h **** #define ADC_PWR_CTRL_VREF_NORMAL_PWR     (0x0uL)
 322:Generated_Source\PSoC6/ADC.h **** 
 323:Generated_Source\PSoC6/ADC.h **** /** ADC_TOTAL_CHANNELS_NUM
 324:Generated_Source\PSoC6/ADC.h **** * This constant represents the number of input channels available for scanning.
 325:Generated_Source\PSoC6/ADC.h **** */
 326:Generated_Source\PSoC6/ADC.h **** #define ADC_TOTAL_CHANNELS_NUM           (1u)
 327:Generated_Source\PSoC6/ADC.h **** 
 328:Generated_Source\PSoC6/ADC.h **** /*******************************************************************************
 329:Generated_Source\PSoC6/ADC.h **** *    Variables with External Linkage
 330:Generated_Source\PSoC6/ADC.h **** *******************************************************************************/
 331:Generated_Source\PSoC6/ADC.h **** /**
 332:Generated_Source\PSoC6/ADC.h **** * \addtogroup group_globals
 333:Generated_Source\PSoC6/ADC.h **** * Globals are noted in the descriptions of the functions that use globals.
 334:Generated_Source\PSoC6/ADC.h **** * They are marked with (R), (W), or (RW) noting whether the variable is read,
 335:Generated_Source\PSoC6/ADC.h **** * write, or read/write.
 336:Generated_Source\PSoC6/ADC.h **** * @{
 337:Generated_Source\PSoC6/ADC.h **** */
 338:Generated_Source\PSoC6/ADC.h **** 
 339:Generated_Source\PSoC6/ADC.h **** /** ADC_initVar
 340:Generated_Source\PSoC6/ADC.h **** * The ADC_initVar variable is used to indicate
 341:Generated_Source\PSoC6/ADC.h **** * initial configuration of this component. The variable is initialized to zero and
 342:Generated_Source\PSoC6/ADC.h **** * set to 1 the first time ADC_Start() is called. This allows for
 343:Generated_Source\PSoC6/ADC.h **** * component initialization without reinitialization in all subsequent calls to the
 344:Generated_Source\PSoC6/ADC.h **** * ADC_Start() routine.
 345:Generated_Source\PSoC6/ADC.h **** *
 346:Generated_Source\PSoC6/ADC.h **** * If reinitialization of the component is required, then the ADC_Init() function
 347:Generated_Source\PSoC6/ADC.h **** * can be called before the ADC_Start() or ADC_Enable()
 348:Generated_Source\PSoC6/ADC.h **** * functions.
 349:Generated_Source\PSoC6/ADC.h **** */
 350:Generated_Source\PSoC6/ADC.h **** extern uint8_t ADC_initVar;
 351:Generated_Source\PSoC6/ADC.h **** extern uint8_t ADC_selected;
 352:Generated_Source\PSoC6/ADC.h **** extern uint32_t ADC_currentConfig;
 353:Generated_Source\PSoC6/ADC.h **** 
 354:Generated_Source\PSoC6/ADC.h **** #define ADC_INIT_VAR_INIT_FLAG     (0x01u)
 355:Generated_Source\PSoC6/ADC.h **** 
 356:Generated_Source\PSoC6/ADC.h **** extern const ADC_CONFIG_STRUCT ADC_allConfigs[ADC_TOTAL_CONFIGS];
 357:Generated_Source\PSoC6/ADC.h **** 
 358:Generated_Source\PSoC6/ADC.h **** /* SysPm callback structure for deep sleep entry and exit.
 359:Generated_Source\PSoC6/ADC.h ****  * Call the Cy_SysPm_RegisterCallback function with this
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 92
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 92
>>>>>>> Isac


 360:Generated_Source\PSoC6/ADC.h ****  * structure before calling Cy_SysPm_DeepSleep.
 361:Generated_Source\PSoC6/ADC.h **** */
 362:Generated_Source\PSoC6/ADC.h **** extern cy_stc_syspm_callback_t ADC_DeepSleepCallbackStruct;
 363:Generated_Source\PSoC6/ADC.h **** 
 364:Generated_Source\PSoC6/ADC.h **** /** @} globals */
 365:Generated_Source\PSoC6/ADC.h **** 
 366:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 367:Generated_Source\PSoC6/ADC.h **** /* *******************Global MUX_SWITCH0 Definitions ************************ */
 368:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 369:Generated_Source\PSoC6/ADC.h **** #if(ADC_CFG0_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN)
 370:Generated_Source\PSoC6/ADC.h ****     /* Do not connect VSSA to VMINUS when one channel in differential mode used */
 371:Generated_Source\PSoC6/ADC.h ****     #if((ADC_TOTAL_CHANNELS_NUM == 1u) && (ADC_CFG0_SINGLE_PRESENT == 0u))
 372:Generated_Source\PSoC6/ADC.h ****         #define ADC_MUX_SWITCH0_INIT      0u
 373:Generated_Source\PSoC6/ADC.h ****     #else    /* multiple channels or one single ended channel */
 374:Generated_Source\PSoC6/ADC.h ****         #define ADC_MUX_SWITCH0_INIT      1u
 375:Generated_Source\PSoC6/ADC.h ****     #endif /* ((ADC_TOTAL_CHANNELS_NUM == 1u) && (ADC_CFG0_SINGLE_PRESENT == 0u)) */
 376:Generated_Source\PSoC6/ADC.h **** #else
 377:Generated_Source\PSoC6/ADC.h ****     #define ADC_MUX_SWITCH0_INIT          0u
 378:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_CFG0_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN */
 379:Generated_Source\PSoC6/ADC.h **** 
 380:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 381:Generated_Source\PSoC6/ADC.h **** /* Begin configuration 0 calculated defines                                   */
 382:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 383:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SAMPLE_TIME01_INIT \
 384:Generated_Source\PSoC6/ADC.h ****         ((ADC_CFG0_APERTURE_TIME0 \
 385:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos) \
 386:Generated_Source\PSoC6/ADC.h ****         | (ADC_CFG0_APERTURE_TIME1 \
 387:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_TIME01_SAMPLE_TIME1_Pos))
 388:Generated_Source\PSoC6/ADC.h **** 
 389:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SAMPLE_TIME23_INIT \
 390:Generated_Source\PSoC6/ADC.h ****         ((ADC_CFG0_APERTURE_TIME2 \
 391:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_TIME23_SAMPLE_TIME2_Pos) \
 392:Generated_Source\PSoC6/ADC.h ****         | (ADC_CFG0_APERTURE_TIME3 \
 393:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_TIME23_SAMPLE_TIME3_Pos))
 394:Generated_Source\PSoC6/ADC.h **** 
 395:Generated_Source\PSoC6/ADC.h **** /* Enable soc pin if used */
 396:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_DSI_TRIGGER_EN_INIT \
 397:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_USE_SOC \
 398:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Pos)
 399:Generated_Source\PSoC6/ADC.h **** 
 400:Generated_Source\PSoC6/ADC.h **** /* Set soc operation to edge or level based on sample mode */
 401:Generated_Source\PSoC6/ADC.h **** #if(ADC_CFG0_FREERUNNING == ADC_FREERUNNING)
 402:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_DSI_TRIGGER_LEVEL_INIT    (SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk)
 403:Generated_Source\PSoC6/ADC.h **** #else /* Edge trigger */
 404:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_DSI_TRIGGER_LEVEL_INIT    (0u)
 405:Generated_Source\PSoC6/ADC.h **** #endif /* End ADC_CFG0_FREERUNNING == ADC_FREERUNNING */
 406:Generated_Source\PSoC6/ADC.h **** 
 407:Generated_Source\PSoC6/ADC.h **** /* Set SE_NEG_INPUT */
 408:Generated_Source\PSoC6/ADC.h **** #if(ADC_CFG0_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN)
 409:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_SE_NEG_INPUT_INIT \
 410:Generated_Source\PSoC6/ADC.h ****             ((uint32)(ADC_NEG_SEL_VSSA_KELVIN \
 411:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_NEG_SEL_Pos ))
 412:Generated_Source\PSoC6/ADC.h **** #elif(ADC_CFG0_VNEG_INPUT_SEL == ADC_NEG_SEL_VREF)
 413:Generated_Source\PSoC6/ADC.h **** 
 414:Generated_Source\PSoC6/ADC.h ****     /* Do not connect VNEG to VREF when one channel in differential mode used */
 415:Generated_Source\PSoC6/ADC.h ****     /* Only needed for config 0 since 2+ configs == 2+ channels */
 416:Generated_Source\PSoC6/ADC.h ****     #if((ADC_CFG0_CHANNEL_COUNT == 1u) && (ADC_CFG0_SINGLE_PRESENT == 0u))
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 93
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 93
>>>>>>> Isac


 417:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG0_SE_NEG_INPUT_INIT     0u
 418:Generated_Source\PSoC6/ADC.h ****     #else    /* multiple channels or one single channel */
 419:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG0_SE_NEG_INPUT_INIT     (ADC_NEG_SEL_VREF \
 420:Generated_Source\PSoC6/ADC.h ****                                                             << SAR_CTRL_NEG_SEL_Pos )
 421:Generated_Source\PSoC6/ADC.h ****     #endif /* (ADC_CFG0_CHANNEL_COUNT == 1u) && (ADC_CFG0_CHANNELS_MODE != 0u) */
 422:Generated_Source\PSoC6/ADC.h **** #elif (ADC_CFG0_SINGLE_PRESENT != 0u)
 423:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_SE_NEG_INPUT_INIT         ADC_CFG0_NEG_OTHER
 424:Generated_Source\PSoC6/ADC.h **** #else
 425:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_SE_NEG_INPUT_INIT         0u
 426:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_CFG0_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN */
 427:Generated_Source\PSoC6/ADC.h **** 
 428:Generated_Source\PSoC6/ADC.h **** #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 429:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_NEG_OTHER                 (uint16)((uint16)ADC_SARMUX__VNEG0 << SAR_CTRL_NEG_S
 430:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_SWITCH_CONF_INIT          0u
 431:Generated_Source\PSoC6/ADC.h **** #else /* Disable SAR sequencer from enabling routing switches in single channel mode */
 432:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_SWITCH_CONF_INIT          SAR_CTRL_SWITCH_DISABLE_Msk
 433:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_NEG_OTHER                 0u
 434:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_CFG0_CHANNEL_COUNT > 1u */
 435:Generated_Source\PSoC6/ADC.h **** 
 436:Generated_Source\PSoC6/ADC.h **** /* If the SAR is configured for multiple channels, always set SAR_HW_CTRL_NEGVREF to 1 */
 437:Generated_Source\PSoC6/ADC.h **** #if(ADC_TOTAL_CHANNELS_NUM == 1u)
 438:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_HW_CTRL_NEGVREF_INIT      0u
 439:Generated_Source\PSoC6/ADC.h **** #else
 440:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG0_HW_CTRL_NEGVREF_INIT      SAR_CTRL_SAR_HW_CTRL_NEGVREF_Msk
 441:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_CFG0_CHANNEL_COUNT == 1u */
 442:Generated_Source\PSoC6/ADC.h **** 
 443:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_POWER_INIT  (ADC_PWR_CTRL_VREF_NORMAL_PWR)
 444:Generated_Source\PSoC6/ADC.h **** 
 445:Generated_Source\PSoC6/ADC.h **** /* SAMPLE_CTRL initial values */
 446:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SE_RESULT_FORMAT_INIT \
 447:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_SINGLE_ENDED_FORMAT \
 448:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos)
 449:Generated_Source\PSoC6/ADC.h **** 
 450:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_DIFF_RESULT_FORMAT_INIT \
 451:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_DIFFERENTIAL_FORMAT \
 452:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos)
 453:Generated_Source\PSoC6/ADC.h **** 
 454:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_AVG_SAMPLES_NUM_INIT \
 455:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_SAMPLES_AVERAGED \
 456:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_CTRL_AVG_CNT_Pos)
 457:Generated_Source\PSoC6/ADC.h **** 
 458:Generated_Source\PSoC6/ADC.h **** /* Combination of Average Mode and Average Shift */
 459:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_AVG_MODE_INIT \
 460:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_AVGERAGING_MODE \
 461:Generated_Source\PSoC6/ADC.h ****         << SAR_SAMPLE_CTRL_AVG_SHIFT_Pos)
 462:Generated_Source\PSoC6/ADC.h **** 
 463:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_TRIGGER_OUT_INIT      (0u)
 464:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_UAB_SCAN_MODE_INIT    (0u)
 465:Generated_Source\PSoC6/ADC.h **** 
 466:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_VREF_POWER_INIT  \
 467:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_VREF_PWR \
 468:Generated_Source\PSoC6/ADC.h ****         << SAR_CTRL_PWR_CTRL_VREF_Pos)
 469:Generated_Source\PSoC6/ADC.h **** 
 470:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_COMP_PWR_INIT  \
 471:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_COMP_PWR \
 472:Generated_Source\PSoC6/ADC.h ****         << SAR_CTRL_COMP_PWR_Pos)
 473:Generated_Source\PSoC6/ADC.h **** 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 94
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 94
>>>>>>> Isac


 474:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_COMP_DLY_INIT  \
 475:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_COMP_DLY \
 476:Generated_Source\PSoC6/ADC.h ****         << SAR_CTRL_COMP_DLY_Pos)
 477:Generated_Source\PSoC6/ADC.h **** 
 478:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_CTRL_INIT  \
 479:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_VREF_POWER_INIT \
 480:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_VREF_SEL_MASK \
 481:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_SE_NEG_INPUT_INIT \
 482:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_HW_CTRL_NEGVREF_INIT \
 483:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_COMP_DLY_INIT \
 484:Generated_Source\PSoC6/ADC.h ****         | SAR_CTRL_REFBUF_EN_Msk \
 485:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_COMP_PWR_INIT \
 486:Generated_Source\PSoC6/ADC.h ****         | SAR_CTRL_DSI_SYNC_CONFIG_Msk  \
 487:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_SWITCH_CONF_INIT )
 488:Generated_Source\PSoC6/ADC.h **** 
 489:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_SAMPLE_CTRL_INIT \
 490:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_SE_RESULT_FORMAT_INIT \
 491:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_DIFF_RESULT_FORMAT_INIT \
 492:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_AVG_SAMPLES_NUM_INIT \
 493:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_AVG_MODE_INIT \
 494:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_DSI_TRIGGER_LEVEL_INIT \
 495:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_DSI_TRIGGER_EN_INIT \
 496:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_UAB_SCAN_MODE_INIT \
 497:Generated_Source\PSoC6/ADC.h ****         | SAR_SAMPLE_CTRL_VALID_IGNORE_Msk \
 498:Generated_Source\PSoC6/ADC.h ****         | ADC_CFG0_TRIGGER_OUT_INIT \
 499:Generated_Source\PSoC6/ADC.h ****         | SAR_SAMPLE_CTRL_EOS_DSI_OUT_EN_Msk \
 500:Generated_Source\PSoC6/ADC.h **** )
 501:Generated_Source\PSoC6/ADC.h **** 
 502:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_RANGE_THRES_INIT \
 503:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_LOW_LIMIT \
 504:Generated_Source\PSoC6/ADC.h ****         | (uint32)((uint32)ADC_CFG0_HIGH_LIMIT \
 505:Generated_Source\PSoC6/ADC.h ****         << SAR_RANGE_THRES_RANGE_HIGH_Pos))
 506:Generated_Source\PSoC6/ADC.h **** 
 507:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_RANGE_COND_INIT   (cy_en_sar_range_detect_condition_t)ADC_CFG0_RANGE_COND
 508:Generated_Source\PSoC6/ADC.h **** 
 509:Generated_Source\PSoC6/ADC.h **** /* Misc Config
 510:Generated_Source\PSoC6/ADC.h ****     [0] - Freerunning: Set if the sample mode is freerunning
 511:Generated_Source\PSoC6/ADC.h **** */
 512:Generated_Source\PSoC6/ADC.h **** #define ADC_CFG0_MISC_CONFIG_INIT \
 513:Generated_Source\PSoC6/ADC.h ****         (ADC_CFG0_FREERUNNING)
 514:Generated_Source\PSoC6/ADC.h **** 
 515:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 516:Generated_Source\PSoC6/ADC.h **** /* End configuration 0 calculated defines                                     */
 517:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 518:Generated_Source\PSoC6/ADC.h **** 
 519:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 520:Generated_Source\PSoC6/ADC.h **** /* Begin configuration 1 calculated defines                                   */
 521:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 522:Generated_Source\PSoC6/ADC.h **** #if(ADC_TOTAL_CONFIGS > 1)
 523:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SAMPLE_TIME01_INIT \
 524:Generated_Source\PSoC6/ADC.h ****             ((ADC_CFG1_APERTURE_TIME0 \
 525:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos) \
 526:Generated_Source\PSoC6/ADC.h ****             | (ADC_CFG1_APERTURE_TIME1 \
 527:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME1_Pos))
 528:Generated_Source\PSoC6/ADC.h **** 
 529:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SAMPLE_TIME23_INIT \
 530:Generated_Source\PSoC6/ADC.h ****             ((ADC_CFG1_APERTURE_TIME2 \
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 95
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 95
>>>>>>> Isac


 531:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME2_Pos) \
 532:Generated_Source\PSoC6/ADC.h ****             | (ADC_CFG1_APERTURE_TIME3 \
 533:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME3_Pos))
 534:Generated_Source\PSoC6/ADC.h **** 
 535:Generated_Source\PSoC6/ADC.h ****     /* Enable soc pin if used */
 536:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_DSI_TRIGGER_EN_INIT \
 537:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_USE_SOC \
 538:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Pos)
 539:Generated_Source\PSoC6/ADC.h **** 
 540:Generated_Source\PSoC6/ADC.h ****     /* Set soc operation to edge or level based on sample mode */
 541:Generated_Source\PSoC6/ADC.h ****     #if(ADC_CFG1_FREERUNNING == ADC_FREERUNNING)
 542:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG1_DSI_TRIGGER_LEVEL_INIT    (SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk)
 543:Generated_Source\PSoC6/ADC.h ****     #else /* Edge trigger */
 544:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG1_DSI_TRIGGER_LEVEL_INIT    (0u)
 545:Generated_Source\PSoC6/ADC.h ****     #endif /* End ADC_CFG1_FREERUNNING == ADC_FREERUNNING */
 546:Generated_Source\PSoC6/ADC.h **** 
 547:Generated_Source\PSoC6/ADC.h ****     /* Set SE_NEG_INPUT */
 548:Generated_Source\PSoC6/ADC.h ****     #if(ADC_CFG1_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN)
 549:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG1_SE_NEG_INPUT_INIT \
 550:Generated_Source\PSoC6/ADC.h ****             ((uint32)(ADC_NEG_SEL_VSSA_KELVIN \
 551:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_NEG_SEL_Pos ))
 552:Generated_Source\PSoC6/ADC.h ****     #elif(ADC_CFG1_VNEG_INPUT_SEL == ADC_NEG_SEL_VREF)
 553:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG1_SE_NEG_INPUT_INIT     (ADC_NEG_SEL_VREF \
 554:Generated_Source\PSoC6/ADC.h ****                                                             << SAR_CTRL_NEG_SEL_Pos )
 555:Generated_Source\PSoC6/ADC.h ****     #elif (ADC_CFG1_SINGLE_PRESENT != 0u)
 556:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG1_SE_NEG_INPUT_INIT         ADC_CFG1_NEG_OTHER
 557:Generated_Source\PSoC6/ADC.h ****     #else
 558:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG1_SE_NEG_INPUT_INIT         0u
 559:Generated_Source\PSoC6/ADC.h ****     #endif /* ADC_CFG1_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN */
 560:Generated_Source\PSoC6/ADC.h **** 
 561:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_NEG_OTHER                 (uint16)((uint16)ADC_SARMUX__VNEG1 << SAR_CTRL_NEG_S
 562:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SWITCH_CONF_INIT          0u
 563:Generated_Source\PSoC6/ADC.h **** 
 564:Generated_Source\PSoC6/ADC.h ****     /* If the SAR is configured for multiple channels, always set SAR_HW_CTRL_NEGVREF to 1 */
 565:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_HW_CTRL_NEGVREF_INIT      SAR_CTRL_SAR_HW_CTRL_NEGVREF_Msk
 566:Generated_Source\PSoC6/ADC.h **** 
 567:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_POWER_INIT  (ADC_PWR_CTRL_VREF_NORMAL_PWR)
 568:Generated_Source\PSoC6/ADC.h **** 
 569:Generated_Source\PSoC6/ADC.h ****     /* SAMPLE_CTRL initial values */
 570:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SE_RESULT_FORMAT_INIT \
 571:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_SINGLE_ENDED_FORMAT \
 572:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos)
 573:Generated_Source\PSoC6/ADC.h **** 
 574:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_DIFF_RESULT_FORMAT_INIT \
 575:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_DIFFERENTIAL_FORMAT \
 576:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos)
 577:Generated_Source\PSoC6/ADC.h **** 
 578:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_AVG_SAMPLES_NUM_INIT \
 579:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_SAMPLES_AVERAGED \
 580:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_AVG_CNT_Pos)
 581:Generated_Source\PSoC6/ADC.h **** 
 582:Generated_Source\PSoC6/ADC.h ****     /* Combination of Average Mode and Average Shift */
 583:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_AVG_MODE_INIT \
 584:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_AVGERAGING_MODE \
 585:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_AVG_SHIFT_Pos)
 586:Generated_Source\PSoC6/ADC.h **** 
 587:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_TRIGGER_OUT_INIT      (0u)
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 96
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 96
>>>>>>> Isac


 588:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_UAB_SCAN_MODE_INIT    (0u)
 589:Generated_Source\PSoC6/ADC.h **** 
 590:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_VREF_POWER_INIT  \
 591:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_VREF_PWR \
 592:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_PWR_CTRL_VREF_Pos)
 593:Generated_Source\PSoC6/ADC.h **** 
 594:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_COMP_PWR_INIT  \
 595:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_COMP_PWR \
 596:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_COMP_PWR_Pos)
 597:Generated_Source\PSoC6/ADC.h **** 
 598:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_COMP_DLY_INIT  \
 599:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_COMP_DLY \
 600:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_COMP_DLY_Pos)
 601:Generated_Source\PSoC6/ADC.h **** 
 602:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_CTRL_INIT  \
 603:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_VREF_POWER_INIT \
 604:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_VREF_SEL_MASK \
 605:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_SE_NEG_INPUT_INIT \
 606:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_HW_CTRL_NEGVREF_INIT \
 607:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_COMP_DLY_INIT \
 608:Generated_Source\PSoC6/ADC.h ****             | SAR_CTRL_REFBUF_EN_Msk \
 609:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_COMP_PWR_INIT \
 610:Generated_Source\PSoC6/ADC.h ****             | SAR_CTRL_DSI_SYNC_CONFIG_Msk  \
 611:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_SWITCH_CONF_INIT )
 612:Generated_Source\PSoC6/ADC.h **** 
 613:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_SAMPLE_CTRL_INIT \
 614:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_SE_RESULT_FORMAT_INIT \
 615:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_DIFF_RESULT_FORMAT_INIT \
 616:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_AVG_SAMPLES_NUM_INIT \
 617:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_AVG_MODE_INIT \
 618:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_DSI_TRIGGER_LEVEL_INIT \
 619:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_DSI_TRIGGER_EN_INIT \
 620:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_UAB_SCAN_MODE_INIT \
 621:Generated_Source\PSoC6/ADC.h ****             | SAR_SAMPLE_CTRL_VALID_IGNORE_Msk \
 622:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG1_TRIGGER_OUT_INIT \
 623:Generated_Source\PSoC6/ADC.h ****             | SAR_SAMPLE_CTRL_EOS_DSI_OUT_EN_Msk \
 624:Generated_Source\PSoC6/ADC.h ****     )
 625:Generated_Source\PSoC6/ADC.h **** 
 626:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_RANGE_THRES_INIT \
 627:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_LOW_LIMIT \
 628:Generated_Source\PSoC6/ADC.h ****             | (uint32)((uint32)ADC_CFG1_HIGH_LIMIT \
 629:Generated_Source\PSoC6/ADC.h ****             << SAR_RANGE_THRES_RANGE_HIGH_Pos))
 630:Generated_Source\PSoC6/ADC.h **** 
 631:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_RANGE_COND_INIT   (cy_en_sar_range_detect_condition_t)ADC_CFG1_RANGE_COND
 632:Generated_Source\PSoC6/ADC.h **** 
 633:Generated_Source\PSoC6/ADC.h ****     /* Misc Config
 634:Generated_Source\PSoC6/ADC.h ****         [0] - Freerunning: Set if the sample mode is freerunning
 635:Generated_Source\PSoC6/ADC.h ****     */
 636:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG1_MISC_CONFIG_INIT \
 637:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG1_FREERUNNING)
 638:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_TOTAL_CONFIGS > 1 */
 639:Generated_Source\PSoC6/ADC.h **** 
 640:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 641:Generated_Source\PSoC6/ADC.h **** /* End configuration 1 calculated defines                                     */
 642:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 643:Generated_Source\PSoC6/ADC.h **** 
 644:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 97
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 97
>>>>>>> Isac


 645:Generated_Source\PSoC6/ADC.h **** /* Begin configuration 2 calculated defines                                   */
 646:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 647:Generated_Source\PSoC6/ADC.h **** #if(ADC_TOTAL_CONFIGS > 2)
 648:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SAMPLE_TIME01_INIT \
 649:Generated_Source\PSoC6/ADC.h ****             ((ADC_CFG2_APERTURE_TIME0 \
 650:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos) \
 651:Generated_Source\PSoC6/ADC.h ****             | (ADC_CFG2_APERTURE_TIME1 \
 652:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME1_Pos))
 653:Generated_Source\PSoC6/ADC.h **** 
 654:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SAMPLE_TIME23_INIT \
 655:Generated_Source\PSoC6/ADC.h ****             ((ADC_CFG2_APERTURE_TIME2 \
 656:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME2_Pos) \
 657:Generated_Source\PSoC6/ADC.h ****             | (ADC_CFG2_APERTURE_TIME3 \
 658:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME3_Pos))
 659:Generated_Source\PSoC6/ADC.h **** 
 660:Generated_Source\PSoC6/ADC.h ****     /* Enable soc pin if used */
 661:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_DSI_TRIGGER_EN_INIT \
 662:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_USE_SOC \
 663:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Pos)
 664:Generated_Source\PSoC6/ADC.h **** 
 665:Generated_Source\PSoC6/ADC.h ****     /* Set soc operation to edge or level based on sample mode */
 666:Generated_Source\PSoC6/ADC.h ****     #if(ADC_CFG2_FREERUNNING == ADC_FREERUNNING)
 667:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG2_DSI_TRIGGER_LEVEL_INIT    (SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk)
 668:Generated_Source\PSoC6/ADC.h ****     #else /* Edge trigger */
 669:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG2_DSI_TRIGGER_LEVEL_INIT    (0u)
 670:Generated_Source\PSoC6/ADC.h ****     #endif /* End ADC_CFG2_FREERUNNING == ADC_FREERUNNING */
 671:Generated_Source\PSoC6/ADC.h **** 
 672:Generated_Source\PSoC6/ADC.h ****     /* Set SE_NEG_INPUT */
 673:Generated_Source\PSoC6/ADC.h ****     #if(ADC_CFG2_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN)
 674:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG2_SE_NEG_INPUT_INIT \
 675:Generated_Source\PSoC6/ADC.h ****             ((uint32)(ADC_NEG_SEL_VSSA_KELVIN \
 676:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_NEG_SEL_Pos ))
 677:Generated_Source\PSoC6/ADC.h ****     #elif(ADC_CFG2_VNEG_INPUT_SEL == ADC_NEG_SEL_VREF)
 678:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG2_SE_NEG_INPUT_INIT     (ADC_NEG_SEL_VREF \
 679:Generated_Source\PSoC6/ADC.h ****                                                                 << SAR_CTRL_NEG_SEL_Pos )
 680:Generated_Source\PSoC6/ADC.h ****     #elif (ADC_CFG2_SINGLE_PRESENT != 0u)
 681:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG2_SE_NEG_INPUT_INIT         ADC_CFG2_NEG_OTHER
 682:Generated_Source\PSoC6/ADC.h ****     #else
 683:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG2_SE_NEG_INPUT_INIT         0u
 684:Generated_Source\PSoC6/ADC.h ****     #endif /* ADC_CFG2_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN */
 685:Generated_Source\PSoC6/ADC.h **** 
 686:Generated_Source\PSoC6/ADC.h ****    #define ADC_CFG2_NEG_OTHER                 (uint16)((uint16)ADC_SARMUX__VNEG2 << SAR_CTRL_NEG_SE
 687:Generated_Source\PSoC6/ADC.h **** 
 688:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SWITCH_CONF_INIT          0u
 689:Generated_Source\PSoC6/ADC.h **** 
 690:Generated_Source\PSoC6/ADC.h ****     /* If the SAR is configured for multiple channels, always set SAR_HW_CTRL_NEGVREF to 1 */
 691:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_HW_CTRL_NEGVREF_INIT      SAR_CTRL_SAR_HW_CTRL_NEGVREF_Msk
 692:Generated_Source\PSoC6/ADC.h **** 
 693:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_POWER_INIT  (ADC_PWR_CTRL_VREF_NORMAL_PWR)
 694:Generated_Source\PSoC6/ADC.h **** 
 695:Generated_Source\PSoC6/ADC.h ****     /* SAMPLE_CTRL initial values */
 696:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SE_RESULT_FORMAT_INIT \
 697:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_SINGLE_ENDED_FORMAT \
 698:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos)
 699:Generated_Source\PSoC6/ADC.h **** 
 700:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_DIFF_RESULT_FORMAT_INIT \
 701:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_DIFFERENTIAL_FORMAT \
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 98
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 98
>>>>>>> Isac


 702:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos)
 703:Generated_Source\PSoC6/ADC.h **** 
 704:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_AVG_SAMPLES_NUM_INIT \
 705:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_SAMPLES_AVERAGED \
 706:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_AVG_CNT_Pos)
 707:Generated_Source\PSoC6/ADC.h **** 
 708:Generated_Source\PSoC6/ADC.h ****     /* Combination of Average Mode and Average Shift */
 709:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_AVG_MODE_INIT \
 710:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_AVGERAGING_MODE \
 711:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_AVG_SHIFT_Pos)
 712:Generated_Source\PSoC6/ADC.h **** 
 713:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_TRIGGER_OUT_INIT      (0u)
 714:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_UAB_SCAN_MODE_INIT    (0u)
 715:Generated_Source\PSoC6/ADC.h **** 
 716:Generated_Source\PSoC6/ADC.h **** 
 717:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_VREF_POWER_INIT  \
 718:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_VREF_PWR \
 719:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_PWR_CTRL_VREF_Pos)
 720:Generated_Source\PSoC6/ADC.h **** 
 721:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_COMP_PWR_INIT  \
 722:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_COMP_PWR \
 723:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_COMP_PWR_Pos)
 724:Generated_Source\PSoC6/ADC.h **** 
 725:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_COMP_DLY_INIT  \
 726:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_COMP_DLY \
 727:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_COMP_DLY_Pos)
 728:Generated_Source\PSoC6/ADC.h **** 
 729:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_CTRL_INIT  \
 730:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_VREF_POWER_INIT \
 731:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_VREF_SEL_MASK \
 732:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_SE_NEG_INPUT_INIT \
 733:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_HW_CTRL_NEGVREF_INIT \
 734:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_COMP_DLY_INIT \
 735:Generated_Source\PSoC6/ADC.h ****             | SAR_CTRL_REFBUF_EN_Msk \
 736:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_COMP_PWR_INIT \
 737:Generated_Source\PSoC6/ADC.h ****             | SAR_CTRL_DSI_SYNC_CONFIG_Msk  \
 738:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_SWITCH_CONF_INIT )
 739:Generated_Source\PSoC6/ADC.h **** 
 740:Generated_Source\PSoC6/ADC.h **** 
 741:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_SAMPLE_CTRL_INIT \
 742:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_SE_RESULT_FORMAT_INIT \
 743:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_DIFF_RESULT_FORMAT_INIT \
 744:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_AVG_SAMPLES_NUM_INIT \
 745:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_AVG_MODE_INIT \
 746:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_DSI_TRIGGER_LEVEL_INIT \
 747:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_DSI_TRIGGER_EN_INIT \
 748:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_UAB_SCAN_MODE_INIT \
 749:Generated_Source\PSoC6/ADC.h ****             | SAR_SAMPLE_CTRL_VALID_IGNORE_Msk \
 750:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG2_TRIGGER_OUT_INIT \
 751:Generated_Source\PSoC6/ADC.h ****             | SAR_SAMPLE_CTRL_EOS_DSI_OUT_EN_Msk \
 752:Generated_Source\PSoC6/ADC.h ****     )
 753:Generated_Source\PSoC6/ADC.h **** 
 754:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_RANGE_THRES_INIT \
 755:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_LOW_LIMIT \
 756:Generated_Source\PSoC6/ADC.h ****             | (uint32)((uint32)ADC_CFG2_HIGH_LIMIT \
 757:Generated_Source\PSoC6/ADC.h ****             << SAR_RANGE_THRES_RANGE_HIGH_Pos))
 758:Generated_Source\PSoC6/ADC.h **** 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 99
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 99
>>>>>>> Isac


 759:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_RANGE_COND_INIT   (cy_en_sar_range_detect_condition_t)ADC_CFG2_RANGE_COND
 760:Generated_Source\PSoC6/ADC.h **** 
 761:Generated_Source\PSoC6/ADC.h ****     /* Misc Config
 762:Generated_Source\PSoC6/ADC.h ****         [0] - Freerunning: Set if the sample mode is freerunning
 763:Generated_Source\PSoC6/ADC.h ****     */
 764:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG2_MISC_CONFIG_INIT \
 765:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG2_FREERUNNING)
 766:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_TOTAL_CONFIGS > 2 */
 767:Generated_Source\PSoC6/ADC.h **** 
 768:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 769:Generated_Source\PSoC6/ADC.h **** /* End configuration 2 calculated defines                                     */
 770:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 771:Generated_Source\PSoC6/ADC.h **** 
 772:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 773:Generated_Source\PSoC6/ADC.h **** /* Begin configuration 3 calculated defines                                   */
 774:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 775:Generated_Source\PSoC6/ADC.h **** #if(ADC_TOTAL_CONFIGS > 3)
 776:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SAMPLE_TIME01_INIT \
 777:Generated_Source\PSoC6/ADC.h ****             ((ADC_CFG3_APERTURE_TIME0 \
 778:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos) \
 779:Generated_Source\PSoC6/ADC.h ****             | (ADC_CFG3_APERTURE_TIME1 \
 780:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME1_Pos))
 781:Generated_Source\PSoC6/ADC.h **** 
 782:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SAMPLE_TIME23_INIT \
 783:Generated_Source\PSoC6/ADC.h ****             ((ADC_CFG3_APERTURE_TIME2 \
 784:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME2_Pos) \
 785:Generated_Source\PSoC6/ADC.h ****             | (ADC_CFG3_APERTURE_TIME3 \
 786:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME3_Pos))
 787:Generated_Source\PSoC6/ADC.h **** 
 788:Generated_Source\PSoC6/ADC.h ****     /* Enable soc pin if used */
 789:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_DSI_TRIGGER_EN_INIT \
 790:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_USE_SOC \
 791:Generated_Source\PSoC6/ADC.h ****              << SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Pos)
 792:Generated_Source\PSoC6/ADC.h **** 
 793:Generated_Source\PSoC6/ADC.h ****     /* Set soc operation to edge or level based on sample mode */
 794:Generated_Source\PSoC6/ADC.h ****     #if(ADC_CFG3_FREERUNNING == ADC_FREERUNNING)
 795:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG3_DSI_TRIGGER_LEVEL_INIT    (SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk)
 796:Generated_Source\PSoC6/ADC.h ****     #else /* Edge trigger */
 797:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG3_DSI_TRIGGER_LEVEL_INIT    (0u)
 798:Generated_Source\PSoC6/ADC.h ****     #endif /* End ADC_CFG3_FREERUNNING == ADC_FREERUNNING */
 799:Generated_Source\PSoC6/ADC.h **** 
 800:Generated_Source\PSoC6/ADC.h ****     /* Set SE_NEG_INPUT  */
 801:Generated_Source\PSoC6/ADC.h ****     #if(ADC_CFG3_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN)
 802:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG3_SE_NEG_INPUT_INIT \
 803:Generated_Source\PSoC6/ADC.h ****             ((uint32)(ADC_NEG_SEL_VSSA_KELVIN \
 804:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_NEG_SEL_Pos ))
 805:Generated_Source\PSoC6/ADC.h ****     #elif(ADC_CFG3_VNEG_INPUT_SEL == ADC_NEG_SEL_VREF)
 806:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG3_SE_NEG_INPUT_INIT     (ADC_NEG_SEL_VREF \
 807:Generated_Source\PSoC6/ADC.h ****                                                                 << SAR_CTRL_NEG_SEL_Pos )
 808:Generated_Source\PSoC6/ADC.h ****     #elif (ADC_CFG3_SINGLE_PRESENT != 0u)
 809:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG3_SE_NEG_INPUT_INIT         ADC_CFG3_NEG_OTHER
 810:Generated_Source\PSoC6/ADC.h ****     #else
 811:Generated_Source\PSoC6/ADC.h ****         #define ADC_CFG3_SE_NEG_INPUT_INIT         0u
 812:Generated_Source\PSoC6/ADC.h ****     #endif /* ADC_CFG3_VNEG_INPUT_SEL == ADC_NEG_SEL_VSSA_KELVIN */
 813:Generated_Source\PSoC6/ADC.h **** 
 814:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_NEG_OTHER                 (uint16)((uint16)ADC_SARMUX__VNEG3 << SAR_CTRL_NEG_S
 815:Generated_Source\PSoC6/ADC.h **** 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 100
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 100
>>>>>>> Isac


 816:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SWITCH_CONF_INIT          0u
 817:Generated_Source\PSoC6/ADC.h **** 
 818:Generated_Source\PSoC6/ADC.h ****     /* If the SAR is configured for multiple channels, always set SAR_HW_CTRL_NEGVREF to 1 */
 819:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_HW_CTRL_NEGVREF_INIT      SAR_CTRL_SAR_HW_CTRL_NEGVREF_Msk
 820:Generated_Source\PSoC6/ADC.h **** 
 821:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_POWER_INIT  (ADC_PWR_CTRL_VREF_NORMAL_PWR)
 822:Generated_Source\PSoC6/ADC.h **** 
 823:Generated_Source\PSoC6/ADC.h ****     /* SAMPLE_CTRL initial values */
 824:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SE_RESULT_FORMAT_INIT \
 825:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_SINGLE_ENDED_FORMAT \
 826:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos)
 827:Generated_Source\PSoC6/ADC.h **** 
 828:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_DIFF_RESULT_FORMAT_INIT \
 829:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_DIFFERENTIAL_FORMAT \
 830:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos)
 831:Generated_Source\PSoC6/ADC.h **** 
 832:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_AVG_SAMPLES_NUM_INIT \
 833:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_SAMPLES_AVERAGED \
 834:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_AVG_CNT_Pos)
 835:Generated_Source\PSoC6/ADC.h **** 
 836:Generated_Source\PSoC6/ADC.h ****     /* Combination of Average Mode and Average Shift */
 837:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_AVG_MODE_INIT \
 838:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_AVGERAGING_MODE \
 839:Generated_Source\PSoC6/ADC.h ****             << SAR_SAMPLE_CTRL_AVG_SHIFT_Pos)
 840:Generated_Source\PSoC6/ADC.h **** 
 841:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_TRIGGER_OUT_INIT      (0u)
 842:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_UAB_SCAN_MODE_INIT    (0u)
 843:Generated_Source\PSoC6/ADC.h **** 
 844:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_VREF_POWER_INIT  \
 845:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_VREF_PWR \
 846:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_PWR_CTRL_VREF_Pos)
 847:Generated_Source\PSoC6/ADC.h **** 
 848:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_COMP_PWR_INIT  \
 849:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_COMP_PWR \
 850:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_COMP_PWR_Pos)
 851:Generated_Source\PSoC6/ADC.h **** 
 852:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_COMP_DLY_INIT  \
 853:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_COMP_DLY \
 854:Generated_Source\PSoC6/ADC.h ****             << SAR_CTRL_COMP_DLY_Pos)
 855:Generated_Source\PSoC6/ADC.h **** 
 856:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_CTRL_INIT  \
 857:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_VREF_POWER_INIT \
 858:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_VREF_SEL_MASK \
 859:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_SE_NEG_INPUT_INIT \
 860:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_HW_CTRL_NEGVREF_INIT \
 861:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_COMP_DLY_INIT \
 862:Generated_Source\PSoC6/ADC.h ****             | SAR_CTRL_REFBUF_EN_Msk \
 863:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_COMP_PWR_INIT \
 864:Generated_Source\PSoC6/ADC.h ****             | SAR_CTRL_DSI_SYNC_CONFIG_Msk  \
 865:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_SWITCH_CONF_INIT )
 866:Generated_Source\PSoC6/ADC.h **** 
 867:Generated_Source\PSoC6/ADC.h **** 
 868:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_SAMPLE_CTRL_INIT \
 869:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_SE_RESULT_FORMAT_INIT \
 870:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_DIFF_RESULT_FORMAT_INIT \
 871:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_AVG_SAMPLES_NUM_INIT \
 872:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_AVG_MODE_INIT \
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 101
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 101
>>>>>>> Isac


 873:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_DSI_TRIGGER_LEVEL_INIT \
 874:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_DSI_TRIGGER_EN_INIT \
 875:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_UAB_SCAN_MODE_INIT \
 876:Generated_Source\PSoC6/ADC.h ****             | SAR_SAMPLE_CTRL_VALID_IGNORE_Msk \
 877:Generated_Source\PSoC6/ADC.h ****             | ADC_CFG3_TRIGGER_OUT_INIT \
 878:Generated_Source\PSoC6/ADC.h ****             | SAR_SAMPLE_CTRL_EOS_DSI_OUT_EN_Msk \
 879:Generated_Source\PSoC6/ADC.h ****     )
 880:Generated_Source\PSoC6/ADC.h **** 
 881:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_RANGE_THRES_INIT \
 882:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_LOW_LIMIT \
 883:Generated_Source\PSoC6/ADC.h ****             | (uint32)((uint32)ADC_CFG3_HIGH_LIMIT \
 884:Generated_Source\PSoC6/ADC.h ****             << SAR_RANGE_THRES_RANGE_HIGH_Pos))
 885:Generated_Source\PSoC6/ADC.h **** 
 886:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_RANGE_COND_INIT   (cy_en_sar_range_detect_condition_t)ADC_CFG3_RANGE_COND
 887:Generated_Source\PSoC6/ADC.h **** 
 888:Generated_Source\PSoC6/ADC.h ****     /* Misc Config
 889:Generated_Source\PSoC6/ADC.h ****         [0] - Freerunning: Set if the sample mode is freerunning
 890:Generated_Source\PSoC6/ADC.h ****     */
 891:Generated_Source\PSoC6/ADC.h ****     #define ADC_CFG3_MISC_CONFIG_INIT \
 892:Generated_Source\PSoC6/ADC.h ****             (ADC_CFG3_FREERUNNING )
 893:Generated_Source\PSoC6/ADC.h **** 
 894:Generated_Source\PSoC6/ADC.h **** #endif /* ADC_TOTAL_CONFIGS > 3 */
 895:Generated_Source\PSoC6/ADC.h **** 
 896:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 897:Generated_Source\PSoC6/ADC.h **** /* End configuration 3 calculated defines                                     */
 898:Generated_Source\PSoC6/ADC.h **** /* ************************************************************************** */
 899:Generated_Source\PSoC6/ADC.h **** 
 900:Generated_Source\PSoC6/ADC.h **** /******************************************************************************
 901:Generated_Source\PSoC6/ADC.h **** * Function Name: ADC_Enable
 902:Generated_Source\PSoC6/ADC.h **** ****************************************************************************//*
 903:Generated_Source\PSoC6/ADC.h **** *
 904:Generated_Source\PSoC6/ADC.h **** * \brief Enables the component.
 905:Generated_Source\PSoC6/ADC.h **** *
 906:Generated_Source\PSoC6/ADC.h **** * \param None
 907:Generated_Source\PSoC6/ADC.h **** *
 908:Generated_Source\PSoC6/ADC.h **** * \return None
 909:Generated_Source\PSoC6/ADC.h **** *
 910:Generated_Source\PSoC6/ADC.h **** * \sideeffect
 911:Generated_Source\PSoC6/ADC.h **** *  None
 912:Generated_Source\PSoC6/ADC.h **** *
 913:Generated_Source\PSoC6/ADC.h **** *******************************************************************************/
 914:Generated_Source\PSoC6/ADC.h **** __STATIC_INLINE void ADC_Enable(void)
 915:Generated_Source\PSoC6/ADC.h **** {
 916:Generated_Source\PSoC6/ADC.h ****     Cy_SAR_Enable(ADC_SAR__HW);
 536              		.loc 4 916 0
 537 0018 0248     		ldr	r0, .L38+4
 538 001a FFF7FEFF 		bl	Cy_SAR_Enable
 539              	.LVL37:
 540              	.LBE52:
 541              	.LBE51:
  76:Generated_Source\PSoC6/ADC.c **** 
 542              		.loc 1 76 0
 543              		@ sp needed
 544 001e 10BD     		pop	{r4, pc}
 545              	.L39:
 546              		.align	2
 547              	.L38:
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 102
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 102
>>>>>>> Isac


 548 0020 00000000 		.word	.LANCHOR0
 549 0024 00001D41 		.word	1092419584
 550              		.cfi_endproc
 551              	.LFE186:
 552              		.size	ADC_Start, .-ADC_Start
 553              		.section	.text.ADC_StartEx,"ax",%progbits
 554              		.align	2
 555              		.global	ADC_StartEx
 556              		.code	16
 557              		.thumb_func
 558              		.type	ADC_StartEx, %function
 559              	ADC_StartEx:
 560              	.LFB187:
  95:Generated_Source\PSoC6/ADC.c ****     ADC_Start();
 561              		.loc 1 95 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 0
 564              		@ frame_needed = 0, uses_anonymous_args = 0
 565              	.LVL38:
 566 0000 10B5     		push	{r4, lr}
 567              		.cfi_def_cfa_offset 8
 568              		.cfi_offset 4, -8
 569              		.cfi_offset 14, -4
  96:Generated_Source\PSoC6/ADC.c **** 
 570              		.loc 1 96 0
 571 0002 FFF7FEFF 		bl	ADC_Start
 572              	.LVL39:
 113:Generated_Source\PSoC6/ADC.c **** 
 573              		.loc 1 113 0
 574              		@ sp needed
 575 0006 10BD     		pop	{r4, pc}
 576              		.cfi_endproc
 577              	.LFE187:
 578              		.size	ADC_StartEx, .-ADC_StartEx
 579              		.section	.text.ADC_SelectConfig,"ax",%progbits
 580              		.align	2
 581              		.global	ADC_SelectConfig
 582              		.code	16
 583              		.thumb_func
 584              		.type	ADC_SelectConfig, %function
 585              	ADC_SelectConfig:
 586              	.LFB189:
 171:Generated_Source\PSoC6/ADC.c ****     /* Check whether the configuration number is valid or not */
 587              		.loc 1 171 0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 0
 590              		@ frame_needed = 0, uses_anonymous_args = 0
 591              	.LVL40:
 592 0000 70B5     		push	{r4, r5, r6, lr}
 593              		.cfi_def_cfa_offset 16
 594              		.cfi_offset 4, -16
 595              		.cfi_offset 5, -12
 596              		.cfi_offset 6, -8
 597              		.cfi_offset 14, -4
 598 0002 0400     		movs	r4, r0
 599 0004 0D00     		movs	r5, r1
 173:Generated_Source\PSoC6/ADC.c ****     {
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 103
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 103
>>>>>>> Isac


 600              		.loc 1 173 0
 601 0006 0028     		cmp	r0, #0
 602 0008 20D1     		bne	.L41
 603              	.LVL41:
 604              	.LBB53:
 605              	.LBB54:
 606              	.LBB55:
1440:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
 607              		.loc 3 1440 0
 608 000a 114A     		ldr	r2, .L44
 609 000c 1368     		ldr	r3, [r2]
 610 000e 5B00     		lsls	r3, r3, #1
 611 0010 5B08     		lsrs	r3, r3, #1
 612 0012 1360     		str	r3, [r2]
 613              	.LVL42:
 614              	.LBE55:
 615              	.LBE54:
 616              	.LBE53:
 177:Generated_Source\PSoC6/ADC.c **** 
 617              		.loc 1 177 0
 618 0014 0F4B     		ldr	r3, .L44+4
 619 0016 0122     		movs	r2, #1
 620 0018 5A71     		strb	r2, [r3, #5]
 179:Generated_Source\PSoC6/ADC.c ****         {
 621              		.loc 1 179 0
 622 001a 1B79     		ldrb	r3, [r3, #4]
 623 001c 002B     		cmp	r3, #0
 624 001e 06D1     		bne	.L43
 181:Generated_Source\PSoC6/ADC.c ****             ADC_initVar |= ADC_INIT_VAR_INIT_FLAG;
 625              		.loc 1 181 0
 626 0020 FFF7FEFF 		bl	ADC_Init
 627              	.LVL43:
 182:Generated_Source\PSoC6/ADC.c ****         }
 628              		.loc 1 182 0
 629 0024 0B4A     		ldr	r2, .L44+4
 630 0026 1179     		ldrb	r1, [r2, #4]
 631 0028 0123     		movs	r3, #1
 632 002a 0B43     		orrs	r3, r1
 633 002c 1371     		strb	r3, [r2, #4]
 634              	.L43:
 188:Generated_Source\PSoC6/ADC.c **** 
 635              		.loc 1 188 0
 636 002e A300     		lsls	r3, r4, #2
 637 0030 1B19     		adds	r3, r3, r4
 638 0032 9800     		lsls	r0, r3, #2
 639 0034 084B     		ldr	r3, .L44+8
 640 0036 C018     		adds	r0, r0, r3
 641 0038 FFF7FEFF 		bl	ADC_InitConfig
 642              	.LVL44:
 194:Generated_Source\PSoC6/ADC.c **** 
 643              		.loc 1 194 0
 644 003c 054B     		ldr	r3, .L44+4
 645 003e 1C60     		str	r4, [r3]
 196:Generated_Source\PSoC6/ADC.c ****         {
 646              		.loc 1 196 0
 647 0040 012D     		cmp	r5, #1
 648 0042 03D1     		bne	.L41
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 104
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 104
>>>>>>> Isac


 199:Generated_Source\PSoC6/ADC.c **** 
 649              		.loc 1 199 0
 650 0044 FFF7FEFF 		bl	ADC_Start
 651              	.LVL45:
 202:Generated_Source\PSoC6/ADC.c ****         }
 652              		.loc 1 202 0
 653 0048 FFF7FEFF 		bl	ADC_StartConvert
 654              	.LVL46:
 655              	.L41:
 206:Generated_Source\PSoC6/ADC.c **** 
 656              		.loc 1 206 0
 657              		@ sp needed
 658              	.LVL47:
 659              	.LVL48:
 660 004c 70BD     		pop	{r4, r5, r6, pc}
 661              	.L45:
 662 004e C046     		.align	2
 663              	.L44:
 664 0050 00001D41 		.word	1092419584
 665 0054 00000000 		.word	.LANCHOR0
 666 0058 00000000 		.word	ADC_allConfigs
 667              		.cfi_endproc
 668              	.LFE189:
 669              		.size	ADC_SelectConfig, .-ADC_SelectConfig
 670              		.global	ADC_currentConfig
 671              		.global	ADC_selected
 672              		.global	ADC_initVar
 673              		.section	.rodata.str1.4,"aMS",%progbits,1
 674              		.align	2
 675              	.LC1:
 676 0000 47656E65 		.ascii	"Generated_Source\\PSoC6\\pdl\\drivers/peripheral/sa"
 676      72617465 
 676      645F536F 
 676      75726365 
 676      5C50536F 
 677 0030 722F6379 		.ascii	"r/cy_sar.h\000"
 677      5F736172 
 677      2E6800
 678              		.bss
 679              		.align	2
 680              		.set	.LANCHOR0,. + 0
 681              		.type	ADC_currentConfig, %object
 682              		.size	ADC_currentConfig, 4
 683              	ADC_currentConfig:
 684 0000 00000000 		.space	4
 685              		.type	ADC_initVar, %object
 686              		.size	ADC_initVar, 1
 687              	ADC_initVar:
 688 0004 00       		.space	1
 689              		.type	ADC_selected, %object
 690              		.size	ADC_selected, 1
 691              	ADC_selected:
 692 0005 00       		.space	1
 693              		.text
 694              	.Letext0:
 695              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 696              		.file 6 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 105
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 105
>>>>>>> Isac


 697              		.file 7 "Generated_Source\\PSoC6\\pdl\\devices/psoc6/include/ip/cyip_peri.h"
 698              		.file 8 "Generated_Source\\PSoC6\\pdl\\devices/psoc6/include/ip/cyip_sar.h"
 699              		.file 9 "Generated_Source\\PSoC6\\pdl\\devices/psoc6/include/psoc6_01_config.h"
 700              		.file 10 "Generated_Source\\PSoC6\\pdl\\drivers/peripheral/device/cy_device.h"
 701              		.file 11 "Generated_Source\\PSoC6\\pdl\\drivers/peripheral/syslib/cy_syslib.h"
 702              		.file 12 "Generated_Source\\PSoC6\\ADC_intSarClock.h"
 703              		.section	.debug_info,"",%progbits
 704              	.Ldebug_info0:
 705 0000 5C150000 		.4byte	0x155c
 706 0004 0400     		.2byte	0x4
 707 0006 00000000 		.4byte	.Ldebug_abbrev0
 708 000a 04       		.byte	0x4
 709 000b 01       		.uleb128 0x1
 710 000c 9D080000 		.4byte	.LASF294
 711 0010 0C       		.byte	0xc
 712 0011 B20D0000 		.4byte	.LASF295
 713 0015 D4020000 		.4byte	.LASF296
 714 0019 00000000 		.4byte	.Ldebug_ranges0+0
 715 001d 00000000 		.4byte	0
 716 0021 00000000 		.4byte	.Ldebug_line0
 717 0025 02       		.uleb128 0x2
 718 0026 02       		.byte	0x2
 719 0027 05       		.byte	0x5
 720 0028 15020000 		.4byte	.LASF0
 721 002c 02       		.uleb128 0x2
 722 002d 01       		.byte	0x1
 723 002e 08       		.byte	0x8
 724 002f DF0B0000 		.4byte	.LASF1
 725 0033 02       		.uleb128 0x2
 726 0034 01       		.byte	0x1
 727 0035 06       		.byte	0x6
 728 0036 3D100000 		.4byte	.LASF2
 729 003a 03       		.uleb128 0x3
 730 003b E40D0000 		.4byte	.LASF3
 731 003f 05       		.byte	0x5
 732 0040 1D       		.byte	0x1d
 733 0041 2C000000 		.4byte	0x2c
 734 0045 03       		.uleb128 0x3
 735 0046 51090000 		.4byte	.LASF4
 736 004a 05       		.byte	0x5
 737 004b 29       		.byte	0x29
 738 004c 25000000 		.4byte	0x25
 739 0050 03       		.uleb128 0x3
 740 0051 C0040000 		.4byte	.LASF5
 741 0055 05       		.byte	0x5
 742 0056 2B       		.byte	0x2b
 743 0057 5B000000 		.4byte	0x5b
 744 005b 02       		.uleb128 0x2
 745 005c 02       		.byte	0x2
 746 005d 07       		.byte	0x7
 747 005e 8F050000 		.4byte	.LASF6
 748 0062 02       		.uleb128 0x2
 749 0063 04       		.byte	0x4
 750 0064 05       		.byte	0x5
 751 0065 EF0C0000 		.4byte	.LASF7
 752 0069 03       		.uleb128 0x3
<<<<<<< HEAD
 753 006a F60E0000 		.4byte	.LASF8
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 106
=======
 753 006a 100F0000 		.4byte	.LASF8
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 106
>>>>>>> Isac


 754 006e 05       		.byte	0x5
 755 006f 41       		.byte	0x41
 756 0070 74000000 		.4byte	0x74
 757 0074 02       		.uleb128 0x2
 758 0075 04       		.byte	0x4
 759 0076 07       		.byte	0x7
 760 0077 690E0000 		.4byte	.LASF9
 761 007b 02       		.uleb128 0x2
 762 007c 08       		.byte	0x8
 763 007d 05       		.byte	0x5
 764 007e 12080000 		.4byte	.LASF10
 765 0082 02       		.uleb128 0x2
 766 0083 08       		.byte	0x8
 767 0084 07       		.byte	0x7
 768 0085 47040000 		.4byte	.LASF11
 769 0089 04       		.uleb128 0x4
 770 008a 04       		.byte	0x4
 771 008b 05       		.byte	0x5
 772 008c 696E7400 		.ascii	"int\000"
 773 0090 02       		.uleb128 0x2
 774 0091 04       		.byte	0x4
 775 0092 07       		.byte	0x7
 776 0093 20010000 		.4byte	.LASF12
 777 0097 03       		.uleb128 0x3
 778 0098 8B070000 		.4byte	.LASF13
 779 009c 06       		.byte	0x6
 780 009d 18       		.byte	0x18
 781 009e 3A000000 		.4byte	0x3a
 782 00a2 03       		.uleb128 0x3
 783 00a3 25040000 		.4byte	.LASF14
 784 00a7 06       		.byte	0x6
 785 00a8 20       		.byte	0x20
 786 00a9 45000000 		.4byte	0x45
 787 00ad 03       		.uleb128 0x3
 788 00ae 3A0B0000 		.4byte	.LASF15
 789 00b2 06       		.byte	0x6
 790 00b3 24       		.byte	0x24
 791 00b4 50000000 		.4byte	0x50
 792 00b8 03       		.uleb128 0x3
 793 00b9 BA030000 		.4byte	.LASF16
 794 00bd 06       		.byte	0x6
 795 00be 30       		.byte	0x30
 796 00bf 69000000 		.4byte	0x69
 797 00c3 02       		.uleb128 0x2
 798 00c4 04       		.byte	0x4
 799 00c5 07       		.byte	0x7
 800 00c6 120C0000 		.4byte	.LASF17
 801 00ca 05       		.uleb128 0x5
 802 00cb B8000000 		.4byte	0xb8
 803 00cf 06       		.uleb128 0x6
 804 00d0 CA000000 		.4byte	0xca
 805 00d4 07       		.uleb128 0x7
 806 00d5 CF000000 		.4byte	0xcf
 807 00d9 E4000000 		.4byte	0xe4
 808 00dd 08       		.uleb128 0x8
 809 00de C3000000 		.4byte	0xc3
 810 00e2 01       		.byte	0x1
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 107
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 107
>>>>>>> Isac


 811 00e3 00       		.byte	0
 812 00e4 07       		.uleb128 0x7
 813 00e5 CA000000 		.4byte	0xca
 814 00e9 F4000000 		.4byte	0xf4
 815 00ed 08       		.uleb128 0x8
 816 00ee C3000000 		.4byte	0xc3
 817 00f2 7F       		.byte	0x7f
 818 00f3 00       		.byte	0
 819 00f4 07       		.uleb128 0x7
 820 00f5 CA000000 		.4byte	0xca
 821 00f9 04010000 		.4byte	0x104
 822 00fd 08       		.uleb128 0x8
 823 00fe C3000000 		.4byte	0xc3
 824 0102 0F       		.byte	0xf
 825 0103 00       		.byte	0
 826 0104 07       		.uleb128 0x7
 827 0105 CF000000 		.4byte	0xcf
 828 0109 14010000 		.4byte	0x114
 829 010d 08       		.uleb128 0x8
 830 010e C3000000 		.4byte	0xc3
 831 0112 06       		.byte	0x6
 832 0113 00       		.byte	0
 833 0114 09       		.uleb128 0x9
 834 0115 40       		.byte	0x40
 835 0116 07       		.byte	0x7
 836 0117 27       		.byte	0x27
 837 0118 59010000 		.4byte	0x159
 838 011c 0A       		.uleb128 0xa
 839 011d 64060000 		.4byte	.LASF18
 840 0121 07       		.byte	0x7
 841 0122 28       		.byte	0x28
 842 0123 CA000000 		.4byte	0xca
 843 0127 00       		.byte	0
 844 0128 0A       		.uleb128 0xa
 845 0129 27000000 		.4byte	.LASF19
 846 012d 07       		.byte	0x7
 847 012e 29       		.byte	0x29
 848 012f 5E010000 		.4byte	0x15e
 849 0133 04       		.byte	0x4
 850 0134 0A       		.uleb128 0xa
 851 0135 13040000 		.4byte	.LASF20
 852 0139 07       		.byte	0x7
 853 013a 2A       		.byte	0x2a
 854 013b CA000000 		.4byte	0xca
 855 013f 20       		.byte	0x20
 856 0140 0A       		.uleb128 0xa
 857 0141 99110000 		.4byte	.LASF21
 858 0145 07       		.byte	0x7
 859 0146 2B       		.byte	0x2b
 860 0147 CA000000 		.4byte	0xca
 861 014b 24       		.byte	0x24
 862 014c 0A       		.uleb128 0xa
 863 014d 04110000 		.4byte	.LASF22
 864 0151 07       		.byte	0x7
 865 0152 2C       		.byte	0x2c
 866 0153 78010000 		.4byte	0x178
 867 0157 28       		.byte	0x28
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 108
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 108
>>>>>>> Isac


 868 0158 00       		.byte	0
 869 0159 05       		.uleb128 0x5
 870 015a 04010000 		.4byte	0x104
 871 015e 06       		.uleb128 0x6
 872 015f 59010000 		.4byte	0x159
 873 0163 07       		.uleb128 0x7
 874 0164 CF000000 		.4byte	0xcf
 875 0168 73010000 		.4byte	0x173
 876 016c 08       		.uleb128 0x8
 877 016d C3000000 		.4byte	0xc3
 878 0171 05       		.byte	0x5
 879 0172 00       		.byte	0
 880 0173 05       		.uleb128 0x5
 881 0174 63010000 		.4byte	0x163
 882 0178 06       		.uleb128 0x6
 883 0179 73010000 		.4byte	0x173
 884 017d 03       		.uleb128 0x3
 885 017e 24110000 		.4byte	.LASF23
 886 0182 07       		.byte	0x7
 887 0183 2D       		.byte	0x2d
 888 0184 14010000 		.4byte	0x114
 889 0188 0B       		.uleb128 0xb
 890 0189 0002     		.2byte	0x200
 891 018b 07       		.byte	0x7
 892 018c 32       		.byte	0x32
 893 018d 9E010000 		.4byte	0x19e
 894 0191 0A       		.uleb128 0xa
 895 0192 D8060000 		.4byte	.LASF24
 896 0196 07       		.byte	0x7
 897 0197 33       		.byte	0x33
 898 0198 9E010000 		.4byte	0x19e
 899 019c 00       		.byte	0
 900 019d 00       		.byte	0
 901 019e 05       		.uleb128 0x5
 902 019f E4000000 		.4byte	0xe4
 903 01a3 03       		.uleb128 0x3
 904 01a4 14000000 		.4byte	.LASF25
 905 01a8 07       		.byte	0x7
 906 01a9 34       		.byte	0x34
 907 01aa 88010000 		.4byte	0x188
 908 01ae 09       		.uleb128 0x9
 909 01af 40       		.byte	0x40
 910 01b0 07       		.byte	0x7
 911 01b1 39       		.byte	0x39
 912 01b2 FF010000 		.4byte	0x1ff
 913 01b6 0A       		.uleb128 0xa
 914 01b7 BD100000 		.4byte	.LASF26
 915 01bb 07       		.byte	0x7
 916 01bc 3A       		.byte	0x3a
 917 01bd CA000000 		.4byte	0xca
 918 01c1 00       		.byte	0
 919 01c2 0A       		.uleb128 0xa
 920 01c3 FA100000 		.4byte	.LASF27
 921 01c7 07       		.byte	0x7
 922 01c8 3B       		.byte	0x3b
 923 01c9 CA000000 		.4byte	0xca
 924 01cd 04       		.byte	0x4
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 109
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 109
>>>>>>> Isac


 925 01ce 0A       		.uleb128 0xa
 926 01cf 27000000 		.4byte	.LASF19
 927 01d3 07       		.byte	0x7
 928 01d4 3C       		.byte	0x3c
 929 01d5 04020000 		.4byte	0x204
 930 01d9 08       		.byte	0x8
 931 01da 0A       		.uleb128 0xa
 932 01db C3100000 		.4byte	.LASF28
 933 01df 07       		.byte	0x7
 934 01e0 3D       		.byte	0x3d
 935 01e1 CF000000 		.4byte	0xcf
 936 01e5 20       		.byte	0x20
 937 01e6 0A       		.uleb128 0xa
 938 01e7 FF100000 		.4byte	.LASF29
 939 01eb 07       		.byte	0x7
 940 01ec 3E       		.byte	0x3e
 941 01ed CA000000 		.4byte	0xca
 942 01f1 24       		.byte	0x24
 943 01f2 0A       		.uleb128 0xa
 944 01f3 04110000 		.4byte	.LASF22
 945 01f7 07       		.byte	0x7
 946 01f8 3F       		.byte	0x3f
 947 01f9 0E020000 		.4byte	0x20e
 948 01fd 28       		.byte	0x28
 949 01fe 00       		.byte	0
 950 01ff 05       		.uleb128 0x5
 951 0200 63010000 		.4byte	0x163
 952 0204 06       		.uleb128 0x6
 953 0205 FF010000 		.4byte	0x1ff
 954 0209 05       		.uleb128 0x5
 955 020a 63010000 		.4byte	0x163
 956 020e 06       		.uleb128 0x6
 957 020f 09020000 		.4byte	0x209
 958 0213 03       		.uleb128 0x3
 959 0214 9A030000 		.4byte	.LASF30
 960 0218 07       		.byte	0x7
 961 0219 40       		.byte	0x40
 962 021a AE010000 		.4byte	0x1ae
 963 021e 09       		.uleb128 0x9
 964 021f 40       		.byte	0x40
 965 0220 07       		.byte	0x7
 966 0221 45       		.byte	0x45
 967 0222 6F020000 		.4byte	0x26f
 968 0226 0A       		.uleb128 0xa
 969 0227 BD100000 		.4byte	.LASF26
 970 022b 07       		.byte	0x7
 971 022c 46       		.byte	0x46
 972 022d CF000000 		.4byte	0xcf
 973 0231 00       		.byte	0
 974 0232 0A       		.uleb128 0xa
 975 0233 FA100000 		.4byte	.LASF27
 976 0237 07       		.byte	0x7
 977 0238 47       		.byte	0x47
 978 0239 CA000000 		.4byte	0xca
 979 023d 04       		.byte	0x4
 980 023e 0A       		.uleb128 0xa
 981 023f 27000000 		.4byte	.LASF19
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 110
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 110
>>>>>>> Isac


 982 0243 07       		.byte	0x7
 983 0244 48       		.byte	0x48
 984 0245 74020000 		.4byte	0x274
 985 0249 08       		.byte	0x8
 986 024a 0A       		.uleb128 0xa
 987 024b C3100000 		.4byte	.LASF28
 988 024f 07       		.byte	0x7
 989 0250 49       		.byte	0x49
 990 0251 CF000000 		.4byte	0xcf
 991 0255 20       		.byte	0x20
 992 0256 0A       		.uleb128 0xa
 993 0257 FF100000 		.4byte	.LASF29
 994 025b 07       		.byte	0x7
 995 025c 4A       		.byte	0x4a
 996 025d CA000000 		.4byte	0xca
 997 0261 24       		.byte	0x24
 998 0262 0A       		.uleb128 0xa
 999 0263 04110000 		.4byte	.LASF22
 1000 0267 07       		.byte	0x7
 1001 0268 4B       		.byte	0x4b
 1002 0269 7E020000 		.4byte	0x27e
 1003 026d 28       		.byte	0x28
 1004 026e 00       		.byte	0
 1005 026f 05       		.uleb128 0x5
 1006 0270 63010000 		.4byte	0x163
 1007 0274 06       		.uleb128 0x6
 1008 0275 6F020000 		.4byte	0x26f
 1009 0279 05       		.uleb128 0x5
 1010 027a 63010000 		.4byte	0x163
 1011 027e 06       		.uleb128 0x6
 1012 027f 79020000 		.4byte	0x279
 1013 0283 03       		.uleb128 0x3
 1014 0284 C5110000 		.4byte	.LASF31
 1015 0288 07       		.byte	0x7
 1016 0289 4C       		.byte	0x4c
 1017 028a 1E020000 		.4byte	0x21e
 1018 028e 0B       		.uleb128 0xb
 1019 028f 0054     		.2byte	0x5400
 1020 0291 07       		.byte	0x7
 1021 0292 69       		.byte	0x69
 1022 0293 66030000 		.4byte	0x366
 1023 0297 0C       		.uleb128 0xc
 1024 0298 475200   		.ascii	"GR\000"
 1025 029b 07       		.byte	0x7
 1026 029c 6A       		.byte	0x6a
 1027 029d 66030000 		.4byte	0x366
 1028 02a1 00       		.byte	0
 1029 02a2 0D       		.uleb128 0xd
 1030 02a3 110D0000 		.4byte	.LASF32
 1031 02a7 07       		.byte	0x7
 1032 02a8 6B       		.byte	0x6b
 1033 02a9 CA000000 		.4byte	0xca
 1034 02ad 0004     		.2byte	0x400
 1035 02af 0D       		.uleb128 0xd
 1036 02b0 27000000 		.4byte	.LASF19
 1037 02b4 07       		.byte	0x7
 1038 02b5 6C       		.byte	0x6c
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 111
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 111
>>>>>>> Isac


 1039 02b6 8B030000 		.4byte	0x38b
 1040 02ba 0404     		.2byte	0x404
 1041 02bc 0D       		.uleb128 0xd
 1042 02bd B4000000 		.4byte	.LASF33
 1043 02c1 07       		.byte	0x7
 1044 02c2 6D       		.byte	0x6d
 1045 02c3 A0030000 		.4byte	0x3a0
 1046 02c7 0008     		.2byte	0x800
 1047 02c9 0D       		.uleb128 0xd
 1048 02ca 59060000 		.4byte	.LASF34
 1049 02ce 07       		.byte	0x7
 1050 02cf 6E       		.byte	0x6e
 1051 02d0 A5030000 		.4byte	0x3a5
 1052 02d4 0009     		.2byte	0x900
 1053 02d6 0D       		.uleb128 0xd
 1054 02d7 C9010000 		.4byte	.LASF35
 1055 02db 07       		.byte	0x7
 1056 02dc 6F       		.byte	0x6f
 1057 02dd AA030000 		.4byte	0x3aa
 1058 02e1 000A     		.2byte	0xa00
 1059 02e3 0D       		.uleb128 0xd
 1060 02e4 F3050000 		.4byte	.LASF36
 1061 02e8 07       		.byte	0x7
 1062 02e9 70       		.byte	0x70
 1063 02ea BF030000 		.4byte	0x3bf
 1064 02ee 000B     		.2byte	0xb00
 1065 02f0 0D       		.uleb128 0xd
 1066 02f1 04110000 		.4byte	.LASF22
 1067 02f5 07       		.byte	0x7
 1068 02f6 71       		.byte	0x71
 1069 02f7 CF000000 		.4byte	0xcf
 1070 02fb FC0B     		.2byte	0xbfc
 1071 02fd 0D       		.uleb128 0xd
 1072 02fe 64060000 		.4byte	.LASF18
 1073 0302 07       		.byte	0x7
 1074 0303 72       		.byte	0x72
 1075 0304 C4030000 		.4byte	0x3c4
 1076 0308 000C     		.2byte	0xc00
 1077 030a 0D       		.uleb128 0xd
 1078 030b 6B0C0000 		.4byte	.LASF37
 1079 030f 07       		.byte	0x7
 1080 0310 73       		.byte	0x73
 1081 0311 DE030000 		.4byte	0x3de
 1082 0315 000E     		.2byte	0xe00
 1083 0317 0D       		.uleb128 0xd
 1084 0318 5B050000 		.4byte	.LASF38
 1085 031c 07       		.byte	0x7
 1086 031d 74       		.byte	0x74
 1087 031e CA000000 		.4byte	0xca
 1088 0322 0010     		.2byte	0x1000
 1089 0324 0D       		.uleb128 0xd
 1090 0325 750C0000 		.4byte	.LASF39
 1091 0329 07       		.byte	0x7
 1092 032a 75       		.byte	0x75
 1093 032b F9030000 		.4byte	0x3f9
 1094 032f 0410     		.2byte	0x1004
 1095 0331 0D       		.uleb128 0xd
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 112
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 112
>>>>>>> Isac


 1096 0332 F5060000 		.4byte	.LASF40
 1097 0336 07       		.byte	0x7
 1098 0337 76       		.byte	0x76
 1099 0338 FE030000 		.4byte	0x3fe
 1100 033c 0020     		.2byte	0x2000
 1101 033e 0D       		.uleb128 0xd
 1102 033f E2010000 		.4byte	.LASF41
 1103 0343 07       		.byte	0x7
 1104 0344 77       		.byte	0x77
 1105 0345 0E040000 		.4byte	0x40e
 1106 0349 0040     		.2byte	0x4000
 1107 034b 0D       		.uleb128 0xd
 1108 034c 7F0C0000 		.4byte	.LASF42
 1109 0350 07       		.byte	0x7
 1110 0351 78       		.byte	0x78
 1111 0352 34040000 		.4byte	0x434
 1112 0356 0048     		.2byte	0x4800
 1113 0358 0D       		.uleb128 0xd
 1114 0359 2F090000 		.4byte	.LASF43
 1115 035d 07       		.byte	0x7
 1116 035e 79       		.byte	0x79
 1117 035f 39040000 		.4byte	0x439
 1118 0363 0050     		.2byte	0x5000
 1119 0365 00       		.byte	0
 1120 0366 07       		.uleb128 0x7
 1121 0367 7D010000 		.4byte	0x17d
 1122 036b 76030000 		.4byte	0x376
 1123 036f 08       		.uleb128 0x8
 1124 0370 C3000000 		.4byte	0xc3
 1125 0374 0F       		.byte	0xf
 1126 0375 00       		.byte	0
 1127 0376 07       		.uleb128 0x7
 1128 0377 CF000000 		.4byte	0xcf
 1129 037b 86030000 		.4byte	0x386
 1130 037f 08       		.uleb128 0x8
 1131 0380 C3000000 		.4byte	0xc3
 1132 0384 FE       		.byte	0xfe
 1133 0385 00       		.byte	0
 1134 0386 05       		.uleb128 0x5
 1135 0387 76030000 		.4byte	0x376
 1136 038b 06       		.uleb128 0x6
 1137 038c 86030000 		.4byte	0x386
 1138 0390 07       		.uleb128 0x7
 1139 0391 CA000000 		.4byte	0xca
 1140 0395 A0030000 		.4byte	0x3a0
 1141 0399 08       		.uleb128 0x8
 1142 039a C3000000 		.4byte	0xc3
 1143 039e 3F       		.byte	0x3f
 1144 039f 00       		.byte	0
 1145 03a0 05       		.uleb128 0x5
 1146 03a1 90030000 		.4byte	0x390
 1147 03a5 05       		.uleb128 0x5
 1148 03a6 90030000 		.4byte	0x390
 1149 03aa 05       		.uleb128 0x5
 1150 03ab 90030000 		.4byte	0x390
 1151 03af 07       		.uleb128 0x7
 1152 03b0 CA000000 		.4byte	0xca
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 113
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 113
>>>>>>> Isac


 1153 03b4 BF030000 		.4byte	0x3bf
 1154 03b8 08       		.uleb128 0x8
 1155 03b9 C3000000 		.4byte	0xc3
 1156 03bd 3E       		.byte	0x3e
 1157 03be 00       		.byte	0
 1158 03bf 05       		.uleb128 0x5
 1159 03c0 AF030000 		.4byte	0x3af
 1160 03c4 05       		.uleb128 0x5
 1161 03c5 E4000000 		.4byte	0xe4
 1162 03c9 07       		.uleb128 0x7
 1163 03ca CF000000 		.4byte	0xcf
 1164 03ce D9030000 		.4byte	0x3d9
 1165 03d2 08       		.uleb128 0x8
 1166 03d3 C3000000 		.4byte	0xc3
 1167 03d7 7F       		.byte	0x7f
 1168 03d8 00       		.byte	0
 1169 03d9 05       		.uleb128 0x5
 1170 03da C9030000 		.4byte	0x3c9
 1171 03de 06       		.uleb128 0x6
 1172 03df D9030000 		.4byte	0x3d9
 1173 03e3 07       		.uleb128 0x7
 1174 03e4 CF000000 		.4byte	0xcf
 1175 03e8 F4030000 		.4byte	0x3f4
 1176 03ec 0E       		.uleb128 0xe
 1177 03ed C3000000 		.4byte	0xc3
 1178 03f1 FE03     		.2byte	0x3fe
 1179 03f3 00       		.byte	0
 1180 03f4 05       		.uleb128 0x5
 1181 03f5 E3030000 		.4byte	0x3e3
 1182 03f9 06       		.uleb128 0x6
 1183 03fa F4030000 		.4byte	0x3f4
 1184 03fe 07       		.uleb128 0x7
 1185 03ff A3010000 		.4byte	0x1a3
 1186 0403 0E040000 		.4byte	0x40e
 1187 0407 08       		.uleb128 0x8
 1188 0408 C3000000 		.4byte	0xc3
 1189 040c 0F       		.byte	0xf
 1190 040d 00       		.byte	0
 1191 040e 07       		.uleb128 0x7
 1192 040f 13020000 		.4byte	0x213
 1193 0413 1E040000 		.4byte	0x41e
 1194 0417 08       		.uleb128 0x8
 1195 0418 C3000000 		.4byte	0xc3
 1196 041c 1F       		.byte	0x1f
 1197 041d 00       		.byte	0
 1198 041e 07       		.uleb128 0x7
 1199 041f CF000000 		.4byte	0xcf
 1200 0423 2F040000 		.4byte	0x42f
 1201 0427 0E       		.uleb128 0xe
 1202 0428 C3000000 		.4byte	0xc3
 1203 042c FF01     		.2byte	0x1ff
 1204 042e 00       		.byte	0
 1205 042f 05       		.uleb128 0x5
 1206 0430 1E040000 		.4byte	0x41e
 1207 0434 06       		.uleb128 0x6
 1208 0435 2F040000 		.4byte	0x42f
 1209 0439 07       		.uleb128 0x7
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 114
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 114
>>>>>>> Isac


 1210 043a 83020000 		.4byte	0x283
 1211 043e 49040000 		.4byte	0x449
 1212 0442 08       		.uleb128 0x8
 1213 0443 C3000000 		.4byte	0xc3
 1214 0447 0F       		.byte	0xf
 1215 0448 00       		.byte	0
 1216 0449 03       		.uleb128 0x3
 1217 044a CF0C0000 		.4byte	.LASF44
 1218 044e 07       		.byte	0x7
 1219 044f 7B       		.byte	0x7b
 1220 0450 8E020000 		.4byte	0x28e
 1221 0454 07       		.uleb128 0x7
 1222 0455 CF000000 		.4byte	0xcf
 1223 0459 64040000 		.4byte	0x464
 1224 045d 08       		.uleb128 0x8
 1225 045e C3000000 		.4byte	0xc3
 1226 0462 0F       		.byte	0xf
 1227 0463 00       		.byte	0
 1228 0464 07       		.uleb128 0x7
 1229 0465 CF000000 		.4byte	0xcf
 1230 0469 74040000 		.4byte	0x474
 1231 046d 08       		.uleb128 0x8
 1232 046e C3000000 		.4byte	0xc3
 1233 0472 02       		.byte	0x2
 1234 0473 00       		.byte	0
 1235 0474 07       		.uleb128 0x7
 1236 0475 CF000000 		.4byte	0xcf
 1237 0479 84040000 		.4byte	0x484
 1238 047d 08       		.uleb128 0x8
 1239 047e C3000000 		.4byte	0xc3
 1240 0482 0E       		.byte	0xe
 1241 0483 00       		.byte	0
 1242 0484 0B       		.uleb128 0xb
 1243 0485 080F     		.2byte	0xf08
 1244 0487 08       		.byte	0x8
 1245 0488 21       		.byte	0x21
 1246 0489 0C070000 		.4byte	0x70c
 1247 048d 0A       		.uleb128 0xa
 1248 048e EB000000 		.4byte	.LASF45
 1249 0492 08       		.byte	0x8
 1250 0493 22       		.byte	0x22
 1251 0494 CA000000 		.4byte	0xca
 1252 0498 00       		.byte	0
 1253 0499 0A       		.uleb128 0xa
 1254 049a 510A0000 		.4byte	.LASF46
 1255 049e 08       		.byte	0x8
 1256 049f 23       		.byte	0x23
 1257 04a0 CA000000 		.4byte	0xca
 1258 04a4 04       		.byte	0x4
 1259 04a5 0A       		.uleb128 0xa
 1260 04a6 27000000 		.4byte	.LASF19
 1261 04aa 08       		.byte	0x8
 1262 04ab 24       		.byte	0x24
 1263 04ac 11070000 		.4byte	0x711
 1264 04b0 08       		.byte	0x8
 1265 04b1 0A       		.uleb128 0xa
 1266 04b2 2D020000 		.4byte	.LASF47
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 115
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 115
>>>>>>> Isac


 1267 04b6 08       		.byte	0x8
 1268 04b7 25       		.byte	0x25
 1269 04b8 CA000000 		.4byte	0xca
 1270 04bc 10       		.byte	0x10
 1271 04bd 0A       		.uleb128 0xa
 1272 04be A7040000 		.4byte	.LASF48
 1273 04c2 08       		.byte	0x8
 1274 04c3 26       		.byte	0x26
 1275 04c4 CA000000 		.4byte	0xca
 1276 04c8 14       		.byte	0x14
 1277 04c9 0A       		.uleb128 0xa
 1278 04ca 6F0D0000 		.4byte	.LASF49
 1279 04ce 08       		.byte	0x8
 1280 04cf 27       		.byte	0x27
 1281 04d0 CA000000 		.4byte	0xca
 1282 04d4 18       		.byte	0x18
 1283 04d5 0A       		.uleb128 0xa
 1284 04d6 D4050000 		.4byte	.LASF50
 1285 04da 08       		.byte	0x8
 1286 04db 28       		.byte	0x28
 1287 04dc CA000000 		.4byte	0xca
 1288 04e0 1C       		.byte	0x1c
 1289 04e1 0A       		.uleb128 0xa
 1290 04e2 DA000000 		.4byte	.LASF51
 1291 04e6 08       		.byte	0x8
 1292 04e7 29       		.byte	0x29
 1293 04e8 CA000000 		.4byte	0xca
 1294 04ec 20       		.byte	0x20
 1295 04ed 0A       		.uleb128 0xa
 1296 04ee DC0A0000 		.4byte	.LASF52
 1297 04f2 08       		.byte	0x8
 1298 04f3 2A       		.byte	0x2a
 1299 04f4 CA000000 		.4byte	0xca
 1300 04f8 24       		.byte	0x24
 1301 04f9 0A       		.uleb128 0xa
 1302 04fa 04110000 		.4byte	.LASF22
 1303 04fe 08       		.byte	0x8
 1304 04ff 2B       		.byte	0x2b
 1305 0500 2B070000 		.4byte	0x72b
 1306 0504 28       		.byte	0x28
 1307 0505 0A       		.uleb128 0xa
 1308 0506 CF0E0000 		.4byte	.LASF53
 1309 050a 08       		.byte	0x8
 1310 050b 2C       		.byte	0x2c
 1311 050c 30070000 		.4byte	0x730
 1312 0510 80       		.byte	0x80
 1313 0511 0A       		.uleb128 0xa
 1314 0512 6B0C0000 		.4byte	.LASF37
 1315 0516 08       		.byte	0x8
 1316 0517 2D       		.byte	0x2d
 1317 0518 3A070000 		.4byte	0x73a
 1318 051c C0       		.byte	0xc0
 1319 051d 0D       		.uleb128 0xd
 1320 051e A10D0000 		.4byte	.LASF54
 1321 0522 08       		.byte	0x8
 1322 0523 2E       		.byte	0x2e
 1323 0524 44070000 		.4byte	0x744
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 116
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 116
>>>>>>> Isac


 1324 0528 0001     		.2byte	0x100
 1325 052a 0D       		.uleb128 0xd
 1326 052b 750C0000 		.4byte	.LASF39
 1327 052f 08       		.byte	0x8
 1328 0530 2F       		.byte	0x2f
 1329 0531 4E070000 		.4byte	0x74e
 1330 0535 4001     		.2byte	0x140
 1331 0537 0D       		.uleb128 0xd
 1332 0538 AD090000 		.4byte	.LASF55
 1333 053c 08       		.byte	0x8
 1334 053d 30       		.byte	0x30
 1335 053e 58070000 		.4byte	0x758
 1336 0542 8001     		.2byte	0x180
 1337 0544 0D       		.uleb128 0xd
 1338 0545 7F0C0000 		.4byte	.LASF42
 1339 0549 08       		.byte	0x8
 1340 054a 31       		.byte	0x31
 1341 054b 62070000 		.4byte	0x762
 1342 054f C001     		.2byte	0x1c0
 1343 0551 0D       		.uleb128 0xd
 1344 0552 42000000 		.4byte	.LASF56
 1345 0556 08       		.byte	0x8
 1346 0557 32       		.byte	0x32
 1347 0558 CF000000 		.4byte	0xcf
 1348 055c 0002     		.2byte	0x200
 1349 055e 0D       		.uleb128 0xd
 1350 055f A30E0000 		.4byte	.LASF57
 1351 0563 08       		.byte	0x8
 1352 0564 33       		.byte	0x33
 1353 0565 CF000000 		.4byte	0xcf
 1354 0569 0402     		.2byte	0x204
 1355 056b 0D       		.uleb128 0xd
 1356 056c AC010000 		.4byte	.LASF58
 1357 0570 08       		.byte	0x8
 1358 0571 34       		.byte	0x34
 1359 0572 CF000000 		.4byte	0xcf
 1360 0576 0802     		.2byte	0x208
 1361 0578 0D       		.uleb128 0xd
 1362 0579 60070000 		.4byte	.LASF59
 1363 057d 08       		.byte	0x8
 1364 057e 35       		.byte	0x35
 1365 057f CF000000 		.4byte	0xcf
 1366 0583 0C02     		.2byte	0x20c
 1367 0585 0D       		.uleb128 0xd
 1368 0586 D7030000 		.4byte	.LASF60
 1369 058a 08       		.byte	0x8
 1370 058b 36       		.byte	0x36
 1371 058c CA000000 		.4byte	0xca
 1372 0590 1002     		.2byte	0x210
 1373 0592 0D       		.uleb128 0xd
 1374 0593 73020000 		.4byte	.LASF61
 1375 0597 08       		.byte	0x8
 1376 0598 37       		.byte	0x37
 1377 0599 CA000000 		.4byte	0xca
 1378 059d 1402     		.2byte	0x214
 1379 059f 0D       		.uleb128 0xd
<<<<<<< HEAD
 1380 05a0 120A0000 		.4byte	.LASF62
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 117
=======
 1380 05a0 2C0A0000 		.4byte	.LASF62
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 117
>>>>>>> Isac


 1381 05a4 08       		.byte	0x8
 1382 05a5 38       		.byte	0x38
 1383 05a6 CA000000 		.4byte	0xca
 1384 05aa 1802     		.2byte	0x218
 1385 05ac 0D       		.uleb128 0xd
 1386 05ad 1F0E0000 		.4byte	.LASF63
 1387 05b1 08       		.byte	0x8
 1388 05b2 39       		.byte	0x39
 1389 05b3 CF000000 		.4byte	0xcf
 1390 05b7 1C02     		.2byte	0x21c
 1391 05b9 0D       		.uleb128 0xd
 1392 05ba 1F020000 		.4byte	.LASF64
 1393 05be 08       		.byte	0x8
 1394 05bf 3A       		.byte	0x3a
 1395 05c0 CA000000 		.4byte	0xca
 1396 05c4 2002     		.2byte	0x220
 1397 05c6 0D       		.uleb128 0xd
 1398 05c7 E3060000 		.4byte	.LASF65
 1399 05cb 08       		.byte	0x8
 1400 05cc 3B       		.byte	0x3b
 1401 05cd CA000000 		.4byte	0xca
 1402 05d1 2402     		.2byte	0x224
 1403 05d3 0D       		.uleb128 0xd
 1404 05d4 530F0000 		.4byte	.LASF66
 1405 05d8 08       		.byte	0x8
 1406 05d9 3C       		.byte	0x3c
 1407 05da CA000000 		.4byte	0xca
 1408 05de 2802     		.2byte	0x228
 1409 05e0 0D       		.uleb128 0xd
 1410 05e1 C3060000 		.4byte	.LASF67
 1411 05e5 08       		.byte	0x8
 1412 05e6 3D       		.byte	0x3d
 1413 05e7 CF000000 		.4byte	0xcf
 1414 05eb 2C02     		.2byte	0x22c
 1415 05ed 0D       		.uleb128 0xd
 1416 05ee ED090000 		.4byte	.LASF68
 1417 05f2 08       		.byte	0x8
 1418 05f3 3E       		.byte	0x3e
 1419 05f4 CA000000 		.4byte	0xca
 1420 05f8 3002     		.2byte	0x230
 1421 05fa 0D       		.uleb128 0xd
 1422 05fb C9070000 		.4byte	.LASF69
 1423 05ff 08       		.byte	0x8
 1424 0600 3F       		.byte	0x3f
 1425 0601 CA000000 		.4byte	0xca
 1426 0605 3402     		.2byte	0x234
 1427 0607 0D       		.uleb128 0xd
 1428 0608 B4050000 		.4byte	.LASF70
 1429 060c 08       		.byte	0x8
 1430 060d 40       		.byte	0x40
 1431 060e CA000000 		.4byte	0xca
 1432 0612 3802     		.2byte	0x238
 1433 0614 0D       		.uleb128 0xd
 1434 0615 30000000 		.4byte	.LASF71
 1435 0619 08       		.byte	0x8
 1436 061a 41       		.byte	0x41
 1437 061b CF000000 		.4byte	0xcf
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 118
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 118
>>>>>>> Isac


 1438 061f 3C02     		.2byte	0x23c
 1439 0621 0D       		.uleb128 0xd
 1440 0622 35010000 		.4byte	.LASF72
 1441 0626 08       		.byte	0x8
 1442 0627 42       		.byte	0x42
 1443 0628 CF000000 		.4byte	0xcf
 1444 062c 4002     		.2byte	0x240
 1445 062e 0D       		.uleb128 0xd
 1446 062f 890C0000 		.4byte	.LASF73
 1447 0633 08       		.byte	0x8
 1448 0634 43       		.byte	0x43
 1449 0635 6C070000 		.4byte	0x76c
 1450 0639 4402     		.2byte	0x244
 1451 063b 0D       		.uleb128 0xd
 1452 063c 17050000 		.4byte	.LASF74
 1453 0640 08       		.byte	0x8
 1454 0641 44       		.byte	0x44
 1455 0642 CA000000 		.4byte	0xca
 1456 0646 8002     		.2byte	0x280
 1457 0648 0D       		.uleb128 0xd
 1458 0649 930C0000 		.4byte	.LASF75
 1459 064d 08       		.byte	0x8
 1460 064e 45       		.byte	0x45
 1461 064f 76070000 		.4byte	0x776
 1462 0653 8402     		.2byte	0x284
 1463 0655 0D       		.uleb128 0xd
 1464 0656 52020000 		.4byte	.LASF76
 1465 065a 08       		.byte	0x8
 1466 065b 46       		.byte	0x46
 1467 065c CF000000 		.4byte	0xcf
 1468 0660 9002     		.2byte	0x290
 1469 0662 0D       		.uleb128 0xd
 1470 0663 87040000 		.4byte	.LASF77
 1471 0667 08       		.byte	0x8
 1472 0668 47       		.byte	0x47
 1473 0669 80070000 		.4byte	0x780
 1474 066d 9402     		.2byte	0x294
 1475 066f 0D       		.uleb128 0xd
 1476 0670 1D110000 		.4byte	.LASF78
 1477 0674 08       		.byte	0x8
 1478 0675 48       		.byte	0x48
 1479 0676 CF000000 		.4byte	0xcf
 1480 067a A002     		.2byte	0x2a0
 1481 067c 0D       		.uleb128 0xd
 1482 067d 75070000 		.4byte	.LASF79
 1483 0681 08       		.byte	0x8
 1484 0682 49       		.byte	0x49
 1485 0683 CF000000 		.4byte	0xcf
 1486 0687 A402     		.2byte	0x2a4
 1487 0689 0D       		.uleb128 0xd
 1488 068a AC0C0000 		.4byte	.LASF80
 1489 068e 08       		.byte	0x8
 1490 068f 4A       		.byte	0x4a
 1491 0690 8A070000 		.4byte	0x78a
 1492 0694 A802     		.2byte	0x2a8
 1493 0696 0D       		.uleb128 0xd
<<<<<<< HEAD
 1494 0697 7D0E0000 		.4byte	.LASF81
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 119
=======
 1494 0697 970E0000 		.4byte	.LASF81
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 119
>>>>>>> Isac


 1495 069b 08       		.byte	0x8
 1496 069c 4B       		.byte	0x4b
 1497 069d CA000000 		.4byte	0xca
 1498 06a1 0003     		.2byte	0x300
 1499 06a3 0D       		.uleb128 0xd
 1500 06a4 860A0000 		.4byte	.LASF82
 1501 06a8 08       		.byte	0x8
 1502 06a9 4C       		.byte	0x4c
 1503 06aa CA000000 		.4byte	0xca
 1504 06ae 0403     		.2byte	0x304
 1505 06b0 0D       		.uleb128 0xd
 1506 06b1 B60C0000 		.4byte	.LASF83
 1507 06b5 08       		.byte	0x8
 1508 06b6 4D       		.byte	0x4d
 1509 06b7 A4070000 		.4byte	0x7a4
 1510 06bb 0803     		.2byte	0x308
 1511 06bd 0D       		.uleb128 0xd
 1512 06be 78100000 		.4byte	.LASF84
 1513 06c2 08       		.byte	0x8
 1514 06c3 4E       		.byte	0x4e
 1515 06c4 CA000000 		.4byte	0xca
 1516 06c8 4003     		.2byte	0x340
 1517 06ca 0D       		.uleb128 0xd
 1518 06cb DC0C0000 		.4byte	.LASF85
 1519 06cf 08       		.byte	0x8
 1520 06d0 4F       		.byte	0x4f
 1521 06d1 CA000000 		.4byte	0xca
 1522 06d5 4403     		.2byte	0x344
 1523 06d7 0D       		.uleb128 0xd
 1524 06d8 AB100000 		.4byte	.LASF86
 1525 06dc 08       		.byte	0x8
 1526 06dd 50       		.byte	0x50
 1527 06de CF000000 		.4byte	0xcf
 1528 06e2 4803     		.2byte	0x348
 1529 06e4 0D       		.uleb128 0xd
 1530 06e5 6E0F0000 		.4byte	.LASF87
 1531 06e9 08       		.byte	0x8
 1532 06ea 51       		.byte	0x51
 1533 06eb BF070000 		.4byte	0x7bf
 1534 06ef 4C03     		.2byte	0x34c
 1535 06f1 0D       		.uleb128 0xd
 1536 06f2 FC0E0000 		.4byte	.LASF88
 1537 06f6 08       		.byte	0x8
 1538 06f7 52       		.byte	0x52
 1539 06f8 CA000000 		.4byte	0xca
 1540 06fc 000F     		.2byte	0xf00
 1541 06fe 0D       		.uleb128 0xd
 1542 06ff 060F0000 		.4byte	.LASF89
 1543 0703 08       		.byte	0x8
 1544 0704 53       		.byte	0x53
 1545 0705 CA000000 		.4byte	0xca
 1546 0709 040F     		.2byte	0xf04
 1547 070b 00       		.byte	0
 1548 070c 05       		.uleb128 0x5
 1549 070d D4000000 		.4byte	0xd4
 1550 0711 06       		.uleb128 0x6
 1551 0712 0C070000 		.4byte	0x70c
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 120
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 120
>>>>>>> Isac


 1552 0716 07       		.uleb128 0x7
 1553 0717 CF000000 		.4byte	0xcf
 1554 071b 26070000 		.4byte	0x726
 1555 071f 08       		.uleb128 0x8
 1556 0720 C3000000 		.4byte	0xc3
 1557 0724 15       		.byte	0x15
 1558 0725 00       		.byte	0
 1559 0726 05       		.uleb128 0x5
 1560 0727 16070000 		.4byte	0x716
 1561 072b 06       		.uleb128 0x6
 1562 072c 26070000 		.4byte	0x726
 1563 0730 05       		.uleb128 0x5
 1564 0731 F4000000 		.4byte	0xf4
 1565 0735 05       		.uleb128 0x5
 1566 0736 54040000 		.4byte	0x454
 1567 073a 06       		.uleb128 0x6
 1568 073b 35070000 		.4byte	0x735
 1569 073f 05       		.uleb128 0x5
 1570 0740 54040000 		.4byte	0x454
 1571 0744 06       		.uleb128 0x6
 1572 0745 3F070000 		.4byte	0x73f
 1573 0749 05       		.uleb128 0x5
 1574 074a 54040000 		.4byte	0x454
 1575 074e 06       		.uleb128 0x6
 1576 074f 49070000 		.4byte	0x749
 1577 0753 05       		.uleb128 0x5
 1578 0754 54040000 		.4byte	0x454
 1579 0758 06       		.uleb128 0x6
 1580 0759 53070000 		.4byte	0x753
 1581 075d 05       		.uleb128 0x5
 1582 075e 54040000 		.4byte	0x454
 1583 0762 06       		.uleb128 0x6
 1584 0763 5D070000 		.4byte	0x75d
 1585 0767 05       		.uleb128 0x5
 1586 0768 74040000 		.4byte	0x474
 1587 076c 06       		.uleb128 0x6
 1588 076d 67070000 		.4byte	0x767
 1589 0771 05       		.uleb128 0x5
 1590 0772 64040000 		.4byte	0x464
 1591 0776 06       		.uleb128 0x6
 1592 0777 71070000 		.4byte	0x771
 1593 077b 05       		.uleb128 0x5
 1594 077c 64040000 		.4byte	0x464
 1595 0780 06       		.uleb128 0x6
 1596 0781 7B070000 		.4byte	0x77b
 1597 0785 05       		.uleb128 0x5
 1598 0786 16070000 		.4byte	0x716
 1599 078a 06       		.uleb128 0x6
 1600 078b 85070000 		.4byte	0x785
 1601 078f 07       		.uleb128 0x7
 1602 0790 CF000000 		.4byte	0xcf
 1603 0794 9F070000 		.4byte	0x79f
 1604 0798 08       		.uleb128 0x8
 1605 0799 C3000000 		.4byte	0xc3
 1606 079d 0D       		.byte	0xd
 1607 079e 00       		.byte	0
 1608 079f 05       		.uleb128 0x5
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 121
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 121
>>>>>>> Isac


 1609 07a0 8F070000 		.4byte	0x78f
 1610 07a4 06       		.uleb128 0x6
 1611 07a5 9F070000 		.4byte	0x79f
 1612 07a9 07       		.uleb128 0x7
 1613 07aa CF000000 		.4byte	0xcf
 1614 07ae BA070000 		.4byte	0x7ba
 1615 07b2 0E       		.uleb128 0xe
 1616 07b3 C3000000 		.4byte	0xc3
 1617 07b7 EC02     		.2byte	0x2ec
 1618 07b9 00       		.byte	0
 1619 07ba 05       		.uleb128 0x5
 1620 07bb A9070000 		.4byte	0x7a9
 1621 07bf 06       		.uleb128 0x6
 1622 07c0 BA070000 		.4byte	0x7ba
 1623 07c4 03       		.uleb128 0x3
 1624 07c5 AB060000 		.4byte	.LASF90
 1625 07c9 08       		.byte	0x8
 1626 07ca 54       		.byte	0x54
 1627 07cb 84040000 		.4byte	0x484
 1628 07cf 0F       		.uleb128 0xf
 1629 07d0 62050000 		.4byte	.LASF91
 1630 07d4 09       		.byte	0x9
 1631 07d5 5206     		.2byte	0x652
 1632 07d7 C4070000 		.4byte	0x7c4
 1633 07db 02       		.uleb128 0x2
 1634 07dc 08       		.byte	0x8
 1635 07dd 04       		.byte	0x4
 1636 07de 2E0B0000 		.4byte	.LASF92
 1637 07e2 09       		.uleb128 0x9
 1638 07e3 B8       		.byte	0xb8
 1639 07e4 0A       		.byte	0xa
 1640 07e5 34       		.byte	0x34
 1641 07e6 F30B0000 		.4byte	0xbf3
 1642 07ea 0A       		.uleb128 0xa
 1643 07eb BF010000 		.4byte	.LASF93
 1644 07ef 0A       		.byte	0xa
 1645 07f0 37       		.byte	0x37
 1646 07f1 B8000000 		.4byte	0xb8
 1647 07f5 00       		.byte	0
 1648 07f6 0A       		.uleb128 0xa
 1649 07f7 1A040000 		.4byte	.LASF94
 1650 07fb 0A       		.byte	0xa
 1651 07fc 38       		.byte	0x38
 1652 07fd B8000000 		.4byte	0xb8
 1653 0801 04       		.byte	0x4
 1654 0802 0A       		.uleb128 0xa
 1655 0803 E2000000 		.4byte	.LASF95
 1656 0807 0A       		.byte	0xa
 1657 0808 39       		.byte	0x39
 1658 0809 B8000000 		.4byte	0xb8
 1659 080d 08       		.byte	0x8
 1660 080e 0A       		.uleb128 0xa
 1661 080f BE000000 		.4byte	.LASF96
 1662 0813 0A       		.byte	0xa
 1663 0814 3A       		.byte	0x3a
 1664 0815 B8000000 		.4byte	0xb8
 1665 0819 0C       		.byte	0xc
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 122
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 122
>>>>>>> Isac


 1666 081a 0A       		.uleb128 0xa
 1667 081b 430B0000 		.4byte	.LASF97
 1668 081f 0A       		.byte	0xa
 1669 0820 3B       		.byte	0x3b
 1670 0821 B8000000 		.4byte	0xb8
 1671 0825 10       		.byte	0x10
 1672 0826 0A       		.uleb128 0xa
 1673 0827 8F090000 		.4byte	.LASF98
 1674 082b 0A       		.byte	0xa
 1675 082c 3C       		.byte	0x3c
 1676 082d B8000000 		.4byte	0xb8
 1677 0831 14       		.byte	0x14
 1678 0832 0A       		.uleb128 0xa
 1679 0833 26060000 		.4byte	.LASF99
 1680 0837 0A       		.byte	0xa
 1681 0838 3D       		.byte	0x3d
 1682 0839 B8000000 		.4byte	0xb8
 1683 083d 18       		.byte	0x18
 1684 083e 0A       		.uleb128 0xa
 1685 083f F1100000 		.4byte	.LASF100
 1686 0843 0A       		.byte	0xa
 1687 0844 3E       		.byte	0x3e
 1688 0845 B8000000 		.4byte	0xb8
 1689 0849 1C       		.byte	0x1c
 1690 084a 0A       		.uleb128 0xa
 1691 084b 20080000 		.4byte	.LASF101
 1692 084f 0A       		.byte	0xa
 1693 0850 3F       		.byte	0x3f
 1694 0851 B8000000 		.4byte	0xb8
 1695 0855 20       		.byte	0x20
 1696 0856 0A       		.uleb128 0xa
 1697 0857 37080000 		.4byte	.LASF102
 1698 085b 0A       		.byte	0xa
 1699 085c 40       		.byte	0x40
 1700 085d B8000000 		.4byte	0xb8
 1701 0861 24       		.byte	0x24
 1702 0862 0A       		.uleb128 0xa
 1703 0863 F80C0000 		.4byte	.LASF103
 1704 0867 0A       		.byte	0xa
 1705 0868 43       		.byte	0x43
 1706 0869 97000000 		.4byte	0x97
 1707 086d 28       		.byte	0x28
 1708 086e 0A       		.uleb128 0xa
 1709 086f E2030000 		.4byte	.LASF104
 1710 0873 0A       		.byte	0xa
 1711 0874 44       		.byte	0x44
 1712 0875 97000000 		.4byte	0x97
 1713 0879 29       		.byte	0x29
 1714 087a 0A       		.uleb128 0xa
 1715 087b C10B0000 		.4byte	.LASF105
 1716 087f 0A       		.byte	0xa
 1717 0880 45       		.byte	0x45
 1718 0881 97000000 		.4byte	0x97
 1719 0885 2A       		.byte	0x2a
 1720 0886 0A       		.uleb128 0xa
 1721 0887 190D0000 		.4byte	.LASF106
 1722 088b 0A       		.byte	0xa
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 123
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 123
>>>>>>> Isac


 1723 088c 46       		.byte	0x46
 1724 088d 97000000 		.4byte	0x97
 1725 0891 2B       		.byte	0x2b
 1726 0892 0A       		.uleb128 0xa
 1727 0893 050D0000 		.4byte	.LASF107
 1728 0897 0A       		.byte	0xa
 1729 0898 47       		.byte	0x47
 1730 0899 97000000 		.4byte	0x97
 1731 089d 2C       		.byte	0x2c
 1732 089e 0A       		.uleb128 0xa
 1733 089f 5C0E0000 		.4byte	.LASF108
 1734 08a3 0A       		.byte	0xa
 1735 08a4 48       		.byte	0x48
 1736 08a5 97000000 		.4byte	0x97
 1737 08a9 2D       		.byte	0x2d
 1738 08aa 0A       		.uleb128 0xa
 1739 08ab D9110000 		.4byte	.LASF109
 1740 08af 0A       		.byte	0xa
 1741 08b0 49       		.byte	0x49
 1742 08b1 97000000 		.4byte	0x97
 1743 08b5 2E       		.byte	0x2e
 1744 08b6 0A       		.uleb128 0xa
 1745 08b7 C9100000 		.4byte	.LASF110
 1746 08bb 0A       		.byte	0xa
 1747 08bc 4A       		.byte	0x4a
 1748 08bd 97000000 		.4byte	0x97
 1749 08c1 2F       		.byte	0x2f
 1750 08c2 0A       		.uleb128 0xa
 1751 08c3 3B030000 		.4byte	.LASF111
 1752 08c7 0A       		.byte	0xa
 1753 08c8 4B       		.byte	0x4b
 1754 08c9 97000000 		.4byte	0x97
 1755 08cd 30       		.byte	0x30
 1756 08ce 0A       		.uleb128 0xa
 1757 08cf 7B0A0000 		.4byte	.LASF112
 1758 08d3 0A       		.byte	0xa
 1759 08d4 4E       		.byte	0x4e
 1760 08d5 97000000 		.4byte	0x97
 1761 08d9 31       		.byte	0x31
 1762 08da 0A       		.uleb128 0xa
 1763 08db 54100000 		.4byte	.LASF113
 1764 08df 0A       		.byte	0xa
 1765 08e0 4F       		.byte	0x4f
 1766 08e1 97000000 		.4byte	0x97
 1767 08e5 32       		.byte	0x32
 1768 08e6 0A       		.uleb128 0xa
 1769 08e7 F8090000 		.4byte	.LASF114
 1770 08eb 0A       		.byte	0xa
 1771 08ec 50       		.byte	0x50
 1772 08ed 97000000 		.4byte	0x97
 1773 08f1 33       		.byte	0x33
 1774 08f2 0A       		.uleb128 0xa
 1775 08f3 89010000 		.4byte	.LASF115
 1776 08f7 0A       		.byte	0xa
 1777 08f8 51       		.byte	0x51
 1778 08f9 97000000 		.4byte	0x97
 1779 08fd 34       		.byte	0x34
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 124
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 124
>>>>>>> Isac


 1780 08fe 0A       		.uleb128 0xa
 1781 08ff 91040000 		.4byte	.LASF116
 1782 0903 0A       		.byte	0xa
 1783 0904 52       		.byte	0x52
 1784 0905 A2000000 		.4byte	0xa2
 1785 0909 36       		.byte	0x36
 1786 090a 0A       		.uleb128 0xa
 1787 090b E9010000 		.4byte	.LASF117
 1788 090f 0A       		.byte	0xa
 1789 0910 53       		.byte	0x53
 1790 0911 A2000000 		.4byte	0xa2
 1791 0915 38       		.byte	0x38
 1792 0916 0A       		.uleb128 0xa
 1793 0917 00020000 		.4byte	.LASF118
 1794 091b 0A       		.byte	0xa
 1795 091c 54       		.byte	0x54
 1796 091d A2000000 		.4byte	0xa2
 1797 0921 3A       		.byte	0x3a
 1798 0922 0A       		.uleb128 0xa
 1799 0923 0E110000 		.4byte	.LASF119
 1800 0927 0A       		.byte	0xa
 1801 0928 55       		.byte	0x55
 1802 0929 97000000 		.4byte	0x97
 1803 092d 3C       		.byte	0x3c
 1804 092e 0A       		.uleb128 0xa
 1805 092f 3B050000 		.4byte	.LASF120
 1806 0933 0A       		.byte	0xa
 1807 0934 56       		.byte	0x56
 1808 0935 97000000 		.4byte	0x97
 1809 0939 3D       		.byte	0x3d
 1810 093a 0A       		.uleb128 0xa
 1811 093b 9E0B0000 		.4byte	.LASF121
 1812 093f 0A       		.byte	0xa
 1813 0940 57       		.byte	0x57
 1814 0941 97000000 		.4byte	0x97
 1815 0945 3E       		.byte	0x3e
 1816 0946 0A       		.uleb128 0xa
 1817 0947 A8000000 		.4byte	.LASF122
 1818 094b 0A       		.byte	0xa
 1819 094c 58       		.byte	0x58
 1820 094d 97000000 		.4byte	0x97
 1821 0951 3F       		.byte	0x3f
 1822 0952 0A       		.uleb128 0xa
 1823 0953 40010000 		.4byte	.LASF123
 1824 0957 0A       		.byte	0xa
 1825 0958 59       		.byte	0x59
 1826 0959 97000000 		.4byte	0x97
 1827 095d 40       		.byte	0x40
 1828 095e 0A       		.uleb128 0xa
 1829 095f 9D0A0000 		.4byte	.LASF124
 1830 0963 0A       		.byte	0xa
 1831 0964 5A       		.byte	0x5a
 1832 0965 97000000 		.4byte	0x97
 1833 0969 41       		.byte	0x41
 1834 096a 0A       		.uleb128 0xa
 1835 096b 31100000 		.4byte	.LASF125
 1836 096f 0A       		.byte	0xa
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 125
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 125
>>>>>>> Isac


 1837 0970 5B       		.byte	0x5b
 1838 0971 97000000 		.4byte	0x97
 1839 0975 42       		.byte	0x42
 1840 0976 0A       		.uleb128 0xa
 1841 0977 8F060000 		.4byte	.LASF126
 1842 097b 0A       		.byte	0xa
 1843 097c 5C       		.byte	0x5c
 1844 097d 97000000 		.4byte	0x97
 1845 0981 43       		.byte	0x43
 1846 0982 0A       		.uleb128 0xa
 1847 0983 4F070000 		.4byte	.LASF127
 1848 0987 0A       		.byte	0xa
 1849 0988 5D       		.byte	0x5d
 1850 0989 97000000 		.4byte	0x97
 1851 098d 44       		.byte	0x44
 1852 098e 0A       		.uleb128 0xa
 1853 098f 270D0000 		.4byte	.LASF128
 1854 0993 0A       		.byte	0xa
 1855 0994 5E       		.byte	0x5e
 1856 0995 B8000000 		.4byte	0xb8
 1857 0999 48       		.byte	0x48
 1858 099a 0A       		.uleb128 0xa
 1859 099b 7C020000 		.4byte	.LASF129
 1860 099f 0A       		.byte	0xa
 1861 09a0 5F       		.byte	0x5f
 1862 09a1 B8000000 		.4byte	0xb8
 1863 09a5 4C       		.byte	0x4c
 1864 09a6 0A       		.uleb128 0xa
 1865 09a7 0F100000 		.4byte	.LASF130
 1866 09ab 0A       		.byte	0xa
 1867 09ac 60       		.byte	0x60
 1868 09ad 97000000 		.4byte	0x97
 1869 09b1 50       		.byte	0x50
 1870 09b2 0A       		.uleb128 0xa
 1871 09b3 A2050000 		.4byte	.LASF131
 1872 09b7 0A       		.byte	0xa
 1873 09b8 61       		.byte	0x61
 1874 09b9 97000000 		.4byte	0x97
 1875 09bd 51       		.byte	0x51
 1876 09be 0A       		.uleb128 0xa
 1877 09bf 8D080000 		.4byte	.LASF132
 1878 09c3 0A       		.byte	0xa
 1879 09c4 62       		.byte	0x62
 1880 09c5 97000000 		.4byte	0x97
 1881 09c9 52       		.byte	0x52
 1882 09ca 0A       		.uleb128 0xa
 1883 09cb F0030000 		.4byte	.LASF133
 1884 09cf 0A       		.byte	0xa
 1885 09d0 63       		.byte	0x63
 1886 09d1 97000000 		.4byte	0x97
 1887 09d5 53       		.byte	0x53
 1888 09d6 0A       		.uleb128 0xa
 1889 09d7 790F0000 		.4byte	.LASF134
 1890 09db 0A       		.byte	0xa
 1891 09dc 64       		.byte	0x64
 1892 09dd 97000000 		.4byte	0x97
 1893 09e1 54       		.byte	0x54
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 126
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 126
>>>>>>> Isac


 1894 09e2 0A       		.uleb128 0xa
 1895 09e3 DF050000 		.4byte	.LASF135
 1896 09e7 0A       		.byte	0xa
 1897 09e8 65       		.byte	0x65
 1898 09e9 97000000 		.4byte	0x97
 1899 09ed 55       		.byte	0x55
 1900 09ee 0A       		.uleb128 0xa
 1901 09ef 00000000 		.4byte	.LASF136
 1902 09f3 0A       		.byte	0xa
 1903 09f4 66       		.byte	0x66
 1904 09f5 97000000 		.4byte	0x97
 1905 09f9 56       		.byte	0x56
 1906 09fa 0A       		.uleb128 0xa
 1907 09fb CB0B0000 		.4byte	.LASF137
 1908 09ff 0A       		.byte	0xa
 1909 0a00 67       		.byte	0x67
 1910 0a01 97000000 		.4byte	0x97
 1911 0a05 57       		.byte	0x57
 1912 0a06 0A       		.uleb128 0xa
 1913 0a07 27050000 		.4byte	.LASF138
 1914 0a0b 0A       		.byte	0xa
 1915 0a0c 68       		.byte	0x68
 1916 0a0d 97000000 		.4byte	0x97
 1917 0a11 58       		.byte	0x58
 1918 0a12 0A       		.uleb128 0xa
 1919 0a13 34110000 		.4byte	.LASF139
 1920 0a17 0A       		.byte	0xa
 1921 0a18 69       		.byte	0x69
 1922 0a19 97000000 		.4byte	0x97
 1923 0a1d 59       		.byte	0x59
 1924 0a1e 0A       		.uleb128 0xa
 1925 0a1f 49100000 		.4byte	.LASF140
 1926 0a23 0A       		.byte	0xa
 1927 0a24 6E       		.byte	0x6e
 1928 0a25 AD000000 		.4byte	0xad
 1929 0a29 5A       		.byte	0x5a
 1930 0a2a 0A       		.uleb128 0xa
 1931 0a2b 05010000 		.4byte	.LASF141
 1932 0a2f 0A       		.byte	0xa
 1933 0a30 6F       		.byte	0x6f
 1934 0a31 AD000000 		.4byte	0xad
 1935 0a35 5C       		.byte	0x5c
 1936 0a36 0A       		.uleb128 0xa
 1937 0a37 28080000 		.4byte	.LASF142
 1938 0a3b 0A       		.byte	0xa
 1939 0a3c 70       		.byte	0x70
 1940 0a3d 97000000 		.4byte	0x97
 1941 0a41 5E       		.byte	0x5e
 1942 0a42 0A       		.uleb128 0xa
 1943 0a43 62100000 		.4byte	.LASF143
 1944 0a47 0A       		.byte	0xa
 1945 0a48 71       		.byte	0x71
 1946 0a49 97000000 		.4byte	0x97
 1947 0a4d 5F       		.byte	0x5f
 1948 0a4e 0A       		.uleb128 0xa
 1949 0a4f 9A060000 		.4byte	.LASF144
 1950 0a53 0A       		.byte	0xa
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 127
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 127
>>>>>>> Isac


 1951 0a54 72       		.byte	0x72
 1952 0a55 97000000 		.4byte	0x97
 1953 0a59 60       		.byte	0x60
 1954 0a5a 0A       		.uleb128 0xa
 1955 0a5b 00060000 		.4byte	.LASF145
 1956 0a5f 0A       		.byte	0xa
 1957 0a60 73       		.byte	0x73
 1958 0a61 B8000000 		.4byte	0xb8
 1959 0a65 64       		.byte	0x64
 1960 0a66 0A       		.uleb128 0xa
 1961 0a67 ED110000 		.4byte	.LASF146
 1962 0a6b 0A       		.byte	0xa
 1963 0a6c 76       		.byte	0x76
 1964 0a6d AD000000 		.4byte	0xad
 1965 0a71 68       		.byte	0x68
 1966 0a72 0A       		.uleb128 0xa
 1967 0a73 4C0B0000 		.4byte	.LASF147
 1968 0a77 0A       		.byte	0xa
 1969 0a78 77       		.byte	0x77
 1970 0a79 AD000000 		.4byte	0xad
 1971 0a7d 6A       		.byte	0x6a
 1972 0a7e 0A       		.uleb128 0xa
 1973 0a7f DE090000 		.4byte	.LASF148
 1974 0a83 0A       		.byte	0xa
 1975 0a84 78       		.byte	0x78
 1976 0a85 AD000000 		.4byte	0xad
 1977 0a89 6C       		.byte	0x6c
 1978 0a8a 0A       		.uleb128 0xa
 1979 0a8b B9020000 		.4byte	.LASF149
 1980 0a8f 0A       		.byte	0xa
 1981 0a90 79       		.byte	0x79
 1982 0a91 AD000000 		.4byte	0xad
 1983 0a95 6E       		.byte	0x6e
 1984 0a96 0A       		.uleb128 0xa
 1985 0a97 A6070000 		.4byte	.LASF150
 1986 0a9b 0A       		.byte	0xa
 1987 0a9c 7B       		.byte	0x7b
 1988 0a9d 97000000 		.4byte	0x97
 1989 0aa1 70       		.byte	0x70
 1990 0aa2 0A       		.uleb128 0xa
 1991 0aa3 5F030000 		.4byte	.LASF151
 1992 0aa7 0A       		.byte	0xa
 1993 0aa8 7C       		.byte	0x7c
 1994 0aa9 97000000 		.4byte	0x97
 1995 0aad 71       		.byte	0x71
 1996 0aae 0A       		.uleb128 0xa
 1997 0aaf 5D020000 		.4byte	.LASF152
 1998 0ab3 0A       		.byte	0xa
 1999 0ab4 7D       		.byte	0x7d
 2000 0ab5 97000000 		.4byte	0x97
 2001 0ab9 72       		.byte	0x72
 2002 0aba 0A       		.uleb128 0xa
 2003 0abb 67010000 		.4byte	.LASF153
 2004 0abf 0A       		.byte	0xa
 2005 0ac0 7E       		.byte	0x7e
 2006 0ac1 97000000 		.4byte	0x97
 2007 0ac5 73       		.byte	0x73
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 128
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 128
>>>>>>> Isac


 2008 0ac6 0A       		.uleb128 0xa
 2009 0ac7 590C0000 		.4byte	.LASF154
 2010 0acb 0A       		.byte	0xa
 2011 0acc 80       		.byte	0x80
 2012 0acd AD000000 		.4byte	0xad
 2013 0ad1 74       		.byte	0x74
 2014 0ad2 0A       		.uleb128 0xa
 2015 0ad3 FE0A0000 		.4byte	.LASF155
 2016 0ad7 0A       		.byte	0xa
 2017 0ad8 81       		.byte	0x81
 2018 0ad9 AD000000 		.4byte	0xad
 2019 0add 76       		.byte	0x76
 2020 0ade 0A       		.uleb128 0xa
 2021 0adf 2E070000 		.4byte	.LASF156
 2022 0ae3 0A       		.byte	0xa
 2023 0ae4 82       		.byte	0x82
 2024 0ae5 AD000000 		.4byte	0xad
 2025 0ae9 78       		.byte	0x78
 2026 0aea 0A       		.uleb128 0xa
 2027 0aeb 5E040000 		.4byte	.LASF157
 2028 0aef 0A       		.byte	0xa
 2029 0af0 83       		.byte	0x83
 2030 0af1 AD000000 		.4byte	0xad
 2031 0af5 7A       		.byte	0x7a
 2032 0af6 0A       		.uleb128 0xa
 2033 0af7 F90D0000 		.4byte	.LASF158
 2034 0afb 0A       		.byte	0xa
 2035 0afc 86       		.byte	0x86
 2036 0afd 97000000 		.4byte	0x97
 2037 0b01 7C       		.byte	0x7c
 2038 0b02 0A       		.uleb128 0xa
 2039 0b03 20100000 		.4byte	.LASF159
 2040 0b07 0A       		.byte	0xa
 2041 0b08 87       		.byte	0x87
 2042 0b09 97000000 		.4byte	0x97
 2043 0b0d 7D       		.byte	0x7d
 2044 0b0e 0A       		.uleb128 0xa
 2045 0b0f 2D040000 		.4byte	.LASF160
 2046 0b13 0A       		.byte	0xa
 2047 0b14 88       		.byte	0x88
 2048 0b15 97000000 		.4byte	0x97
 2049 0b19 7E       		.byte	0x7e
 2050 0b1a 0A       		.uleb128 0xa
 2051 0b1b C3030000 		.4byte	.LASF161
 2052 0b1f 0A       		.byte	0xa
 2053 0b20 89       		.byte	0x89
 2054 0b21 97000000 		.4byte	0x97
 2055 0b25 7F       		.byte	0x7f
 2056 0b26 0A       		.uleb128 0xa
 2057 0b27 73040000 		.4byte	.LASF162
 2058 0b2b 0A       		.byte	0xa
 2059 0b2c 8A       		.byte	0x8a
 2060 0b2d 97000000 		.4byte	0x97
 2061 0b31 80       		.byte	0x80
 2062 0b32 0A       		.uleb128 0xa
 2063 0b33 91000000 		.4byte	.LASF163
 2064 0b37 0A       		.byte	0xa
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 129
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 129
>>>>>>> Isac


 2065 0b38 8D       		.byte	0x8d
 2066 0b39 B8000000 		.4byte	0xb8
 2067 0b3d 84       		.byte	0x84
 2068 0b3e 0A       		.uleb128 0xa
 2069 0b3f B9090000 		.4byte	.LASF164
 2070 0b43 0A       		.byte	0xa
 2071 0b44 8E       		.byte	0x8e
 2072 0b45 B8000000 		.4byte	0xb8
 2073 0b49 88       		.byte	0x88
 2074 0b4a 0A       		.uleb128 0xa
 2075 0b4b 8B100000 		.4byte	.LASF165
 2076 0b4f 0A       		.byte	0xa
 2077 0b50 8F       		.byte	0x8f
 2078 0b51 B8000000 		.4byte	0xb8
 2079 0b55 8C       		.byte	0x8c
 2080 0b56 0A       		.uleb128 0xa
 2081 0b57 440C0000 		.4byte	.LASF166
 2082 0b5b 0A       		.byte	0xa
 2083 0b5c 90       		.byte	0x90
 2084 0b5d B8000000 		.4byte	0xb8
 2085 0b61 90       		.byte	0x90
 2086 0b62 0A       		.uleb128 0xa
 2087 0b63 CF0D0000 		.4byte	.LASF167
 2088 0b67 0A       		.byte	0xa
 2089 0b68 91       		.byte	0x91
 2090 0b69 B8000000 		.4byte	0xb8
 2091 0b6d 94       		.byte	0x94
 2092 0b6e 0A       		.uleb128 0xa
 2093 0b6f 74030000 		.4byte	.LASF168
 2094 0b73 0A       		.byte	0xa
 2095 0b74 92       		.byte	0x92
 2096 0b75 B8000000 		.4byte	0xb8
 2097 0b79 98       		.byte	0x98
 2098 0b7a 0A       		.uleb128 0xa
 2099 0b7b 2B0E0000 		.4byte	.LASF169
 2100 0b7f 0A       		.byte	0xa
 2101 0b80 93       		.byte	0x93
 2102 0b81 B8000000 		.4byte	0xb8
 2103 0b85 9C       		.byte	0x9c
 2104 0b86 0A       		.uleb128 0xa
 2105 0b87 79060000 		.4byte	.LASF170
 2106 0b8b 0A       		.byte	0xa
 2107 0b8c 94       		.byte	0x94
 2108 0b8d B8000000 		.4byte	0xb8
 2109 0b91 A0       		.byte	0xa0
 2110 0b92 0A       		.uleb128 0xa
 2111 0b93 F0000000 		.4byte	.LASF171
 2112 0b97 0A       		.byte	0xa
 2113 0b98 95       		.byte	0x95
 2114 0b99 AD000000 		.4byte	0xad
 2115 0b9d A4       		.byte	0xa4
 2116 0b9e 0A       		.uleb128 0xa
 2117 0b9f 2F0C0000 		.4byte	.LASF172
 2118 0ba3 0A       		.byte	0xa
 2119 0ba4 96       		.byte	0x96
 2120 0ba5 AD000000 		.4byte	0xad
 2121 0ba9 A6       		.byte	0xa6
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 130
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 130
>>>>>>> Isac


 2122 0baa 0A       		.uleb128 0xa
 2123 0bab 820E0000 		.4byte	.LASF173
 2124 0baf 0A       		.byte	0xa
 2125 0bb0 97       		.byte	0x97
 2126 0bb1 AD000000 		.4byte	0xad
 2127 0bb5 A8       		.byte	0xa8
 2128 0bb6 0A       		.uleb128 0xa
 2129 0bb7 04080000 		.4byte	.LASF174
 2130 0bbb 0A       		.byte	0xa
 2131 0bbc 98       		.byte	0x98
 2132 0bbd AD000000 		.4byte	0xad
 2133 0bc1 AA       		.byte	0xaa
 2134 0bc2 0A       		.uleb128 0xa
 2135 0bc3 D0090000 		.4byte	.LASF175
 2136 0bc7 0A       		.byte	0xa
 2137 0bc8 99       		.byte	0x99
 2138 0bc9 AD000000 		.4byte	0xad
 2139 0bcd AC       		.byte	0xac
 2140 0bce 0A       		.uleb128 0xa
 2141 0bcf AD0A0000 		.4byte	.LASF176
 2142 0bd3 0A       		.byte	0xa
 2143 0bd4 9A       		.byte	0x9a
 2144 0bd5 AD000000 		.4byte	0xad
 2145 0bd9 AE       		.byte	0xae
 2146 0bda 0A       		.uleb128 0xa
 2147 0bdb C6020000 		.4byte	.LASF177
 2148 0bdf 0A       		.byte	0xa
 2149 0be0 9D       		.byte	0x9d
 2150 0be1 AD000000 		.4byte	0xad
 2151 0be5 B0       		.byte	0xb0
 2152 0be6 0A       		.uleb128 0xa
 2153 0be7 54000000 		.4byte	.LASF178
 2154 0beb 0A       		.byte	0xa
 2155 0bec 9E       		.byte	0x9e
 2156 0bed B8000000 		.4byte	0xb8
 2157 0bf1 B4       		.byte	0xb4
 2158 0bf2 00       		.byte	0
 2159 0bf3 03       		.uleb128 0x3
 2160 0bf4 8A030000 		.4byte	.LASF179
 2161 0bf8 0A       		.byte	0xa
 2162 0bf9 9F       		.byte	0x9f
 2163 0bfa E2070000 		.4byte	0x7e2
 2164 0bfe 0F       		.uleb128 0xf
 2165 0bff 1B0F0000 		.4byte	.LASF180
 2166 0c03 0B       		.byte	0xb
 2167 0c04 EE01     		.2byte	0x1ee
 2168 0c06 0A0C0000 		.4byte	0xc0a
 2169 0c0a 10       		.uleb128 0x10
 2170 0c0b 04       		.byte	0x4
 2171 0c0c 100C0000 		.4byte	0xc10
 2172 0c10 11       		.uleb128 0x11
 2173 0c11 0F       		.uleb128 0xf
 2174 0c12 7B0D0000 		.4byte	.LASF181
 2175 0c16 0B       		.byte	0xb
 2176 0c17 F601     		.2byte	0x1f6
 2177 0c19 1D0C0000 		.4byte	0xc1d
 2178 0c1d 02       		.uleb128 0x2
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 131
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 131
>>>>>>> Isac


 2179 0c1e 01       		.byte	0x1
 2180 0c1f 08       		.byte	0x8
 2181 0c20 0B070000 		.4byte	.LASF182
 2182 0c24 02       		.uleb128 0x2
 2183 0c25 04       		.byte	0x4
 2184 0c26 04       		.byte	0x4
 2185 0c27 DC030000 		.4byte	.LASF183
 2186 0c2b 02       		.uleb128 0x2
 2187 0c2c 08       		.byte	0x8
 2188 0c2d 04       		.byte	0x4
 2189 0c2e AB0D0000 		.4byte	.LASF184
 2190 0c32 0F       		.uleb128 0xf
 2191 0c33 740A0000 		.4byte	.LASF185
 2192 0c37 0B       		.byte	0xb
 2193 0c38 EC03     		.2byte	0x3ec
 2194 0c3a B8000000 		.4byte	0xb8
 2195 0c3e 12       		.uleb128 0x12
 2196 0c3f 04       		.byte	0x4
 2197 0c40 90000000 		.4byte	0x90
 2198 0c44 03       		.byte	0x3
 2199 0c45 FE02     		.2byte	0x2fe
 2200 0c47 6D0C0000 		.4byte	0xc6d
 2201 0c4b 13       		.uleb128 0x13
 2202 0c4c BA070000 		.4byte	.LASF186
 2203 0c50 00       		.byte	0
 2204 0c51 14       		.uleb128 0x14
 2205 0c52 2F060000 		.4byte	.LASF187
 2206 0c56 01000600 		.4byte	0x60001
 2207 0c5a 14       		.uleb128 0x14
 2208 0c5b 650A0000 		.4byte	.LASF188
 2209 0c5f 02000600 		.4byte	0x60002
 2210 0c63 14       		.uleb128 0x14
 2211 0c64 820D0000 		.4byte	.LASF189
 2212 0c68 03000600 		.4byte	0x60003
 2213 0c6c 00       		.byte	0
 2214 0c6d 0F       		.uleb128 0xf
 2215 0c6e 93070000 		.4byte	.LASF190
 2216 0c72 03       		.byte	0x3
 2217 0c73 0303     		.2byte	0x303
 2218 0c75 3E0C0000 		.4byte	0xc3e
 2219 0c79 12       		.uleb128 0x12
 2220 0c7a 01       		.byte	0x1
 2221 0c7b 2C000000 		.4byte	0x2c
 2222 0c7f 03       		.byte	0x3
 2223 0c80 0703     		.2byte	0x307
 2224 0c82 930C0000 		.4byte	0xc93
 2225 0c86 13       		.uleb128 0x13
 2226 0c87 BB0A0000 		.4byte	.LASF191
 2227 0c8b 00       		.byte	0
 2228 0c8c 13       		.uleb128 0x13
 2229 0c8d A5110000 		.4byte	.LASF192
 2230 0c91 01       		.byte	0x1
 2231 0c92 00       		.byte	0
 2232 0c93 0F       		.uleb128 0xf
 2233 0c94 9B020000 		.4byte	.LASF193
 2234 0c98 03       		.byte	0x3
 2235 0c99 0A03     		.2byte	0x30a
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 132
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 132
>>>>>>> Isac


 2236 0c9b 790C0000 		.4byte	0xc79
 2237 0c9f 12       		.uleb128 0x12
 2238 0ca0 01       		.byte	0x1
 2239 0ca1 2C000000 		.4byte	0x2c
 2240 0ca5 03       		.byte	0x3
 2241 0ca6 0E03     		.2byte	0x30e
 2242 0ca8 B90C0000 		.4byte	0xcb9
 2243 0cac 13       		.uleb128 0x13
 2244 0cad 46050000 		.4byte	.LASF194
 2245 0cb1 00       		.byte	0
 2246 0cb2 13       		.uleb128 0x13
 2247 0cb3 3B020000 		.4byte	.LASF195
 2248 0cb7 01       		.byte	0x1
 2249 0cb8 00       		.byte	0
 2250 0cb9 0F       		.uleb128 0xf
 2251 0cba B70E0000 		.4byte	.LASF196
 2252 0cbe 03       		.byte	0x3
 2253 0cbf 1103     		.2byte	0x311
 2254 0cc1 9F0C0000 		.4byte	0xc9f
 2255 0cc5 12       		.uleb128 0x12
 2256 0cc6 01       		.byte	0x1
 2257 0cc7 2C000000 		.4byte	0x2c
 2258 0ccb 03       		.byte	0x3
 2259 0ccc 1503     		.2byte	0x315
 2260 0cce DF0C0000 		.4byte	0xcdf
 2261 0cd2 13       		.uleb128 0x13
 2262 0cd3 290F0000 		.4byte	.LASF197
 2263 0cd7 00       		.byte	0
 2264 0cd8 13       		.uleb128 0x13
 2265 0cd9 56110000 		.4byte	.LASF198
 2266 0cdd 01       		.byte	0x1
 2267 0cde 00       		.byte	0
 2268 0cdf 12       		.uleb128 0x12
 2269 0ce0 01       		.byte	0x1
 2270 0ce1 2C000000 		.4byte	0x2c
 2271 0ce5 03       		.byte	0x3
 2272 0ce6 1C03     		.2byte	0x31c
 2273 0ce8 F90C0000 		.4byte	0xcf9
 2274 0cec 13       		.uleb128 0x13
 2275 0ced D20F0000 		.4byte	.LASF199
 2276 0cf1 00       		.byte	0
 2277 0cf2 13       		.uleb128 0x13
 2278 0cf3 F40B0000 		.4byte	.LASF200
 2279 0cf7 01       		.byte	0x1
 2280 0cf8 00       		.byte	0
 2281 0cf9 12       		.uleb128 0x12
 2282 0cfa 01       		.byte	0x1
 2283 0cfb 2C000000 		.4byte	0x2c
 2284 0cff 03       		.byte	0x3
 2285 0d00 1304     		.2byte	0x413
 2286 0d02 1F0D0000 		.4byte	0xd1f
 2287 0d06 13       		.uleb128 0x13
 2288 0d07 47030000 		.4byte	.LASF201
 2289 0d0b 00       		.byte	0
 2290 0d0c 13       		.uleb128 0x13
 2291 0d0d CB040000 		.4byte	.LASF202
 2292 0d11 01       		.byte	0x1
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 133
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 133
>>>>>>> Isac


 2293 0d12 13       		.uleb128 0x13
 2294 0d13 390D0000 		.4byte	.LASF203
 2295 0d17 02       		.byte	0x2
 2296 0d18 13       		.uleb128 0x13
 2297 0d19 4D010000 		.4byte	.LASF204
 2298 0d1d 03       		.byte	0x3
 2299 0d1e 00       		.byte	0
 2300 0d1f 0F       		.uleb128 0xf
 2301 0d20 76110000 		.4byte	.LASF205
 2302 0d24 03       		.byte	0x3
 2303 0d25 1804     		.2byte	0x418
 2304 0d27 F90C0000 		.4byte	0xcf9
 2305 0d2b 12       		.uleb128 0x12
 2306 0d2c 01       		.byte	0x1
 2307 0d2d 2C000000 		.4byte	0x2c
 2308 0d31 03       		.byte	0x3
 2309 0d32 9404     		.2byte	0x494
 2310 0d34 510D0000 		.4byte	0xd51
 2311 0d38 13       		.uleb128 0x13
 2312 0d39 E60E0000 		.4byte	.LASF206
 2313 0d3d 00       		.byte	0
 2314 0d3e 13       		.uleb128 0x13
 2315 0d3f 11060000 		.4byte	.LASF207
 2316 0d43 01       		.byte	0x1
 2317 0d44 13       		.uleb128 0x13
 2318 0d45 42080000 		.4byte	.LASF208
 2319 0d49 02       		.byte	0x2
 2320 0d4a 13       		.uleb128 0x13
 2321 0d4b 6F080000 		.4byte	.LASF209
 2322 0d4f 04       		.byte	0x4
 2323 0d50 00       		.byte	0
 2324 0d51 15       		.uleb128 0x15
 2325 0d52 78       		.byte	0x78
 2326 0d53 03       		.byte	0x3
 2327 0d54 0205     		.2byte	0x502
 2328 0d56 1E0E0000 		.4byte	0xe1e
 2329 0d5a 16       		.uleb128 0x16
 2330 0d5b 08050000 		.4byte	.LASF210
 2331 0d5f 03       		.byte	0x3
 2332 0d60 0405     		.2byte	0x504
 2333 0d62 B8000000 		.4byte	0xb8
 2334 0d66 00       		.byte	0
 2335 0d67 16       		.uleb128 0x16
 2336 0d68 DB0E0000 		.4byte	.LASF211
 2337 0d6c 03       		.byte	0x3
 2338 0d6d 0505     		.2byte	0x505
 2339 0d6f B8000000 		.4byte	0xb8
 2340 0d73 04       		.byte	0x4
 2341 0d74 16       		.uleb128 0x16
 2342 0d75 820B0000 		.4byte	.LASF212
 2343 0d79 03       		.byte	0x3
 2344 0d7a 0605     		.2byte	0x506
 2345 0d7c B8000000 		.4byte	0xb8
 2346 0d80 08       		.byte	0x8
 2347 0d81 16       		.uleb128 0x16
 2348 0d82 410E0000 		.4byte	.LASF213
 2349 0d86 03       		.byte	0x3
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 134
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 134
>>>>>>> Isac


 2350 0d87 0705     		.2byte	0x507
 2351 0d89 B8000000 		.4byte	0xb8
 2352 0d8d 0C       		.byte	0xc
 2353 0d8e 16       		.uleb128 0x16
 2354 0d8f B5040000 		.4byte	.LASF214
 2355 0d93 03       		.byte	0x3
 2356 0d94 0805     		.2byte	0x508
 2357 0d96 B8000000 		.4byte	0xb8
 2358 0d9a 10       		.byte	0x10
 2359 0d9b 16       		.uleb128 0x16
 2360 0d9c FA070000 		.4byte	.LASF215
 2361 0da0 03       		.byte	0x3
 2362 0da1 0905     		.2byte	0x509
 2363 0da3 1F0D0000 		.4byte	0xd1f
 2364 0da7 14       		.byte	0x14
 2365 0da8 16       		.uleb128 0x16
 2366 0da9 27070000 		.4byte	.LASF216
 2367 0dad 03       		.byte	0x3
 2368 0dae 0A05     		.2byte	0x50a
 2369 0db0 B8000000 		.4byte	0xb8
 2370 0db4 18       		.byte	0x18
 2371 0db5 16       		.uleb128 0x16
 2372 0db6 A0100000 		.4byte	.LASF217
 2373 0dba 03       		.byte	0x3
 2374 0dbb 0B05     		.2byte	0x50b
 2375 0dbd 1E0E0000 		.4byte	0xe1e
 2376 0dc1 1C       		.byte	0x1c
 2377 0dc2 16       		.uleb128 0x16
 2378 0dc3 E4110000 		.4byte	.LASF218
 2379 0dc7 03       		.byte	0x3
 2380 0dc8 0C05     		.2byte	0x50c
 2381 0dca B8000000 		.4byte	0xb8
 2382 0dce 5C       		.byte	0x5c
 2383 0dcf 16       		.uleb128 0x16
 2384 0dd0 8F020000 		.4byte	.LASF219
 2385 0dd4 03       		.byte	0x3
 2386 0dd5 0D05     		.2byte	0x50d
 2387 0dd7 B8000000 		.4byte	0xb8
 2388 0ddb 60       		.byte	0x60
 2389 0ddc 16       		.uleb128 0x16
 2390 0ddd 48110000 		.4byte	.LASF220
 2391 0de1 03       		.byte	0x3
 2392 0de2 0E05     		.2byte	0x50e
 2393 0de4 B8000000 		.4byte	0xb8
 2394 0de8 64       		.byte	0x64
 2395 0de9 16       		.uleb128 0x16
 2396 0dea 110B0000 		.4byte	.LASF221
 2397 0dee 03       		.byte	0x3
 2398 0def 0F05     		.2byte	0x50f
 2399 0df1 B8000000 		.4byte	0xb8
 2400 0df5 68       		.byte	0x68
 2401 0df6 16       		.uleb128 0x16
 2402 0df7 EA070000 		.4byte	.LASF222
 2403 0dfb 03       		.byte	0x3
 2404 0dfc 1005     		.2byte	0x510
 2405 0dfe B8000000 		.4byte	0xb8
 2406 0e02 6C       		.byte	0x6c
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 135
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 135
>>>>>>> Isac


 2407 0e03 16       		.uleb128 0x16
 2408 0e04 E3100000 		.4byte	.LASF223
 2409 0e08 03       		.byte	0x3
 2410 0e09 1105     		.2byte	0x511
 2411 0e0b 2E0E0000 		.4byte	0xe2e
 2412 0e0f 70       		.byte	0x70
 2413 0e10 16       		.uleb128 0x16
 2414 0e11 B7060000 		.4byte	.LASF224
 2415 0e15 03       		.byte	0x3
 2416 0e16 1205     		.2byte	0x512
 2417 0e18 B8000000 		.4byte	0xb8
 2418 0e1c 74       		.byte	0x74
 2419 0e1d 00       		.byte	0
 2420 0e1e 07       		.uleb128 0x7
 2421 0e1f B8000000 		.4byte	0xb8
 2422 0e23 2E0E0000 		.4byte	0xe2e
 2423 0e27 08       		.uleb128 0x8
 2424 0e28 C3000000 		.4byte	0xc3
 2425 0e2c 0F       		.byte	0xf
 2426 0e2d 00       		.byte	0
 2427 0e2e 02       		.uleb128 0x2
 2428 0e2f 01       		.byte	0x1
 2429 0e30 02       		.byte	0x2
 2430 0e31 CE050000 		.4byte	.LASF225
 2431 0e35 0F       		.uleb128 0xf
 2432 0e36 F4040000 		.4byte	.LASF226
 2433 0e3a 03       		.byte	0x3
 2434 0e3b 1305     		.2byte	0x513
 2435 0e3d 510D0000 		.4byte	0xd51
 2436 0e41 12       		.uleb128 0x12
 2437 0e42 04       		.byte	0x4
 2438 0e43 90000000 		.4byte	0x90
 2439 0e47 02       		.byte	0x2
 2440 0e48 5C02     		.2byte	0x25c
 2441 0e4a 700E0000 		.4byte	0xe70
 2442 0e4e 13       		.uleb128 0x13
 2443 0e4f 9A010000 		.4byte	.LASF227
 2444 0e53 00       		.byte	0
 2445 0e54 14       		.uleb128 0x14
 2446 0e55 1B0C0000 		.4byte	.LASF228
 2447 0e59 01004A00 		.4byte	0x4a0001
 2448 0e5d 14       		.uleb128 0x14
 2449 0e5e 0E010000 		.4byte	.LASF229
 2450 0e62 02004A00 		.4byte	0x4a0002
 2451 0e66 14       		.uleb128 0x14
 2452 0e67 6A0B0000 		.4byte	.LASF230
 2453 0e6b 03004A00 		.4byte	0x4a0003
 2454 0e6f 00       		.byte	0
 2455 0e70 0F       		.uleb128 0xf
 2456 0e71 79050000 		.4byte	.LASF231
 2457 0e75 02       		.byte	0x2
 2458 0e76 6102     		.2byte	0x261
 2459 0e78 410E0000 		.4byte	0xe41
 2460 0e7c 12       		.uleb128 0x12
 2461 0e7d 01       		.byte	0x1
 2462 0e7e 2C000000 		.4byte	0x2c
 2463 0e82 02       		.byte	0x2
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 136
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 136
>>>>>>> Isac


 2464 0e83 2107     		.2byte	0x721
 2465 0e85 A20E0000 		.4byte	0xea2
 2466 0e89 13       		.uleb128 0x13
 2467 0e8a C6000000 		.4byte	.LASF232
 2468 0e8e 00       		.byte	0
 2469 0e8f 13       		.uleb128 0x13
 2470 0e90 AC0B0000 		.4byte	.LASF233
 2471 0e94 01       		.byte	0x1
 2472 0e95 13       		.uleb128 0x13
 2473 0e96 E70A0000 		.4byte	.LASF234
 2474 0e9a 02       		.byte	0x2
 2475 0e9b 13       		.uleb128 0x13
 2476 0e9c 3C0F0000 		.4byte	.LASF235
 2477 0ea0 03       		.byte	0x3
 2478 0ea1 00       		.byte	0
 2479 0ea2 0F       		.uleb128 0xf
 2480 0ea3 940F0000 		.4byte	.LASF236
 2481 0ea7 02       		.byte	0x2
 2482 0ea8 2607     		.2byte	0x726
 2483 0eaa 7C0E0000 		.4byte	0xe7c
 2484 0eae 09       		.uleb128 0x9
 2485 0eaf 14       		.byte	0x14
 2486 0eb0 04       		.byte	0x4
 2487 0eb1 3B       		.byte	0x3b
 2488 0eb2 F30E0000 		.4byte	0xef3
 2489 0eb6 0A       		.uleb128 0xa
 2490 0eb7 D6010000 		.4byte	.LASF237
 2491 0ebb 04       		.byte	0x4
 2492 0ebc 3D       		.byte	0x3d
 2493 0ebd B8000000 		.4byte	0xb8
 2494 0ec1 00       		.byte	0
 2495 0ec2 0A       		.uleb128 0xa
 2496 0ec3 07040000 		.4byte	.LASF238
 2497 0ec7 04       		.byte	0x4
 2498 0ec8 3E       		.byte	0x3e
 2499 0ec9 B8000000 		.4byte	0xb8
 2500 0ecd 04       		.byte	0x4
 2501 0ece 0A       		.uleb128 0xa
 2502 0ecf F4010000 		.4byte	.LASF239
 2503 0ed3 04       		.byte	0x4
 2504 0ed4 3F       		.byte	0x3f
 2505 0ed5 F30E0000 		.4byte	0xef3
 2506 0ed9 08       		.byte	0x8
 2507 0eda 0A       		.uleb128 0xa
 2508 0edb EE0D0000 		.4byte	.LASF240
 2509 0edf 04       		.byte	0x4
 2510 0ee0 40       		.byte	0x40
 2511 0ee1 B8000000 		.4byte	0xb8
 2512 0ee5 0C       		.byte	0xc
 2513 0ee6 0A       		.uleb128 0xa
 2514 0ee7 890F0000 		.4byte	.LASF241
 2515 0eeb 04       		.byte	0x4
 2516 0eec 45       		.byte	0x45
 2517 0eed B8000000 		.4byte	0xb8
 2518 0ef1 10       		.byte	0x10
 2519 0ef2 00       		.byte	0
 2520 0ef3 10       		.uleb128 0x10
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 137
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 137
>>>>>>> Isac


 2521 0ef4 04       		.byte	0x4
 2522 0ef5 F90E0000 		.4byte	0xef9
 2523 0ef9 06       		.uleb128 0x6
 2524 0efa 350E0000 		.4byte	0xe35
 2525 0efe 03       		.uleb128 0x3
 2526 0eff D8070000 		.4byte	.LASF242
 2527 0f03 04       		.byte	0x4
 2528 0f04 48       		.byte	0x48
 2529 0f05 AE0E0000 		.4byte	0xeae
 2530 0f09 17       		.uleb128 0x17
 2531 0f0a 68000000 		.4byte	.LASF245
 2532 0f0e 02       		.byte	0x2
 2533 0f0f 6F08     		.2byte	0x86f
 2534 0f11 700E0000 		.4byte	0xe70
 2535 0f15 03       		.byte	0x3
 2536 0f16 3F0F0000 		.4byte	0xf3f
 2537 0f1a 18       		.uleb128 0x18
 2538 0f1b 43070000 		.4byte	.LASF243
 2539 0f1f 02       		.byte	0x2
 2540 0f20 6F08     		.2byte	0x86f
 2541 0f22 A20E0000 		.4byte	0xea2
 2542 0f26 18       		.uleb128 0x18
 2543 0f27 7E010000 		.4byte	.LASF244
 2544 0f2b 02       		.byte	0x2
 2545 0f2c 6F08     		.2byte	0x86f
 2546 0f2e B8000000 		.4byte	0xb8
 2547 0f32 19       		.uleb128 0x19
 2548 0f33 7B0E0000 		.4byte	.LASF248
 2549 0f37 02       		.byte	0x2
 2550 0f38 7108     		.2byte	0x871
 2551 0f3a 700E0000 		.4byte	0xe70
 2552 0f3e 00       		.byte	0
 2553 0f3f 17       		.uleb128 0x17
 2554 0f40 36090000 		.4byte	.LASF246
 2555 0f44 02       		.byte	0x2
 2556 0f45 5207     		.2byte	0x752
 2557 0f47 700E0000 		.4byte	0xe70
 2558 0f4b 03       		.byte	0x3
 2559 0f4c 810F0000 		.4byte	0xf81
 2560 0f50 18       		.uleb128 0x18
 2561 0f51 43070000 		.4byte	.LASF243
 2562 0f55 02       		.byte	0x2
 2563 0f56 5207     		.2byte	0x752
 2564 0f58 A20E0000 		.4byte	0xea2
 2565 0f5c 18       		.uleb128 0x18
 2566 0f5d 7E010000 		.4byte	.LASF244
 2567 0f61 02       		.byte	0x2
 2568 0f62 5307     		.2byte	0x753
 2569 0f64 B8000000 		.4byte	0xb8
 2570 0f68 18       		.uleb128 0x18
 2571 0f69 7E070000 		.4byte	.LASF247
 2572 0f6d 02       		.byte	0x2
 2573 0f6e 5307     		.2byte	0x753
 2574 0f70 B8000000 		.4byte	0xb8
 2575 0f74 19       		.uleb128 0x19
 2576 0f75 7B0E0000 		.4byte	.LASF248
 2577 0f79 02       		.byte	0x2
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 138
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 138
>>>>>>> Isac


 2578 0f7a 5507     		.2byte	0x755
 2579 0f7c 700E0000 		.4byte	0xe70
 2580 0f80 00       		.byte	0
 2581 0f81 1A       		.uleb128 0x1a
 2582 0f82 9D0C0000 		.4byte	.LASF250
 2583 0f86 03       		.byte	0x3
 2584 0f87 9E05     		.2byte	0x59e
 2585 0f89 03       		.byte	0x3
 2586 0f8a 9B0F0000 		.4byte	0xf9b
 2587 0f8e 18       		.uleb128 0x18
 2588 0f8f 02040000 		.4byte	.LASF249
 2589 0f93 03       		.byte	0x3
 2590 0f94 9E05     		.2byte	0x59e
 2591 0f96 9B0F0000 		.4byte	0xf9b
 2592 0f9a 00       		.byte	0
 2593 0f9b 10       		.uleb128 0x10
 2594 0f9c 04       		.byte	0x4
 2595 0f9d CF070000 		.4byte	0x7cf
 2596 0fa1 1B       		.uleb128 0x1b
 2597 0fa2 150A0000 		.4byte	.LASF252
 2598 0fa6 0C       		.byte	0xc
 2599 0fa7 3C       		.byte	0x3c
 2600 0fa8 03       		.byte	0x3
 2601 0fa9 1C       		.uleb128 0x1c
 2602 0faa 360A0000 		.4byte	.LASF251
 2603 0fae 0C       		.byte	0xc
 2604 0faf 62       		.byte	0x62
 2605 0fb0 03       		.byte	0x3
 2606 0fb1 C10F0000 		.4byte	0xfc1
 2607 0fb5 1D       		.uleb128 0x1d
 2608 0fb6 7E070000 		.4byte	.LASF247
 2609 0fba 0C       		.byte	0xc
 2610 0fbb 62       		.byte	0x62
 2611 0fbc B8000000 		.4byte	0xb8
 2612 0fc0 00       		.byte	0
 2613 0fc1 1B       		.uleb128 0x1b
 2614 0fc2 5B090000 		.4byte	.LASF253
 2615 0fc6 0C       		.byte	0xc
 2616 0fc7 4C       		.byte	0x4c
 2617 0fc8 03       		.byte	0x3
 2618 0fc9 1A       		.uleb128 0x1a
 2619 0fca AA0F0000 		.4byte	.LASF254
 2620 0fce 03       		.byte	0x3
 2621 0fcf 6D06     		.2byte	0x66d
 2622 0fd1 03       		.byte	0x3
 2623 0fd2 EF0F0000 		.4byte	0xfef
 2624 0fd6 18       		.uleb128 0x18
 2625 0fd7 02040000 		.4byte	.LASF249
 2626 0fdb 03       		.byte	0x3
 2627 0fdc 6D06     		.2byte	0x66d
 2628 0fde 9B0F0000 		.4byte	0xf9b
 2629 0fe2 18       		.uleb128 0x18
 2630 0fe3 E4110000 		.4byte	.LASF218
 2631 0fe7 03       		.byte	0x3
 2632 0fe8 6D06     		.2byte	0x66d
 2633 0fea B8000000 		.4byte	0xb8
 2634 0fee 00       		.byte	0
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 139
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 139
>>>>>>> Isac


 2635 0fef 1A       		.uleb128 0x1a
 2636 0ff0 5C080000 		.4byte	.LASF255
 2637 0ff4 03       		.byte	0x3
 2638 0ff5 DB05     		.2byte	0x5db
 2639 0ff7 03       		.byte	0x3
 2640 0ff8 15100000 		.4byte	0x1015
 2641 0ffc 18       		.uleb128 0x18
 2642 0ffd 02040000 		.4byte	.LASF249
 2643 1001 03       		.byte	0x3
 2644 1002 DB05     		.2byte	0x5db
 2645 1004 9B0F0000 		.4byte	0xf9b
 2646 1008 18       		.uleb128 0x18
 2647 1009 6E060000 		.4byte	.LASF256
 2648 100d 03       		.byte	0x3
 2649 100e DB05     		.2byte	0x5db
 2650 1010 B8000000 		.4byte	0xb8
 2651 1014 00       		.byte	0
 2652 1015 1E       		.uleb128 0x1e
 2653 1016 14120000 		.4byte	.LASF257
 2654 101a 04       		.byte	0x4
 2655 101b 9203     		.2byte	0x392
 2656 101d 03       		.byte	0x3
 2657 101e 1E       		.uleb128 0x1e
 2658 101f 8E0E0000 		.4byte	.LASF258
 2659 1023 04       		.byte	0x4
 2660 1024 AE03     		.2byte	0x3ae
 2661 1026 03       		.byte	0x3
 2662 1027 17       		.uleb128 0x17
 2663 1028 510D0000 		.4byte	.LASF259
 2664 102c 02       		.byte	0x2
 2665 102d 4908     		.2byte	0x849
 2666 102f 700E0000 		.4byte	0xe70
 2667 1033 03       		.byte	0x3
 2668 1034 5D100000 		.4byte	0x105d
 2669 1038 18       		.uleb128 0x18
 2670 1039 43070000 		.4byte	.LASF243
 2671 103d 02       		.byte	0x2
 2672 103e 4908     		.2byte	0x849
 2673 1040 A20E0000 		.4byte	0xea2
 2674 1044 18       		.uleb128 0x18
 2675 1045 7E010000 		.4byte	.LASF244
 2676 1049 02       		.byte	0x2
 2677 104a 4908     		.2byte	0x849
 2678 104c B8000000 		.4byte	0xb8
 2679 1050 19       		.uleb128 0x19
 2680 1051 7B0E0000 		.4byte	.LASF248
 2681 1055 02       		.byte	0x2
 2682 1056 4B08     		.2byte	0x84b
 2683 1058 700E0000 		.4byte	0xe70
 2684 105c 00       		.byte	0
 2685 105d 1F       		.uleb128 0x1f
 2686 105e 40060000 		.4byte	.LASF260
 2687 1062 01       		.byte	0x1
 2688 1063 80       		.byte	0x80
 2689 1064 00000000 		.4byte	.LFB188
 2690 1068 90000000 		.4byte	.LFE188-.LFB188
 2691 106c 01       		.uleb128 0x1
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 140
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 140
>>>>>>> Isac


 2692 106d 9C       		.byte	0x9c
 2693 106e A4110000 		.4byte	0x11a4
 2694 1072 20       		.uleb128 0x20
 2695 1073 ED0B0000 		.4byte	.LASF263
 2696 1077 01       		.byte	0x1
 2697 1078 80       		.byte	0x80
 2698 1079 A4110000 		.4byte	0x11a4
 2699 107d 00000000 		.4byte	.LLST0
 2700 1081 21       		.uleb128 0x21
 2701 1082 D5100000 		.4byte	.LASF269
 2702 1086 01       		.byte	0x1
 2703 1087 82       		.byte	0x82
 2704 1088 2E0E0000 		.4byte	0xe2e
 2705 108c 00       		.byte	0
 2706 108d 22       		.uleb128 0x22
 2707 108e C10F0000 		.4byte	0xfc1
 2708 1092 04000000 		.4byte	.LBB38
 2709 1096 1A000000 		.4byte	.LBE38-.LBB38
 2710 109a 01       		.byte	0x1
 2711 109b 86       		.byte	0x86
 2712 109c D6100000 		.4byte	0x10d6
 2713 10a0 23       		.uleb128 0x23
 2714 10a1 090F0000 		.4byte	0xf09
 2715 10a5 04000000 		.4byte	.LBB39
 2716 10a9 1A000000 		.4byte	.LBE39-.LBB39
 2717 10ad 0C       		.byte	0xc
 2718 10ae 4E       		.byte	0x4e
 2719 10af 24       		.uleb128 0x24
 2720 10b0 260F0000 		.4byte	0xf26
 2721 10b4 2C000000 		.4byte	.LLST1
 2722 10b8 24       		.uleb128 0x24
 2723 10b9 1A0F0000 		.4byte	0xf1a
 2724 10bd 40000000 		.4byte	.LLST2
 2725 10c1 25       		.uleb128 0x25
 2726 10c2 04000000 		.4byte	.LBB40
 2727 10c6 1A000000 		.4byte	.LBE40-.LBB40
 2728 10ca 26       		.uleb128 0x26
 2729 10cb 320F0000 		.4byte	0xf32
 2730 10cf 54000000 		.4byte	.LLST3
 2731 10d3 00       		.byte	0
 2732 10d4 00       		.byte	0
 2733 10d5 00       		.byte	0
 2734 10d6 22       		.uleb128 0x22
 2735 10d7 A90F0000 		.4byte	0xfa9
 2736 10db 20000000 		.4byte	.LBB41
 2737 10df 1A000000 		.4byte	.LBE41-.LBB41
 2738 10e3 01       		.byte	0x1
 2739 10e4 87       		.byte	0x87
 2740 10e5 31110000 		.4byte	0x1131
 2741 10e9 24       		.uleb128 0x24
 2742 10ea B50F0000 		.4byte	0xfb5
 2743 10ee 6C000000 		.4byte	.LLST4
 2744 10f2 23       		.uleb128 0x23
 2745 10f3 3F0F0000 		.4byte	0xf3f
 2746 10f7 20000000 		.4byte	.LBB42
 2747 10fb 1A000000 		.4byte	.LBE42-.LBB42
 2748 10ff 0C       		.byte	0xc
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 141
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 141
>>>>>>> Isac


 2749 1100 64       		.byte	0x64
 2750 1101 24       		.uleb128 0x24
 2751 1102 680F0000 		.4byte	0xf68
 2752 1106 6C000000 		.4byte	.LLST4
 2753 110a 24       		.uleb128 0x24
 2754 110b 5C0F0000 		.4byte	0xf5c
 2755 110f 8B000000 		.4byte	.LLST6
 2756 1113 24       		.uleb128 0x24
 2757 1114 500F0000 		.4byte	0xf50
 2758 1118 9F000000 		.4byte	.LLST7
 2759 111c 25       		.uleb128 0x25
 2760 111d 20000000 		.4byte	.LBB43
 2761 1121 1A000000 		.4byte	.LBE43-.LBB43
 2762 1125 26       		.uleb128 0x26
 2763 1126 740F0000 		.4byte	0xf74
 2764 112a B3000000 		.4byte	.LLST8
 2765 112e 00       		.byte	0
 2766 112f 00       		.byte	0
 2767 1130 00       		.byte	0
 2768 1131 22       		.uleb128 0x22
 2769 1132 A10F0000 		.4byte	0xfa1
 2770 1136 3A000000 		.4byte	.LBB44
 2771 113a 34000000 		.4byte	.LBE44-.LBB44
 2772 113e 01       		.byte	0x1
 2773 113f 88       		.byte	0x88
 2774 1140 7A110000 		.4byte	0x117a
 2775 1144 23       		.uleb128 0x23
 2776 1145 27100000 		.4byte	0x1027
 2777 1149 3A000000 		.4byte	.LBB45
 2778 114d 34000000 		.4byte	.LBE45-.LBB45
 2779 1151 0C       		.byte	0xc
 2780 1152 3E       		.byte	0x3e
 2781 1153 24       		.uleb128 0x24
 2782 1154 44100000 		.4byte	0x1044
 2783 1158 CB000000 		.4byte	.LLST9
 2784 115c 24       		.uleb128 0x24
 2785 115d 38100000 		.4byte	0x1038
 2786 1161 DF000000 		.4byte	.LLST10
 2787 1165 25       		.uleb128 0x25
 2788 1166 3A000000 		.4byte	.LBB46
 2789 116a 34000000 		.4byte	.LBE46-.LBB46
 2790 116e 26       		.uleb128 0x26
 2791 116f 50100000 		.4byte	0x1050
 2792 1173 F3000000 		.4byte	.LLST11
 2793 1177 00       		.byte	0
 2794 1178 00       		.byte	0
 2795 1179 00       		.byte	0
 2796 117a 27       		.uleb128 0x27
 2797 117b 78000000 		.4byte	.LVL8
 2798 117f 17150000 		.4byte	0x1517
 2799 1183 93110000 		.4byte	0x1193
 2800 1187 28       		.uleb128 0x28
 2801 1188 01       		.uleb128 0x1
 2802 1189 50       		.byte	0x50
 2803 118a 02       		.uleb128 0x2
 2804 118b 75       		.byte	0x75
 2805 118c 00       		.sleb128 0
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 142
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 142
>>>>>>> Isac


 2806 118d 28       		.uleb128 0x28
 2807 118e 01       		.uleb128 0x1
 2808 118f 51       		.byte	0x51
 2809 1190 01       		.uleb128 0x1
 2810 1191 30       		.byte	0x30
 2811 1192 00       		.byte	0
 2812 1193 29       		.uleb128 0x29
 2813 1194 80000000 		.4byte	.LVL9
 2814 1198 23150000 		.4byte	0x1523
 2815 119c 28       		.uleb128 0x28
 2816 119d 01       		.uleb128 0x1
 2817 119e 50       		.byte	0x50
 2818 119f 02       		.uleb128 0x2
 2819 11a0 75       		.byte	0x75
 2820 11a1 00       		.sleb128 0
 2821 11a2 00       		.byte	0
 2822 11a3 00       		.byte	0
 2823 11a4 10       		.uleb128 0x10
 2824 11a5 04       		.byte	0x4
 2825 11a6 AA110000 		.4byte	0x11aa
 2826 11aa 06       		.uleb128 0x6
 2827 11ab FE0E0000 		.4byte	0xefe
 2828 11af 1F       		.uleb128 0x1f
 2829 11b0 0E0E0000 		.4byte	.LASF261
 2830 11b4 01       		.byte	0x1
 2831 11b5 E3       		.byte	0xe3
 2832 11b6 00000000 		.4byte	.LFB190
 2833 11ba 24000000 		.4byte	.LFE190-.LFB190
 2834 11be 01       		.uleb128 0x1
 2835 11bf 9C       		.byte	0x9c
 2836 11c0 F9110000 		.4byte	0x11f9
 2837 11c4 27       		.uleb128 0x27
 2838 11c5 12000000 		.4byte	.LVL11
 2839 11c9 2F150000 		.4byte	0x152f
 2840 11cd E0110000 		.4byte	0x11e0
 2841 11d1 28       		.uleb128 0x28
 2842 11d2 01       		.uleb128 0x1
 2843 11d3 50       		.byte	0x50
 2844 11d4 05       		.uleb128 0x5
 2845 11d5 0C       		.byte	0xc
 2846 11d6 00001D41 		.4byte	0x411d0000
 2847 11da 28       		.uleb128 0x28
 2848 11db 01       		.uleb128 0x1
 2849 11dc 51       		.byte	0x51
 2850 11dd 01       		.uleb128 0x1
 2851 11de 31       		.byte	0x31
 2852 11df 00       		.byte	0
 2853 11e0 29       		.uleb128 0x29
 2854 11e1 1C000000 		.4byte	.LVL12
 2855 11e5 2F150000 		.4byte	0x152f
 2856 11e9 28       		.uleb128 0x28
 2857 11ea 01       		.uleb128 0x1
 2858 11eb 50       		.byte	0x50
 2859 11ec 05       		.uleb128 0x5
 2860 11ed 0C       		.byte	0xc
 2861 11ee 00001D41 		.4byte	0x411d0000
 2862 11f2 28       		.uleb128 0x28
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 143
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 143
>>>>>>> Isac


 2863 11f3 01       		.uleb128 0x1
 2864 11f4 51       		.byte	0x51
 2865 11f5 01       		.uleb128 0x1
 2866 11f6 30       		.byte	0x30
 2867 11f7 00       		.byte	0
 2868 11f8 00       		.byte	0
 2869 11f9 1F       		.uleb128 0x1f
 2870 11fa 1B0B0000 		.4byte	.LASF262
 2871 11fe 01       		.byte	0x1
 2872 11ff FE       		.byte	0xfe
 2873 1200 00000000 		.4byte	.LFB191
 2874 1204 28000000 		.4byte	.LFE191-.LFB191
 2875 1208 01       		.uleb128 0x1
 2876 1209 9C       		.byte	0x9c
 2877 120a 1C120000 		.4byte	0x121c
 2878 120e 2A       		.uleb128 0x2a
 2879 120f 8A020000 		.4byte	.LASF264
 2880 1213 01       		.byte	0x1
 2881 1214 FE       		.byte	0xfe
 2882 1215 930C0000 		.4byte	0xc93
 2883 1219 01       		.uleb128 0x1
 2884 121a 50       		.byte	0x50
 2885 121b 00       		.byte	0
 2886 121c 2B       		.uleb128 0x2b
 2887 121d 73090000 		.4byte	.LASF265
 2888 1221 01       		.byte	0x1
 2889 1222 1A01     		.2byte	0x11a
 2890 1224 00000000 		.4byte	.LFB192
 2891 1228 02000000 		.4byte	.LFE192-.LFB192
 2892 122c 01       		.uleb128 0x1
 2893 122d 9C       		.byte	0x9c
 2894 122e 2B       		.uleb128 0x2b
 2895 122f E4040000 		.4byte	.LASF266
 2896 1233 01       		.byte	0x1
 2897 1234 3601     		.2byte	0x136
 2898 1236 00000000 		.4byte	.LFB193
 2899 123a 02000000 		.4byte	.LFE193-.LFB193
 2900 123e 01       		.uleb128 0x1
 2901 123f 9C       		.byte	0x9c
 2902 1240 2C       		.uleb128 0x2c
 2903 1241 8F0B0000 		.4byte	.LASF267
 2904 1245 01       		.byte	0x1
 2905 1246 5201     		.2byte	0x152
 2906 1248 00000000 		.4byte	.LFB194
 2907 124c 2C000000 		.4byte	.LFE194-.LFB194
 2908 1250 01       		.uleb128 0x1
 2909 1251 9C       		.byte	0x9c
 2910 1252 B4120000 		.4byte	0x12b4
 2911 1256 2D       		.uleb128 0x2d
 2912 1257 980A0000 		.4byte	.LASF268
 2913 125b 01       		.byte	0x1
 2914 125c 5201     		.2byte	0x152
 2915 125e B8000000 		.4byte	0xb8
 2916 1262 0B010000 		.4byte	.LLST12
 2917 1266 2E       		.uleb128 0x2e
 2918 1267 6A110000 		.4byte	.LASF270
 2919 126b 01       		.byte	0x1
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 144
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 144
>>>>>>> Isac


 2920 126c 5401     		.2byte	0x154
 2921 126e B8000000 		.4byte	0xb8
 2922 1272 2C010000 		.4byte	.LLST13
 2923 1276 2F       		.uleb128 0x2f
 2924 1277 C90F0000 		.4byte	0xfc9
 2925 127b 08000000 		.4byte	.LBB47
 2926 127f 14000000 		.4byte	.LBE47-.LBB47
 2927 1283 01       		.byte	0x1
 2928 1284 5801     		.2byte	0x158
 2929 1286 24       		.uleb128 0x24
 2930 1287 E20F0000 		.4byte	0xfe2
 2931 128b 4E010000 		.4byte	.LLST14
 2932 128f 24       		.uleb128 0x24
 2933 1290 D60F0000 		.4byte	0xfd6
 2934 1294 61010000 		.4byte	.LLST15
 2935 1298 29       		.uleb128 0x29
 2936 1299 14000000 		.4byte	.LVL17
 2937 129d 3B150000 		.4byte	0x153b
 2938 12a1 28       		.uleb128 0x28
 2939 12a2 01       		.uleb128 0x1
 2940 12a3 50       		.byte	0x50
 2941 12a4 05       		.uleb128 0x5
 2942 12a5 03       		.byte	0x3
 2943 12a6 00000000 		.4byte	.LC1
 2944 12aa 28       		.uleb128 0x28
 2945 12ab 01       		.uleb128 0x1
 2946 12ac 51       		.byte	0x51
 2947 12ad 03       		.uleb128 0x3
 2948 12ae 0A       		.byte	0xa
 2949 12af 6F06     		.2byte	0x66f
 2950 12b1 00       		.byte	0
 2951 12b2 00       		.byte	0
 2952 12b3 00       		.byte	0
 2953 12b4 2C       		.uleb128 0x2c
 2954 12b5 FB060000 		.4byte	.LASF271
 2955 12b9 01       		.byte	0x1
 2956 12ba 6901     		.2byte	0x169
 2957 12bc 00000000 		.4byte	.LFB195
 2958 12c0 48000000 		.4byte	.LFE195-.LFB195
 2959 12c4 01       		.uleb128 0x1
 2960 12c5 9C       		.byte	0x9c
 2961 12c6 28130000 		.4byte	0x1328
 2962 12ca 2D       		.uleb128 0x2d
 2963 12cb 6E060000 		.4byte	.LASF256
 2964 12cf 01       		.byte	0x1
 2965 12d0 6901     		.2byte	0x169
 2966 12d2 B8000000 		.4byte	0xb8
 2967 12d6 79010000 		.4byte	.LLST16
 2968 12da 2E       		.uleb128 0x2e
 2969 12db 4F060000 		.4byte	.LASF272
 2970 12df 01       		.byte	0x1
 2971 12e0 6B01     		.2byte	0x16b
 2972 12e2 320C0000 		.4byte	0xc32
 2973 12e6 A3010000 		.4byte	.LLST17
 2974 12ea 2F       		.uleb128 0x2f
 2975 12eb EF0F0000 		.4byte	0xfef
 2976 12ef 1A000000 		.4byte	.LBB49
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 145
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 145
>>>>>>> Isac


 2977 12f3 12000000 		.4byte	.LBE49-.LBB49
 2978 12f7 01       		.byte	0x1
 2979 12f8 6E01     		.2byte	0x16e
 2980 12fa 24       		.uleb128 0x24
 2981 12fb 08100000 		.4byte	0x1008
 2982 12ff C2010000 		.4byte	.LLST18
 2983 1303 24       		.uleb128 0x24
 2984 1304 FC0F0000 		.4byte	0xffc
 2985 1308 D5010000 		.4byte	.LLST19
 2986 130c 29       		.uleb128 0x29
 2987 130d 28000000 		.4byte	.LVL24
 2988 1311 3B150000 		.4byte	0x153b
 2989 1315 28       		.uleb128 0x28
 2990 1316 01       		.uleb128 0x1
 2991 1317 50       		.byte	0x50
 2992 1318 05       		.uleb128 0x5
 2993 1319 03       		.byte	0x3
 2994 131a 00000000 		.4byte	.LC1
 2995 131e 28       		.uleb128 0x28
 2996 131f 01       		.uleb128 0x1
 2997 1320 51       		.byte	0x51
 2998 1321 03       		.uleb128 0x3
 2999 1322 0A       		.byte	0xa
 3000 1323 DD05     		.2byte	0x5dd
 3001 1325 00       		.byte	0
 3002 1326 00       		.byte	0
 3003 1327 00       		.byte	0
 3004 1328 30       		.uleb128 0x30
 3005 1329 27030000 		.4byte	.LASF297
 3006 132d 01       		.byte	0x1
 3007 132e 8201     		.2byte	0x182
 3008 1330 B8000000 		.4byte	0xb8
 3009 1334 00000000 		.4byte	.LFB196
 3010 1338 1C000000 		.4byte	.LFE196-.LFB196
 3011 133c 01       		.uleb128 0x1
 3012 133d 9C       		.byte	0x9c
 3013 133e 86130000 		.4byte	0x1386
 3014 1342 2D       		.uleb128 0x2d
 3015 1343 660F0000 		.4byte	.LASF273
 3016 1347 01       		.byte	0x1
 3017 1348 8201     		.2byte	0x182
 3018 134a B90C0000 		.4byte	0xcb9
 3019 134e ED010000 		.4byte	.LLST20
 3020 1352 2E       		.uleb128 0x2e
 3021 1353 C20F0000 		.4byte	.LASF274
 3022 1357 01       		.byte	0x1
 3023 1358 8401     		.2byte	0x184
 3024 135a 320C0000 		.4byte	0xc32
 3025 135e 0E020000 		.4byte	.LLST21
 3026 1362 2E       		.uleb128 0x2e
 3027 1363 40040000 		.4byte	.LASF275
 3028 1367 01       		.byte	0x1
 3029 1368 8501     		.2byte	0x185
 3030 136a 6D0C0000 		.4byte	0xc6d
 3031 136e 2D020000 		.4byte	.LLST22
 3032 1372 29       		.uleb128 0x29
 3033 1373 0A000000 		.4byte	.LVL30
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 146
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 146
>>>>>>> Isac


 3034 1377 47150000 		.4byte	0x1547
 3035 137b 28       		.uleb128 0x28
 3036 137c 01       		.uleb128 0x1
 3037 137d 50       		.byte	0x50
 3038 137e 05       		.uleb128 0x5
 3039 137f 0C       		.byte	0xc
 3040 1380 00001D41 		.4byte	0x411d0000
 3041 1384 00       		.byte	0
 3042 1385 00       		.byte	0
 3043 1386 2C       		.uleb128 0x2c
 3044 1387 9E040000 		.4byte	.LASF276
 3045 138b 01       		.byte	0x1
 3046 138c 9F01     		.2byte	0x19f
 3047 138e 00000000 		.4byte	.LFB197
 3048 1392 28000000 		.4byte	.LFE197-.LFB197
 3049 1396 01       		.uleb128 0x1
 3050 1397 9C       		.byte	0x9c
 3051 1398 B3130000 		.4byte	0x13b3
 3052 139c 31       		.uleb128 0x31
 3053 139d C4050000 		.4byte	.LASF277
 3054 13a1 01       		.byte	0x1
 3055 13a2 A101     		.2byte	0x1a1
 3056 13a4 B8000000 		.4byte	0xb8
 3057 13a8 00       		.byte	0
 3058 13a9 32       		.uleb128 0x32
 3059 13aa 1E000000 		.4byte	.LVL35
 3060 13ae 5D100000 		.4byte	0x105d
 3061 13b2 00       		.byte	0
 3062 13b3 1F       		.uleb128 0x1f
 3063 13b4 0D050000 		.4byte	.LASF278
 3064 13b8 01       		.byte	0x1
 3065 13b9 41       		.byte	0x41
 3066 13ba 00000000 		.4byte	.LFB186
 3067 13be 28000000 		.4byte	.LFE186-.LFB186
 3068 13c2 01       		.uleb128 0x1
 3069 13c3 9C       		.byte	0x9c
 3070 13c4 F9130000 		.4byte	0x13f9
 3071 13c8 22       		.uleb128 0x22
 3072 13c9 15100000 		.4byte	0x1015
 3073 13cd 18000000 		.4byte	.LBB51
 3074 13d1 06000000 		.4byte	.LBE51-.LBB51
 3075 13d5 01       		.byte	0x1
 3076 13d6 49       		.byte	0x49
 3077 13d7 EF130000 		.4byte	0x13ef
 3078 13db 29       		.uleb128 0x29
 3079 13dc 1E000000 		.4byte	.LVL37
 3080 13e0 53150000 		.4byte	0x1553
 3081 13e4 28       		.uleb128 0x28
 3082 13e5 01       		.uleb128 0x1
 3083 13e6 50       		.byte	0x50
 3084 13e7 05       		.uleb128 0x5
 3085 13e8 0C       		.byte	0xc
 3086 13e9 00001D41 		.4byte	0x411d0000
 3087 13ed 00       		.byte	0
 3088 13ee 00       		.byte	0
 3089 13ef 32       		.uleb128 0x32
 3090 13f0 0E000000 		.4byte	.LVL36
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 147
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 147
>>>>>>> Isac


 3091 13f4 86130000 		.4byte	0x1386
 3092 13f8 00       		.byte	0
 3093 13f9 1F       		.uleb128 0x1f
 3094 13fa 5E0B0000 		.4byte	.LASF279
 3095 13fe 01       		.byte	0x1
 3096 13ff 5E       		.byte	0x5e
 3097 1400 00000000 		.4byte	.LFB187
 3098 1404 08000000 		.4byte	.LFE187-.LFB187
 3099 1408 01       		.uleb128 0x1
 3100 1409 9C       		.byte	0x9c
 3101 140a 27140000 		.4byte	0x1427
 3102 140e 20       		.uleb128 0x20
 3103 140f 5D0A0000 		.4byte	.LASF280
 3104 1413 01       		.byte	0x1
 3105 1414 5E       		.byte	0x5e
 3106 1415 FE0B0000 		.4byte	0xbfe
 3107 1419 4B020000 		.4byte	.LLST23
 3108 141d 32       		.uleb128 0x32
 3109 141e 06000000 		.4byte	.LVL39
 3110 1422 B3130000 		.4byte	0x13b3
 3111 1426 00       		.byte	0
 3112 1427 1F       		.uleb128 0x1f
 3113 1428 040A0000 		.4byte	.LASF281
 3114 142c 01       		.byte	0x1
 3115 142d AA       		.byte	0xaa
 3116 142e 00000000 		.4byte	.LFB189
 3117 1432 5C000000 		.4byte	.LFE189-.LFB189
 3118 1436 01       		.uleb128 0x1
 3119 1437 9C       		.byte	0x9c
 3120 1438 AD140000 		.4byte	0x14ad
 3121 143c 20       		.uleb128 0x20
 3122 143d ED0B0000 		.4byte	.LASF263
 3123 1441 01       		.byte	0x1
 3124 1442 AA       		.byte	0xaa
 3125 1443 B8000000 		.4byte	0xb8
 3126 1447 6C020000 		.4byte	.LLST24
 3127 144b 20       		.uleb128 0x20
 3128 144c 2D010000 		.4byte	.LASF282
 3129 1450 01       		.byte	0x1
 3130 1451 AA       		.byte	0xaa
 3131 1452 B8000000 		.4byte	0xb8
 3132 1456 98020000 		.4byte	.LLST25
 3133 145a 22       		.uleb128 0x22
 3134 145b 1E100000 		.4byte	0x101e
 3135 145f 0A000000 		.4byte	.LBB53
 3136 1463 0A000000 		.4byte	.LBE53-.LBB53
 3137 1467 01       		.byte	0x1
 3138 1468 B0       		.byte	0xb0
 3139 1469 88140000 		.4byte	0x1488
 3140 146d 2F       		.uleb128 0x2f
 3141 146e 810F0000 		.4byte	0xf81
 3142 1472 0A000000 		.4byte	.LBB54
 3143 1476 0A000000 		.4byte	.LBE54-.LBB54
 3144 147a 04       		.byte	0x4
 3145 147b B003     		.2byte	0x3b0
 3146 147d 24       		.uleb128 0x24
 3147 147e 8E0F0000 		.4byte	0xf8e
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 148
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 148
>>>>>>> Isac


 3148 1482 C4020000 		.4byte	.LLST26
 3149 1486 00       		.byte	0
 3150 1487 00       		.byte	0
 3151 1488 32       		.uleb128 0x32
 3152 1489 24000000 		.4byte	.LVL43
 3153 148d 86130000 		.4byte	0x1386
 3154 1491 32       		.uleb128 0x32
 3155 1492 3C000000 		.4byte	.LVL44
 3156 1496 5D100000 		.4byte	0x105d
 3157 149a 32       		.uleb128 0x32
 3158 149b 48000000 		.4byte	.LVL45
 3159 149f B3130000 		.4byte	0x13b3
 3160 14a3 32       		.uleb128 0x32
 3161 14a4 4C000000 		.4byte	.LVL46
 3162 14a8 AF110000 		.4byte	0x11af
 3163 14ac 00       		.byte	0
 3164 14ad 33       		.uleb128 0x33
 3165 14ae 87000000 		.4byte	.LASF283
 3166 14b2 0A       		.byte	0xa
 3167 14b3 A7       		.byte	0xa7
 3168 14b4 B8140000 		.4byte	0x14b8
 3169 14b8 10       		.uleb128 0x10
 3170 14b9 04       		.byte	0x4
 3171 14ba BE140000 		.4byte	0x14be
 3172 14be 06       		.uleb128 0x6
 3173 14bf F30B0000 		.4byte	0xbf3
 3174 14c3 34       		.uleb128 0x34
 3175 14c4 AE030000 		.4byte	.LASF284
 3176 14c8 01       		.byte	0x1
 3177 14c9 2B       		.byte	0x2b
 3178 14ca 97000000 		.4byte	0x97
 3179 14ce 05       		.uleb128 0x5
 3180 14cf 03       		.byte	0x3
 3181 14d0 00000000 		.4byte	ADC_initVar
 3182 14d4 34       		.uleb128 0x34
 3183 14d5 82090000 		.4byte	.LASF285
 3184 14d9 01       		.byte	0x1
 3185 14da 2C       		.byte	0x2c
 3186 14db 97000000 		.4byte	0x97
 3187 14df 05       		.uleb128 0x5
 3188 14e0 03       		.byte	0x3
 3189 14e1 00000000 		.4byte	ADC_selected
 3190 14e5 34       		.uleb128 0x34
 3191 14e6 F10F0000 		.4byte	.LASF286
 3192 14ea 01       		.byte	0x1
 3193 14eb 2D       		.byte	0x2d
 3194 14ec B8000000 		.4byte	0xb8
 3195 14f0 05       		.uleb128 0x5
 3196 14f1 03       		.byte	0x3
 3197 14f2 00000000 		.4byte	ADC_currentConfig
 3198 14f6 07       		.uleb128 0x7
 3199 14f7 AA110000 		.4byte	0x11aa
 3200 14fb 06150000 		.4byte	0x1506
 3201 14ff 08       		.uleb128 0x8
 3202 1500 C3000000 		.4byte	0xc3
 3203 1504 00       		.byte	0
 3204 1505 00       		.byte	0
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 149
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 149
>>>>>>> Isac


 3205 1506 35       		.uleb128 0x35
 3206 1507 C00C0000 		.4byte	.LASF287
 3207 150b 04       		.byte	0x4
 3208 150c 6401     		.2byte	0x164
 3209 150e 12150000 		.4byte	0x1512
 3210 1512 06       		.uleb128 0x6
 3211 1513 F6140000 		.4byte	0x14f6
 3212 1517 36       		.uleb128 0x36
 3213 1518 6B050000 		.4byte	.LASF288
 3214 151c 6B050000 		.4byte	.LASF288
 3215 1520 03       		.byte	0x3
 3216 1521 3005     		.2byte	0x530
 3217 1523 36       		.uleb128 0x36
 3218 1524 03100000 		.4byte	.LASF289
 3219 1528 03100000 		.4byte	.LASF289
 3220 152c 03       		.byte	0x3
 3221 152d 2F05     		.2byte	0x52f
 3222 152f 36       		.uleb128 0x36
 3223 1530 99090000 		.4byte	.LASF290
 3224 1534 99090000 		.4byte	.LASF290
 3225 1538 03       		.byte	0x3
 3226 1539 3305     		.2byte	0x533
 3227 153b 36       		.uleb128 0x36
 3228 153c 10070000 		.4byte	.LASF291
 3229 1540 10070000 		.4byte	.LASF291
 3230 1544 0B       		.byte	0xb
 3231 1545 9203     		.2byte	0x392
 3232 1547 36       		.uleb128 0x36
 3233 1548 FD110000 		.4byte	.LASF292
 3234 154c FD110000 		.4byte	.LASF292
 3235 1550 03       		.byte	0x3
 3236 1551 3505     		.2byte	0x535
 3237 1553 36       		.uleb128 0x36
 3238 1554 4E0E0000 		.4byte	.LASF293
 3239 1558 4E0E0000 		.4byte	.LASF293
 3240 155c 03       		.byte	0x3
 3241 155d 3105     		.2byte	0x531
 3242 155f 00       		.byte	0
 3243              		.section	.debug_abbrev,"",%progbits
 3244              	.Ldebug_abbrev0:
 3245 0000 01       		.uleb128 0x1
 3246 0001 11       		.uleb128 0x11
 3247 0002 01       		.byte	0x1
 3248 0003 25       		.uleb128 0x25
 3249 0004 0E       		.uleb128 0xe
 3250 0005 13       		.uleb128 0x13
 3251 0006 0B       		.uleb128 0xb
 3252 0007 03       		.uleb128 0x3
 3253 0008 0E       		.uleb128 0xe
 3254 0009 1B       		.uleb128 0x1b
 3255 000a 0E       		.uleb128 0xe
 3256 000b 55       		.uleb128 0x55
 3257 000c 17       		.uleb128 0x17
 3258 000d 11       		.uleb128 0x11
 3259 000e 01       		.uleb128 0x1
 3260 000f 10       		.uleb128 0x10
 3261 0010 17       		.uleb128 0x17
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 150
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 150
>>>>>>> Isac


 3262 0011 00       		.byte	0
 3263 0012 00       		.byte	0
 3264 0013 02       		.uleb128 0x2
 3265 0014 24       		.uleb128 0x24
 3266 0015 00       		.byte	0
 3267 0016 0B       		.uleb128 0xb
 3268 0017 0B       		.uleb128 0xb
 3269 0018 3E       		.uleb128 0x3e
 3270 0019 0B       		.uleb128 0xb
 3271 001a 03       		.uleb128 0x3
 3272 001b 0E       		.uleb128 0xe
 3273 001c 00       		.byte	0
 3274 001d 00       		.byte	0
 3275 001e 03       		.uleb128 0x3
 3276 001f 16       		.uleb128 0x16
 3277 0020 00       		.byte	0
 3278 0021 03       		.uleb128 0x3
 3279 0022 0E       		.uleb128 0xe
 3280 0023 3A       		.uleb128 0x3a
 3281 0024 0B       		.uleb128 0xb
 3282 0025 3B       		.uleb128 0x3b
 3283 0026 0B       		.uleb128 0xb
 3284 0027 49       		.uleb128 0x49
 3285 0028 13       		.uleb128 0x13
 3286 0029 00       		.byte	0
 3287 002a 00       		.byte	0
 3288 002b 04       		.uleb128 0x4
 3289 002c 24       		.uleb128 0x24
 3290 002d 00       		.byte	0
 3291 002e 0B       		.uleb128 0xb
 3292 002f 0B       		.uleb128 0xb
 3293 0030 3E       		.uleb128 0x3e
 3294 0031 0B       		.uleb128 0xb
 3295 0032 03       		.uleb128 0x3
 3296 0033 08       		.uleb128 0x8
 3297 0034 00       		.byte	0
 3298 0035 00       		.byte	0
 3299 0036 05       		.uleb128 0x5
 3300 0037 35       		.uleb128 0x35
 3301 0038 00       		.byte	0
 3302 0039 49       		.uleb128 0x49
 3303 003a 13       		.uleb128 0x13
 3304 003b 00       		.byte	0
 3305 003c 00       		.byte	0
 3306 003d 06       		.uleb128 0x6
 3307 003e 26       		.uleb128 0x26
 3308 003f 00       		.byte	0
 3309 0040 49       		.uleb128 0x49
 3310 0041 13       		.uleb128 0x13
 3311 0042 00       		.byte	0
 3312 0043 00       		.byte	0
 3313 0044 07       		.uleb128 0x7
 3314 0045 01       		.uleb128 0x1
 3315 0046 01       		.byte	0x1
 3316 0047 49       		.uleb128 0x49
 3317 0048 13       		.uleb128 0x13
 3318 0049 01       		.uleb128 0x1
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 151
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 151
>>>>>>> Isac


 3319 004a 13       		.uleb128 0x13
 3320 004b 00       		.byte	0
 3321 004c 00       		.byte	0
 3322 004d 08       		.uleb128 0x8
 3323 004e 21       		.uleb128 0x21
 3324 004f 00       		.byte	0
 3325 0050 49       		.uleb128 0x49
 3326 0051 13       		.uleb128 0x13
 3327 0052 2F       		.uleb128 0x2f
 3328 0053 0B       		.uleb128 0xb
 3329 0054 00       		.byte	0
 3330 0055 00       		.byte	0
 3331 0056 09       		.uleb128 0x9
 3332 0057 13       		.uleb128 0x13
 3333 0058 01       		.byte	0x1
 3334 0059 0B       		.uleb128 0xb
 3335 005a 0B       		.uleb128 0xb
 3336 005b 3A       		.uleb128 0x3a
 3337 005c 0B       		.uleb128 0xb
 3338 005d 3B       		.uleb128 0x3b
 3339 005e 0B       		.uleb128 0xb
 3340 005f 01       		.uleb128 0x1
 3341 0060 13       		.uleb128 0x13
 3342 0061 00       		.byte	0
 3343 0062 00       		.byte	0
 3344 0063 0A       		.uleb128 0xa
 3345 0064 0D       		.uleb128 0xd
 3346 0065 00       		.byte	0
 3347 0066 03       		.uleb128 0x3
 3348 0067 0E       		.uleb128 0xe
 3349 0068 3A       		.uleb128 0x3a
 3350 0069 0B       		.uleb128 0xb
 3351 006a 3B       		.uleb128 0x3b
 3352 006b 0B       		.uleb128 0xb
 3353 006c 49       		.uleb128 0x49
 3354 006d 13       		.uleb128 0x13
 3355 006e 38       		.uleb128 0x38
 3356 006f 0B       		.uleb128 0xb
 3357 0070 00       		.byte	0
 3358 0071 00       		.byte	0
 3359 0072 0B       		.uleb128 0xb
 3360 0073 13       		.uleb128 0x13
 3361 0074 01       		.byte	0x1
 3362 0075 0B       		.uleb128 0xb
 3363 0076 05       		.uleb128 0x5
 3364 0077 3A       		.uleb128 0x3a
 3365 0078 0B       		.uleb128 0xb
 3366 0079 3B       		.uleb128 0x3b
 3367 007a 0B       		.uleb128 0xb
 3368 007b 01       		.uleb128 0x1
 3369 007c 13       		.uleb128 0x13
 3370 007d 00       		.byte	0
 3371 007e 00       		.byte	0
 3372 007f 0C       		.uleb128 0xc
 3373 0080 0D       		.uleb128 0xd
 3374 0081 00       		.byte	0
 3375 0082 03       		.uleb128 0x3
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 152
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 152
>>>>>>> Isac


 3376 0083 08       		.uleb128 0x8
 3377 0084 3A       		.uleb128 0x3a
 3378 0085 0B       		.uleb128 0xb
 3379 0086 3B       		.uleb128 0x3b
 3380 0087 0B       		.uleb128 0xb
 3381 0088 49       		.uleb128 0x49
 3382 0089 13       		.uleb128 0x13
 3383 008a 38       		.uleb128 0x38
 3384 008b 0B       		.uleb128 0xb
 3385 008c 00       		.byte	0
 3386 008d 00       		.byte	0
 3387 008e 0D       		.uleb128 0xd
 3388 008f 0D       		.uleb128 0xd
 3389 0090 00       		.byte	0
 3390 0091 03       		.uleb128 0x3
 3391 0092 0E       		.uleb128 0xe
 3392 0093 3A       		.uleb128 0x3a
 3393 0094 0B       		.uleb128 0xb
 3394 0095 3B       		.uleb128 0x3b
 3395 0096 0B       		.uleb128 0xb
 3396 0097 49       		.uleb128 0x49
 3397 0098 13       		.uleb128 0x13
 3398 0099 38       		.uleb128 0x38
 3399 009a 05       		.uleb128 0x5
 3400 009b 00       		.byte	0
 3401 009c 00       		.byte	0
 3402 009d 0E       		.uleb128 0xe
 3403 009e 21       		.uleb128 0x21
 3404 009f 00       		.byte	0
 3405 00a0 49       		.uleb128 0x49
 3406 00a1 13       		.uleb128 0x13
 3407 00a2 2F       		.uleb128 0x2f
 3408 00a3 05       		.uleb128 0x5
 3409 00a4 00       		.byte	0
 3410 00a5 00       		.byte	0
 3411 00a6 0F       		.uleb128 0xf
 3412 00a7 16       		.uleb128 0x16
 3413 00a8 00       		.byte	0
 3414 00a9 03       		.uleb128 0x3
 3415 00aa 0E       		.uleb128 0xe
 3416 00ab 3A       		.uleb128 0x3a
 3417 00ac 0B       		.uleb128 0xb
 3418 00ad 3B       		.uleb128 0x3b
 3419 00ae 05       		.uleb128 0x5
 3420 00af 49       		.uleb128 0x49
 3421 00b0 13       		.uleb128 0x13
 3422 00b1 00       		.byte	0
 3423 00b2 00       		.byte	0
 3424 00b3 10       		.uleb128 0x10
 3425 00b4 0F       		.uleb128 0xf
 3426 00b5 00       		.byte	0
 3427 00b6 0B       		.uleb128 0xb
 3428 00b7 0B       		.uleb128 0xb
 3429 00b8 49       		.uleb128 0x49
 3430 00b9 13       		.uleb128 0x13
 3431 00ba 00       		.byte	0
 3432 00bb 00       		.byte	0
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 153
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 153
>>>>>>> Isac


 3433 00bc 11       		.uleb128 0x11
 3434 00bd 15       		.uleb128 0x15
 3435 00be 00       		.byte	0
 3436 00bf 27       		.uleb128 0x27
 3437 00c0 19       		.uleb128 0x19
 3438 00c1 00       		.byte	0
 3439 00c2 00       		.byte	0
 3440 00c3 12       		.uleb128 0x12
 3441 00c4 04       		.uleb128 0x4
 3442 00c5 01       		.byte	0x1
 3443 00c6 0B       		.uleb128 0xb
 3444 00c7 0B       		.uleb128 0xb
 3445 00c8 49       		.uleb128 0x49
 3446 00c9 13       		.uleb128 0x13
 3447 00ca 3A       		.uleb128 0x3a
 3448 00cb 0B       		.uleb128 0xb
 3449 00cc 3B       		.uleb128 0x3b
 3450 00cd 05       		.uleb128 0x5
 3451 00ce 01       		.uleb128 0x1
 3452 00cf 13       		.uleb128 0x13
 3453 00d0 00       		.byte	0
 3454 00d1 00       		.byte	0
 3455 00d2 13       		.uleb128 0x13
 3456 00d3 28       		.uleb128 0x28
 3457 00d4 00       		.byte	0
 3458 00d5 03       		.uleb128 0x3
 3459 00d6 0E       		.uleb128 0xe
 3460 00d7 1C       		.uleb128 0x1c
 3461 00d8 0B       		.uleb128 0xb
 3462 00d9 00       		.byte	0
 3463 00da 00       		.byte	0
 3464 00db 14       		.uleb128 0x14
 3465 00dc 28       		.uleb128 0x28
 3466 00dd 00       		.byte	0
 3467 00de 03       		.uleb128 0x3
 3468 00df 0E       		.uleb128 0xe
 3469 00e0 1C       		.uleb128 0x1c
 3470 00e1 06       		.uleb128 0x6
 3471 00e2 00       		.byte	0
 3472 00e3 00       		.byte	0
 3473 00e4 15       		.uleb128 0x15
 3474 00e5 13       		.uleb128 0x13
 3475 00e6 01       		.byte	0x1
 3476 00e7 0B       		.uleb128 0xb
 3477 00e8 0B       		.uleb128 0xb
 3478 00e9 3A       		.uleb128 0x3a
 3479 00ea 0B       		.uleb128 0xb
 3480 00eb 3B       		.uleb128 0x3b
 3481 00ec 05       		.uleb128 0x5
 3482 00ed 01       		.uleb128 0x1
 3483 00ee 13       		.uleb128 0x13
 3484 00ef 00       		.byte	0
 3485 00f0 00       		.byte	0
 3486 00f1 16       		.uleb128 0x16
 3487 00f2 0D       		.uleb128 0xd
 3488 00f3 00       		.byte	0
 3489 00f4 03       		.uleb128 0x3
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 154
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 154
>>>>>>> Isac


 3490 00f5 0E       		.uleb128 0xe
 3491 00f6 3A       		.uleb128 0x3a
 3492 00f7 0B       		.uleb128 0xb
 3493 00f8 3B       		.uleb128 0x3b
 3494 00f9 05       		.uleb128 0x5
 3495 00fa 49       		.uleb128 0x49
 3496 00fb 13       		.uleb128 0x13
 3497 00fc 38       		.uleb128 0x38
 3498 00fd 0B       		.uleb128 0xb
 3499 00fe 00       		.byte	0
 3500 00ff 00       		.byte	0
 3501 0100 17       		.uleb128 0x17
 3502 0101 2E       		.uleb128 0x2e
 3503 0102 01       		.byte	0x1
 3504 0103 03       		.uleb128 0x3
 3505 0104 0E       		.uleb128 0xe
 3506 0105 3A       		.uleb128 0x3a
 3507 0106 0B       		.uleb128 0xb
 3508 0107 3B       		.uleb128 0x3b
 3509 0108 05       		.uleb128 0x5
 3510 0109 27       		.uleb128 0x27
 3511 010a 19       		.uleb128 0x19
 3512 010b 49       		.uleb128 0x49
 3513 010c 13       		.uleb128 0x13
 3514 010d 20       		.uleb128 0x20
 3515 010e 0B       		.uleb128 0xb
 3516 010f 01       		.uleb128 0x1
 3517 0110 13       		.uleb128 0x13
 3518 0111 00       		.byte	0
 3519 0112 00       		.byte	0
 3520 0113 18       		.uleb128 0x18
 3521 0114 05       		.uleb128 0x5
 3522 0115 00       		.byte	0
 3523 0116 03       		.uleb128 0x3
 3524 0117 0E       		.uleb128 0xe
 3525 0118 3A       		.uleb128 0x3a
 3526 0119 0B       		.uleb128 0xb
 3527 011a 3B       		.uleb128 0x3b
 3528 011b 05       		.uleb128 0x5
 3529 011c 49       		.uleb128 0x49
 3530 011d 13       		.uleb128 0x13
 3531 011e 00       		.byte	0
 3532 011f 00       		.byte	0
 3533 0120 19       		.uleb128 0x19
 3534 0121 34       		.uleb128 0x34
 3535 0122 00       		.byte	0
 3536 0123 03       		.uleb128 0x3
 3537 0124 0E       		.uleb128 0xe
 3538 0125 3A       		.uleb128 0x3a
 3539 0126 0B       		.uleb128 0xb
 3540 0127 3B       		.uleb128 0x3b
 3541 0128 05       		.uleb128 0x5
 3542 0129 49       		.uleb128 0x49
 3543 012a 13       		.uleb128 0x13
 3544 012b 00       		.byte	0
 3545 012c 00       		.byte	0
 3546 012d 1A       		.uleb128 0x1a
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 155
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 155
>>>>>>> Isac


 3547 012e 2E       		.uleb128 0x2e
 3548 012f 01       		.byte	0x1
 3549 0130 03       		.uleb128 0x3
 3550 0131 0E       		.uleb128 0xe
 3551 0132 3A       		.uleb128 0x3a
 3552 0133 0B       		.uleb128 0xb
 3553 0134 3B       		.uleb128 0x3b
 3554 0135 05       		.uleb128 0x5
 3555 0136 27       		.uleb128 0x27
 3556 0137 19       		.uleb128 0x19
 3557 0138 20       		.uleb128 0x20
 3558 0139 0B       		.uleb128 0xb
 3559 013a 01       		.uleb128 0x1
 3560 013b 13       		.uleb128 0x13
 3561 013c 00       		.byte	0
 3562 013d 00       		.byte	0
 3563 013e 1B       		.uleb128 0x1b
 3564 013f 2E       		.uleb128 0x2e
 3565 0140 00       		.byte	0
 3566 0141 03       		.uleb128 0x3
 3567 0142 0E       		.uleb128 0xe
 3568 0143 3A       		.uleb128 0x3a
 3569 0144 0B       		.uleb128 0xb
 3570 0145 3B       		.uleb128 0x3b
 3571 0146 0B       		.uleb128 0xb
 3572 0147 27       		.uleb128 0x27
 3573 0148 19       		.uleb128 0x19
 3574 0149 20       		.uleb128 0x20
 3575 014a 0B       		.uleb128 0xb
 3576 014b 00       		.byte	0
 3577 014c 00       		.byte	0
 3578 014d 1C       		.uleb128 0x1c
 3579 014e 2E       		.uleb128 0x2e
 3580 014f 01       		.byte	0x1
 3581 0150 03       		.uleb128 0x3
 3582 0151 0E       		.uleb128 0xe
 3583 0152 3A       		.uleb128 0x3a
 3584 0153 0B       		.uleb128 0xb
 3585 0154 3B       		.uleb128 0x3b
 3586 0155 0B       		.uleb128 0xb
 3587 0156 27       		.uleb128 0x27
 3588 0157 19       		.uleb128 0x19
 3589 0158 20       		.uleb128 0x20
 3590 0159 0B       		.uleb128 0xb
 3591 015a 01       		.uleb128 0x1
 3592 015b 13       		.uleb128 0x13
 3593 015c 00       		.byte	0
 3594 015d 00       		.byte	0
 3595 015e 1D       		.uleb128 0x1d
 3596 015f 05       		.uleb128 0x5
 3597 0160 00       		.byte	0
 3598 0161 03       		.uleb128 0x3
 3599 0162 0E       		.uleb128 0xe
 3600 0163 3A       		.uleb128 0x3a
 3601 0164 0B       		.uleb128 0xb
 3602 0165 3B       		.uleb128 0x3b
 3603 0166 0B       		.uleb128 0xb
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 156
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 156
>>>>>>> Isac


 3604 0167 49       		.uleb128 0x49
 3605 0168 13       		.uleb128 0x13
 3606 0169 00       		.byte	0
 3607 016a 00       		.byte	0
 3608 016b 1E       		.uleb128 0x1e
 3609 016c 2E       		.uleb128 0x2e
 3610 016d 00       		.byte	0
 3611 016e 03       		.uleb128 0x3
 3612 016f 0E       		.uleb128 0xe
 3613 0170 3A       		.uleb128 0x3a
 3614 0171 0B       		.uleb128 0xb
 3615 0172 3B       		.uleb128 0x3b
 3616 0173 05       		.uleb128 0x5
 3617 0174 27       		.uleb128 0x27
 3618 0175 19       		.uleb128 0x19
 3619 0176 20       		.uleb128 0x20
 3620 0177 0B       		.uleb128 0xb
 3621 0178 00       		.byte	0
 3622 0179 00       		.byte	0
 3623 017a 1F       		.uleb128 0x1f
 3624 017b 2E       		.uleb128 0x2e
 3625 017c 01       		.byte	0x1
 3626 017d 3F       		.uleb128 0x3f
 3627 017e 19       		.uleb128 0x19
 3628 017f 03       		.uleb128 0x3
 3629 0180 0E       		.uleb128 0xe
 3630 0181 3A       		.uleb128 0x3a
 3631 0182 0B       		.uleb128 0xb
 3632 0183 3B       		.uleb128 0x3b
 3633 0184 0B       		.uleb128 0xb
 3634 0185 27       		.uleb128 0x27
 3635 0186 19       		.uleb128 0x19
 3636 0187 11       		.uleb128 0x11
 3637 0188 01       		.uleb128 0x1
 3638 0189 12       		.uleb128 0x12
 3639 018a 06       		.uleb128 0x6
 3640 018b 40       		.uleb128 0x40
 3641 018c 18       		.uleb128 0x18
 3642 018d 9742     		.uleb128 0x2117
 3643 018f 19       		.uleb128 0x19
 3644 0190 01       		.uleb128 0x1
 3645 0191 13       		.uleb128 0x13
 3646 0192 00       		.byte	0
 3647 0193 00       		.byte	0
 3648 0194 20       		.uleb128 0x20
 3649 0195 05       		.uleb128 0x5
 3650 0196 00       		.byte	0
 3651 0197 03       		.uleb128 0x3
 3652 0198 0E       		.uleb128 0xe
 3653 0199 3A       		.uleb128 0x3a
 3654 019a 0B       		.uleb128 0xb
 3655 019b 3B       		.uleb128 0x3b
 3656 019c 0B       		.uleb128 0xb
 3657 019d 49       		.uleb128 0x49
 3658 019e 13       		.uleb128 0x13
 3659 019f 02       		.uleb128 0x2
 3660 01a0 17       		.uleb128 0x17
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 157
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 157
>>>>>>> Isac


 3661 01a1 00       		.byte	0
 3662 01a2 00       		.byte	0
 3663 01a3 21       		.uleb128 0x21
 3664 01a4 34       		.uleb128 0x34
 3665 01a5 00       		.byte	0
 3666 01a6 03       		.uleb128 0x3
 3667 01a7 0E       		.uleb128 0xe
 3668 01a8 3A       		.uleb128 0x3a
 3669 01a9 0B       		.uleb128 0xb
 3670 01aa 3B       		.uleb128 0x3b
 3671 01ab 0B       		.uleb128 0xb
 3672 01ac 49       		.uleb128 0x49
 3673 01ad 13       		.uleb128 0x13
 3674 01ae 1C       		.uleb128 0x1c
 3675 01af 0B       		.uleb128 0xb
 3676 01b0 00       		.byte	0
 3677 01b1 00       		.byte	0
 3678 01b2 22       		.uleb128 0x22
 3679 01b3 1D       		.uleb128 0x1d
 3680 01b4 01       		.byte	0x1
 3681 01b5 31       		.uleb128 0x31
 3682 01b6 13       		.uleb128 0x13
 3683 01b7 11       		.uleb128 0x11
 3684 01b8 01       		.uleb128 0x1
 3685 01b9 12       		.uleb128 0x12
 3686 01ba 06       		.uleb128 0x6
 3687 01bb 58       		.uleb128 0x58
 3688 01bc 0B       		.uleb128 0xb
 3689 01bd 59       		.uleb128 0x59
 3690 01be 0B       		.uleb128 0xb
 3691 01bf 01       		.uleb128 0x1
 3692 01c0 13       		.uleb128 0x13
 3693 01c1 00       		.byte	0
 3694 01c2 00       		.byte	0
 3695 01c3 23       		.uleb128 0x23
 3696 01c4 1D       		.uleb128 0x1d
 3697 01c5 01       		.byte	0x1
 3698 01c6 31       		.uleb128 0x31
 3699 01c7 13       		.uleb128 0x13
 3700 01c8 11       		.uleb128 0x11
 3701 01c9 01       		.uleb128 0x1
 3702 01ca 12       		.uleb128 0x12
 3703 01cb 06       		.uleb128 0x6
 3704 01cc 58       		.uleb128 0x58
 3705 01cd 0B       		.uleb128 0xb
 3706 01ce 59       		.uleb128 0x59
 3707 01cf 0B       		.uleb128 0xb
 3708 01d0 00       		.byte	0
 3709 01d1 00       		.byte	0
 3710 01d2 24       		.uleb128 0x24
 3711 01d3 05       		.uleb128 0x5
 3712 01d4 00       		.byte	0
 3713 01d5 31       		.uleb128 0x31
 3714 01d6 13       		.uleb128 0x13
 3715 01d7 02       		.uleb128 0x2
 3716 01d8 17       		.uleb128 0x17
 3717 01d9 00       		.byte	0
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 158
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 158
>>>>>>> Isac


 3718 01da 00       		.byte	0
 3719 01db 25       		.uleb128 0x25
 3720 01dc 0B       		.uleb128 0xb
 3721 01dd 01       		.byte	0x1
 3722 01de 11       		.uleb128 0x11
 3723 01df 01       		.uleb128 0x1
 3724 01e0 12       		.uleb128 0x12
 3725 01e1 06       		.uleb128 0x6
 3726 01e2 00       		.byte	0
 3727 01e3 00       		.byte	0
 3728 01e4 26       		.uleb128 0x26
 3729 01e5 34       		.uleb128 0x34
 3730 01e6 00       		.byte	0
 3731 01e7 31       		.uleb128 0x31
 3732 01e8 13       		.uleb128 0x13
 3733 01e9 02       		.uleb128 0x2
 3734 01ea 17       		.uleb128 0x17
 3735 01eb 00       		.byte	0
 3736 01ec 00       		.byte	0
 3737 01ed 27       		.uleb128 0x27
 3738 01ee 898201   		.uleb128 0x4109
 3739 01f1 01       		.byte	0x1
 3740 01f2 11       		.uleb128 0x11
 3741 01f3 01       		.uleb128 0x1
 3742 01f4 31       		.uleb128 0x31
 3743 01f5 13       		.uleb128 0x13
 3744 01f6 01       		.uleb128 0x1
 3745 01f7 13       		.uleb128 0x13
 3746 01f8 00       		.byte	0
 3747 01f9 00       		.byte	0
 3748 01fa 28       		.uleb128 0x28
 3749 01fb 8A8201   		.uleb128 0x410a
 3750 01fe 00       		.byte	0
 3751 01ff 02       		.uleb128 0x2
 3752 0200 18       		.uleb128 0x18
 3753 0201 9142     		.uleb128 0x2111
 3754 0203 18       		.uleb128 0x18
 3755 0204 00       		.byte	0
 3756 0205 00       		.byte	0
 3757 0206 29       		.uleb128 0x29
 3758 0207 898201   		.uleb128 0x4109
 3759 020a 01       		.byte	0x1
 3760 020b 11       		.uleb128 0x11
 3761 020c 01       		.uleb128 0x1
 3762 020d 31       		.uleb128 0x31
 3763 020e 13       		.uleb128 0x13
 3764 020f 00       		.byte	0
 3765 0210 00       		.byte	0
 3766 0211 2A       		.uleb128 0x2a
 3767 0212 05       		.uleb128 0x5
 3768 0213 00       		.byte	0
 3769 0214 03       		.uleb128 0x3
 3770 0215 0E       		.uleb128 0xe
 3771 0216 3A       		.uleb128 0x3a
 3772 0217 0B       		.uleb128 0xb
 3773 0218 3B       		.uleb128 0x3b
 3774 0219 0B       		.uleb128 0xb
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 159
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 159
>>>>>>> Isac


 3775 021a 49       		.uleb128 0x49
 3776 021b 13       		.uleb128 0x13
 3777 021c 02       		.uleb128 0x2
 3778 021d 18       		.uleb128 0x18
 3779 021e 00       		.byte	0
 3780 021f 00       		.byte	0
 3781 0220 2B       		.uleb128 0x2b
 3782 0221 2E       		.uleb128 0x2e
 3783 0222 00       		.byte	0
 3784 0223 3F       		.uleb128 0x3f
 3785 0224 19       		.uleb128 0x19
 3786 0225 03       		.uleb128 0x3
 3787 0226 0E       		.uleb128 0xe
 3788 0227 3A       		.uleb128 0x3a
 3789 0228 0B       		.uleb128 0xb
 3790 0229 3B       		.uleb128 0x3b
 3791 022a 05       		.uleb128 0x5
 3792 022b 27       		.uleb128 0x27
 3793 022c 19       		.uleb128 0x19
 3794 022d 11       		.uleb128 0x11
 3795 022e 01       		.uleb128 0x1
 3796 022f 12       		.uleb128 0x12
 3797 0230 06       		.uleb128 0x6
 3798 0231 40       		.uleb128 0x40
 3799 0232 18       		.uleb128 0x18
 3800 0233 9742     		.uleb128 0x2117
 3801 0235 19       		.uleb128 0x19
 3802 0236 00       		.byte	0
 3803 0237 00       		.byte	0
 3804 0238 2C       		.uleb128 0x2c
 3805 0239 2E       		.uleb128 0x2e
 3806 023a 01       		.byte	0x1
 3807 023b 3F       		.uleb128 0x3f
 3808 023c 19       		.uleb128 0x19
 3809 023d 03       		.uleb128 0x3
 3810 023e 0E       		.uleb128 0xe
 3811 023f 3A       		.uleb128 0x3a
 3812 0240 0B       		.uleb128 0xb
 3813 0241 3B       		.uleb128 0x3b
 3814 0242 05       		.uleb128 0x5
 3815 0243 27       		.uleb128 0x27
 3816 0244 19       		.uleb128 0x19
 3817 0245 11       		.uleb128 0x11
 3818 0246 01       		.uleb128 0x1
 3819 0247 12       		.uleb128 0x12
 3820 0248 06       		.uleb128 0x6
 3821 0249 40       		.uleb128 0x40
 3822 024a 18       		.uleb128 0x18
 3823 024b 9742     		.uleb128 0x2117
 3824 024d 19       		.uleb128 0x19
 3825 024e 01       		.uleb128 0x1
 3826 024f 13       		.uleb128 0x13
 3827 0250 00       		.byte	0
 3828 0251 00       		.byte	0
 3829 0252 2D       		.uleb128 0x2d
 3830 0253 05       		.uleb128 0x5
 3831 0254 00       		.byte	0
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 160
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 160
>>>>>>> Isac


 3832 0255 03       		.uleb128 0x3
 3833 0256 0E       		.uleb128 0xe
 3834 0257 3A       		.uleb128 0x3a
 3835 0258 0B       		.uleb128 0xb
 3836 0259 3B       		.uleb128 0x3b
 3837 025a 05       		.uleb128 0x5
 3838 025b 49       		.uleb128 0x49
 3839 025c 13       		.uleb128 0x13
 3840 025d 02       		.uleb128 0x2
 3841 025e 17       		.uleb128 0x17
 3842 025f 00       		.byte	0
 3843 0260 00       		.byte	0
 3844 0261 2E       		.uleb128 0x2e
 3845 0262 34       		.uleb128 0x34
 3846 0263 00       		.byte	0
 3847 0264 03       		.uleb128 0x3
 3848 0265 0E       		.uleb128 0xe
 3849 0266 3A       		.uleb128 0x3a
 3850 0267 0B       		.uleb128 0xb
 3851 0268 3B       		.uleb128 0x3b
 3852 0269 05       		.uleb128 0x5
 3853 026a 49       		.uleb128 0x49
 3854 026b 13       		.uleb128 0x13
 3855 026c 02       		.uleb128 0x2
 3856 026d 17       		.uleb128 0x17
 3857 026e 00       		.byte	0
 3858 026f 00       		.byte	0
 3859 0270 2F       		.uleb128 0x2f
 3860 0271 1D       		.uleb128 0x1d
 3861 0272 01       		.byte	0x1
 3862 0273 31       		.uleb128 0x31
 3863 0274 13       		.uleb128 0x13
 3864 0275 11       		.uleb128 0x11
 3865 0276 01       		.uleb128 0x1
 3866 0277 12       		.uleb128 0x12
 3867 0278 06       		.uleb128 0x6
 3868 0279 58       		.uleb128 0x58
 3869 027a 0B       		.uleb128 0xb
 3870 027b 59       		.uleb128 0x59
 3871 027c 05       		.uleb128 0x5
 3872 027d 00       		.byte	0
 3873 027e 00       		.byte	0
 3874 027f 30       		.uleb128 0x30
 3875 0280 2E       		.uleb128 0x2e
 3876 0281 01       		.byte	0x1
 3877 0282 3F       		.uleb128 0x3f
 3878 0283 19       		.uleb128 0x19
 3879 0284 03       		.uleb128 0x3
 3880 0285 0E       		.uleb128 0xe
 3881 0286 3A       		.uleb128 0x3a
 3882 0287 0B       		.uleb128 0xb
 3883 0288 3B       		.uleb128 0x3b
 3884 0289 05       		.uleb128 0x5
 3885 028a 27       		.uleb128 0x27
 3886 028b 19       		.uleb128 0x19
 3887 028c 49       		.uleb128 0x49
 3888 028d 13       		.uleb128 0x13
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 161
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 161
>>>>>>> Isac


 3889 028e 11       		.uleb128 0x11
 3890 028f 01       		.uleb128 0x1
 3891 0290 12       		.uleb128 0x12
 3892 0291 06       		.uleb128 0x6
 3893 0292 40       		.uleb128 0x40
 3894 0293 18       		.uleb128 0x18
 3895 0294 9742     		.uleb128 0x2117
 3896 0296 19       		.uleb128 0x19
 3897 0297 01       		.uleb128 0x1
 3898 0298 13       		.uleb128 0x13
 3899 0299 00       		.byte	0
 3900 029a 00       		.byte	0
 3901 029b 31       		.uleb128 0x31
 3902 029c 34       		.uleb128 0x34
 3903 029d 00       		.byte	0
 3904 029e 03       		.uleb128 0x3
 3905 029f 0E       		.uleb128 0xe
 3906 02a0 3A       		.uleb128 0x3a
 3907 02a1 0B       		.uleb128 0xb
 3908 02a2 3B       		.uleb128 0x3b
 3909 02a3 05       		.uleb128 0x5
 3910 02a4 49       		.uleb128 0x49
 3911 02a5 13       		.uleb128 0x13
 3912 02a6 1C       		.uleb128 0x1c
 3913 02a7 0B       		.uleb128 0xb
 3914 02a8 00       		.byte	0
 3915 02a9 00       		.byte	0
 3916 02aa 32       		.uleb128 0x32
 3917 02ab 898201   		.uleb128 0x4109
 3918 02ae 00       		.byte	0
 3919 02af 11       		.uleb128 0x11
 3920 02b0 01       		.uleb128 0x1
 3921 02b1 31       		.uleb128 0x31
 3922 02b2 13       		.uleb128 0x13
 3923 02b3 00       		.byte	0
 3924 02b4 00       		.byte	0
 3925 02b5 33       		.uleb128 0x33
 3926 02b6 34       		.uleb128 0x34
 3927 02b7 00       		.byte	0
 3928 02b8 03       		.uleb128 0x3
 3929 02b9 0E       		.uleb128 0xe
 3930 02ba 3A       		.uleb128 0x3a
 3931 02bb 0B       		.uleb128 0xb
 3932 02bc 3B       		.uleb128 0x3b
 3933 02bd 0B       		.uleb128 0xb
 3934 02be 49       		.uleb128 0x49
 3935 02bf 13       		.uleb128 0x13
 3936 02c0 3F       		.uleb128 0x3f
 3937 02c1 19       		.uleb128 0x19
 3938 02c2 3C       		.uleb128 0x3c
 3939 02c3 19       		.uleb128 0x19
 3940 02c4 00       		.byte	0
 3941 02c5 00       		.byte	0
 3942 02c6 34       		.uleb128 0x34
 3943 02c7 34       		.uleb128 0x34
 3944 02c8 00       		.byte	0
 3945 02c9 03       		.uleb128 0x3
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 162
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 162
>>>>>>> Isac


 3946 02ca 0E       		.uleb128 0xe
 3947 02cb 3A       		.uleb128 0x3a
 3948 02cc 0B       		.uleb128 0xb
 3949 02cd 3B       		.uleb128 0x3b
 3950 02ce 0B       		.uleb128 0xb
 3951 02cf 49       		.uleb128 0x49
 3952 02d0 13       		.uleb128 0x13
 3953 02d1 3F       		.uleb128 0x3f
 3954 02d2 19       		.uleb128 0x19
 3955 02d3 02       		.uleb128 0x2
 3956 02d4 18       		.uleb128 0x18
 3957 02d5 00       		.byte	0
 3958 02d6 00       		.byte	0
 3959 02d7 35       		.uleb128 0x35
 3960 02d8 34       		.uleb128 0x34
 3961 02d9 00       		.byte	0
 3962 02da 03       		.uleb128 0x3
 3963 02db 0E       		.uleb128 0xe
 3964 02dc 3A       		.uleb128 0x3a
 3965 02dd 0B       		.uleb128 0xb
 3966 02de 3B       		.uleb128 0x3b
 3967 02df 05       		.uleb128 0x5
 3968 02e0 49       		.uleb128 0x49
 3969 02e1 13       		.uleb128 0x13
 3970 02e2 3F       		.uleb128 0x3f
 3971 02e3 19       		.uleb128 0x19
 3972 02e4 3C       		.uleb128 0x3c
 3973 02e5 19       		.uleb128 0x19
 3974 02e6 00       		.byte	0
 3975 02e7 00       		.byte	0
 3976 02e8 36       		.uleb128 0x36
 3977 02e9 2E       		.uleb128 0x2e
 3978 02ea 00       		.byte	0
 3979 02eb 3F       		.uleb128 0x3f
 3980 02ec 19       		.uleb128 0x19
 3981 02ed 3C       		.uleb128 0x3c
 3982 02ee 19       		.uleb128 0x19
 3983 02ef 6E       		.uleb128 0x6e
 3984 02f0 0E       		.uleb128 0xe
 3985 02f1 03       		.uleb128 0x3
 3986 02f2 0E       		.uleb128 0xe
 3987 02f3 3A       		.uleb128 0x3a
 3988 02f4 0B       		.uleb128 0xb
 3989 02f5 3B       		.uleb128 0x3b
 3990 02f6 05       		.uleb128 0x5
 3991 02f7 00       		.byte	0
 3992 02f8 00       		.byte	0
 3993 02f9 00       		.byte	0
 3994              		.section	.debug_loc,"",%progbits
 3995              	.Ldebug_loc0:
 3996              	.LLST0:
 3997 0000 00000000 		.4byte	.LVL0
 3998 0004 1C000000 		.4byte	.LVL2
 3999 0008 0100     		.2byte	0x1
 4000 000a 50       		.byte	0x50
 4001 000b 1C000000 		.4byte	.LVL2
 4002 000f 80000000 		.4byte	.LVL10
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 163
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 163
>>>>>>> Isac


 4003 0013 0100     		.2byte	0x1
 4004 0015 54       		.byte	0x54
 4005 0016 80000000 		.4byte	.LVL10
 4006 001a 90000000 		.4byte	.LFE188
 4007 001e 0400     		.2byte	0x4
 4008 0020 F3       		.byte	0xf3
 4009 0021 01       		.uleb128 0x1
 4010 0022 50       		.byte	0x50
 4011 0023 9F       		.byte	0x9f
 4012 0024 00000000 		.4byte	0
 4013 0028 00000000 		.4byte	0
 4014              	.LLST1:
 4015 002c 04000000 		.4byte	.LVL1
 4016 0030 1E000000 		.4byte	.LVL3
 4017 0034 0200     		.2byte	0x2
 4018 0036 33       		.byte	0x33
 4019 0037 9F       		.byte	0x9f
 4020 0038 00000000 		.4byte	0
 4021 003c 00000000 		.4byte	0
 4022              	.LLST2:
 4023 0040 04000000 		.4byte	.LVL1
 4024 0044 1E000000 		.4byte	.LVL3
 4025 0048 0200     		.2byte	0x2
 4026 004a 30       		.byte	0x30
 4027 004b 9F       		.byte	0x9f
 4028 004c 00000000 		.4byte	0
 4029 0050 00000000 		.4byte	0
 4030              	.LLST3:
 4031 0054 04000000 		.4byte	.LVL1
 4032 0058 1E000000 		.4byte	.LVL3
 4033 005c 0600     		.2byte	0x6
 4034 005e 0C       		.byte	0xc
 4035 005f 01004A00 		.4byte	0x4a0001
 4036 0063 9F       		.byte	0x9f
 4037 0064 00000000 		.4byte	0
 4038 0068 00000000 		.4byte	0
 4039              	.LLST4:
 4040 006c 20000000 		.4byte	.LVL4
 4041 0070 34000000 		.4byte	.LVL5
 4042 0074 0100     		.2byte	0x1
 4043 0076 53       		.byte	0x53
 4044 0077 34000000 		.4byte	.LVL5
 4045 007b 3A000000 		.4byte	.LVL6
 4046 007f 0200     		.2byte	0x2
 4047 0081 74       		.byte	0x74
 4048 0082 10       		.sleb128 16
 4049 0083 00000000 		.4byte	0
 4050 0087 00000000 		.4byte	0
 4051              	.LLST6:
 4052 008b 20000000 		.4byte	.LVL4
 4053 008f 3A000000 		.4byte	.LVL6
 4054 0093 0200     		.2byte	0x2
 4055 0095 33       		.byte	0x33
 4056 0096 9F       		.byte	0x9f
 4057 0097 00000000 		.4byte	0
 4058 009b 00000000 		.4byte	0
 4059              	.LLST7:
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 164
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 164
>>>>>>> Isac


 4060 009f 20000000 		.4byte	.LVL4
 4061 00a3 3A000000 		.4byte	.LVL6
 4062 00a7 0200     		.2byte	0x2
 4063 00a9 30       		.byte	0x30
 4064 00aa 9F       		.byte	0x9f
 4065 00ab 00000000 		.4byte	0
 4066 00af 00000000 		.4byte	0
 4067              	.LLST8:
 4068 00b3 20000000 		.4byte	.LVL4
 4069 00b7 3A000000 		.4byte	.LVL6
 4070 00bb 0600     		.2byte	0x6
 4071 00bd 0C       		.byte	0xc
 4072 00be 01004A00 		.4byte	0x4a0001
 4073 00c2 9F       		.byte	0x9f
 4074 00c3 00000000 		.4byte	0
 4075 00c7 00000000 		.4byte	0
 4076              	.LLST9:
 4077 00cb 3A000000 		.4byte	.LVL6
 4078 00cf 6E000000 		.4byte	.LVL7
 4079 00d3 0200     		.2byte	0x2
 4080 00d5 33       		.byte	0x33
 4081 00d6 9F       		.byte	0x9f
 4082 00d7 00000000 		.4byte	0
 4083 00db 00000000 		.4byte	0
 4084              	.LLST10:
 4085 00df 3A000000 		.4byte	.LVL6
 4086 00e3 6E000000 		.4byte	.LVL7
 4087 00e7 0200     		.2byte	0x2
 4088 00e9 30       		.byte	0x30
 4089 00ea 9F       		.byte	0x9f
 4090 00eb 00000000 		.4byte	0
 4091 00ef 00000000 		.4byte	0
 4092              	.LLST11:
 4093 00f3 3A000000 		.4byte	.LVL6
 4094 00f7 6E000000 		.4byte	.LVL7
 4095 00fb 0600     		.2byte	0x6
 4096 00fd 0C       		.byte	0xc
 4097 00fe 01004A00 		.4byte	0x4a0001
 4098 0102 9F       		.byte	0x9f
 4099 0103 00000000 		.4byte	0
 4100 0107 00000000 		.4byte	0
 4101              	.LLST12:
 4102 010b 00000000 		.4byte	.LVL14
 4103 010f 06000000 		.4byte	.LVL15
 4104 0113 0100     		.2byte	0x1
 4105 0115 50       		.byte	0x50
 4106 0116 06000000 		.4byte	.LVL15
 4107 011a 2C000000 		.4byte	.LFE194
 4108 011e 0400     		.2byte	0x4
 4109 0120 F3       		.byte	0xf3
 4110 0121 01       		.uleb128 0x1
 4111 0122 50       		.byte	0x50
 4112 0123 9F       		.byte	0x9f
 4113 0124 00000000 		.4byte	0
 4114 0128 00000000 		.4byte	0
 4115              	.LLST13:
 4116 012c 08000000 		.4byte	.LVL16
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 165
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 165
>>>>>>> Isac


 4117 0130 1C000000 		.4byte	.LVL19
 4118 0134 0100     		.2byte	0x1
 4119 0136 54       		.byte	0x54
 4120 0137 1C000000 		.4byte	.LVL19
 4121 013b 2C000000 		.4byte	.LFE194
 4122 013f 0500     		.2byte	0x5
 4123 0141 72       		.byte	0x72
 4124 0142 00       		.sleb128 0
 4125 0143 73       		.byte	0x73
 4126 0144 00       		.sleb128 0
 4127 0145 22       		.byte	0x22
 4128 0146 00000000 		.4byte	0
 4129 014a 00000000 		.4byte	0
 4130              	.LLST14:
 4131 014e 08000000 		.4byte	.LVL16
 4132 0152 1C000000 		.4byte	.LVL18
 4133 0156 0100     		.2byte	0x1
 4134 0158 54       		.byte	0x54
 4135 0159 00000000 		.4byte	0
 4136 015d 00000000 		.4byte	0
 4137              	.LLST15:
 4138 0161 08000000 		.4byte	.LVL16
 4139 0165 1C000000 		.4byte	.LVL18
 4140 0169 0600     		.2byte	0x6
 4141 016b 0C       		.byte	0xc
 4142 016c 00001D41 		.4byte	0x411d0000
 4143 0170 9F       		.byte	0x9f
 4144 0171 00000000 		.4byte	0
 4145 0175 00000000 		.4byte	0
 4146              	.LLST16:
 4147 0179 00000000 		.4byte	.LVL20
 4148 017d 1A000000 		.4byte	.LVL22
 4149 0181 0100     		.2byte	0x1
 4150 0183 50       		.byte	0x50
 4151 0184 1A000000 		.4byte	.LVL22
 4152 0188 2C000000 		.4byte	.LVL26
 4153 018c 0100     		.2byte	0x1
 4154 018e 54       		.byte	0x54
 4155 018f 2C000000 		.4byte	.LVL26
 4156 0193 48000000 		.4byte	.LFE195
 4157 0197 0200     		.2byte	0x2
 4158 0199 73       		.byte	0x73
 4159 019a 20       		.sleb128 32
 4160 019b 00000000 		.4byte	0
 4161 019f 00000000 		.4byte	0
 4162              	.LLST17:
 4163 01a3 12000000 		.4byte	.LVL21
 4164 01a7 1C000000 		.4byte	.LVL23
 4165 01ab 0100     		.2byte	0x1
 4166 01ad 53       		.byte	0x53
 4167 01ae 1C000000 		.4byte	.LVL23
 4168 01b2 27000000 		.4byte	.LVL24-1
 4169 01b6 0200     		.2byte	0x2
 4170 01b8 72       		.byte	0x72
 4171 01b9 04       		.sleb128 4
 4172 01ba 00000000 		.4byte	0
 4173 01be 00000000 		.4byte	0
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 166
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 166
>>>>>>> Isac


 4174              	.LLST18:
 4175 01c2 1A000000 		.4byte	.LVL22
 4176 01c6 2C000000 		.4byte	.LVL25
 4177 01ca 0100     		.2byte	0x1
 4178 01cc 54       		.byte	0x54
 4179 01cd 00000000 		.4byte	0
 4180 01d1 00000000 		.4byte	0
 4181              	.LLST19:
 4182 01d5 1A000000 		.4byte	.LVL22
 4183 01d9 2C000000 		.4byte	.LVL25
 4184 01dd 0600     		.2byte	0x6
 4185 01df 0C       		.byte	0xc
 4186 01e0 00001D41 		.4byte	0x411d0000
 4187 01e4 9F       		.byte	0x9f
 4188 01e5 00000000 		.4byte	0
 4189 01e9 00000000 		.4byte	0
 4190              	.LLST20:
 4191 01ed 00000000 		.4byte	.LVL27
 4192 01f1 06000000 		.4byte	.LVL29
 4193 01f5 0100     		.2byte	0x1
 4194 01f7 50       		.byte	0x50
 4195 01f8 06000000 		.4byte	.LVL29
 4196 01fc 1C000000 		.4byte	.LFE196
 4197 0200 0400     		.2byte	0x4
 4198 0202 F3       		.byte	0xf3
 4199 0203 01       		.uleb128 0x1
 4200 0204 50       		.byte	0x50
 4201 0205 9F       		.byte	0x9f
 4202 0206 00000000 		.4byte	0
 4203 020a 00000000 		.4byte	0
 4204              	.LLST21:
 4205 020e 04000000 		.4byte	.LVL28
 4206 0212 14000000 		.4byte	.LVL33
 4207 0216 0200     		.2byte	0x2
 4208 0218 30       		.byte	0x30
 4209 0219 9F       		.byte	0x9f
 4210 021a 14000000 		.4byte	.LVL33
 4211 021e 1C000000 		.4byte	.LFE196
 4212 0222 0100     		.2byte	0x1
 4213 0224 50       		.byte	0x50
 4214 0225 00000000 		.4byte	0
 4215 0229 00000000 		.4byte	0
 4216              	.LLST22:
 4217 022d 0A000000 		.4byte	.LVL30
 4218 0231 10000000 		.4byte	.LVL31
 4219 0235 0100     		.2byte	0x1
 4220 0237 50       		.byte	0x50
 4221 0238 12000000 		.4byte	.LVL32
 4222 023c 14000000 		.4byte	.LVL33
 4223 0240 0100     		.2byte	0x1
 4224 0242 50       		.byte	0x50
 4225 0243 00000000 		.4byte	0
 4226 0247 00000000 		.4byte	0
 4227              	.LLST23:
 4228 024b 00000000 		.4byte	.LVL38
 4229 024f 05000000 		.4byte	.LVL39-1
 4230 0253 0100     		.2byte	0x1
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 167
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 167
>>>>>>> Isac


 4231 0255 50       		.byte	0x50
 4232 0256 05000000 		.4byte	.LVL39-1
 4233 025a 08000000 		.4byte	.LFE187
 4234 025e 0400     		.2byte	0x4
 4235 0260 F3       		.byte	0xf3
 4236 0261 01       		.uleb128 0x1
 4237 0262 50       		.byte	0x50
 4238 0263 9F       		.byte	0x9f
 4239 0264 00000000 		.4byte	0
 4240 0268 00000000 		.4byte	0
 4241              	.LLST24:
 4242 026c 00000000 		.4byte	.LVL40
 4243 0270 23000000 		.4byte	.LVL43-1
 4244 0274 0100     		.2byte	0x1
 4245 0276 50       		.byte	0x50
 4246 0277 23000000 		.4byte	.LVL43-1
 4247 027b 4C000000 		.4byte	.LVL47
 4248 027f 0100     		.2byte	0x1
 4249 0281 54       		.byte	0x54
 4250 0282 4C000000 		.4byte	.LVL47
 4251 0286 5C000000 		.4byte	.LFE189
 4252 028a 0400     		.2byte	0x4
 4253 028c F3       		.byte	0xf3
 4254 028d 01       		.uleb128 0x1
 4255 028e 50       		.byte	0x50
 4256 028f 9F       		.byte	0x9f
 4257 0290 00000000 		.4byte	0
 4258 0294 00000000 		.4byte	0
 4259              	.LLST25:
 4260 0298 00000000 		.4byte	.LVL40
 4261 029c 23000000 		.4byte	.LVL43-1
 4262 02a0 0100     		.2byte	0x1
 4263 02a2 51       		.byte	0x51
 4264 02a3 23000000 		.4byte	.LVL43-1
 4265 02a7 4C000000 		.4byte	.LVL48
 4266 02ab 0100     		.2byte	0x1
 4267 02ad 55       		.byte	0x55
 4268 02ae 4C000000 		.4byte	.LVL48
 4269 02b2 5C000000 		.4byte	.LFE189
 4270 02b6 0400     		.2byte	0x4
 4271 02b8 F3       		.byte	0xf3
 4272 02b9 01       		.uleb128 0x1
 4273 02ba 51       		.byte	0x51
 4274 02bb 9F       		.byte	0x9f
 4275 02bc 00000000 		.4byte	0
 4276 02c0 00000000 		.4byte	0
 4277              	.LLST26:
 4278 02c4 0A000000 		.4byte	.LVL41
 4279 02c8 14000000 		.4byte	.LVL42
 4280 02cc 0600     		.2byte	0x6
 4281 02ce 0C       		.byte	0xc
 4282 02cf 00001D41 		.4byte	0x411d0000
 4283 02d3 9F       		.byte	0x9f
 4284 02d4 00000000 		.4byte	0
 4285 02d8 00000000 		.4byte	0
 4286              		.section	.debug_aranges,"",%progbits
 4287 0000 74000000 		.4byte	0x74
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 168
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 168
>>>>>>> Isac


 4288 0004 0200     		.2byte	0x2
 4289 0006 00000000 		.4byte	.Ldebug_info0
 4290 000a 04       		.byte	0x4
 4291 000b 00       		.byte	0
 4292 000c 0000     		.2byte	0
 4293 000e 0000     		.2byte	0
 4294 0010 00000000 		.4byte	.LFB188
 4295 0014 90000000 		.4byte	.LFE188-.LFB188
 4296 0018 00000000 		.4byte	.LFB190
 4297 001c 24000000 		.4byte	.LFE190-.LFB190
 4298 0020 00000000 		.4byte	.LFB191
 4299 0024 28000000 		.4byte	.LFE191-.LFB191
 4300 0028 00000000 		.4byte	.LFB192
 4301 002c 02000000 		.4byte	.LFE192-.LFB192
 4302 0030 00000000 		.4byte	.LFB193
 4303 0034 02000000 		.4byte	.LFE193-.LFB193
 4304 0038 00000000 		.4byte	.LFB194
 4305 003c 2C000000 		.4byte	.LFE194-.LFB194
 4306 0040 00000000 		.4byte	.LFB195
 4307 0044 48000000 		.4byte	.LFE195-.LFB195
 4308 0048 00000000 		.4byte	.LFB196
 4309 004c 1C000000 		.4byte	.LFE196-.LFB196
 4310 0050 00000000 		.4byte	.LFB197
 4311 0054 28000000 		.4byte	.LFE197-.LFB197
 4312 0058 00000000 		.4byte	.LFB186
 4313 005c 28000000 		.4byte	.LFE186-.LFB186
 4314 0060 00000000 		.4byte	.LFB187
 4315 0064 08000000 		.4byte	.LFE187-.LFB187
 4316 0068 00000000 		.4byte	.LFB189
 4317 006c 5C000000 		.4byte	.LFE189-.LFB189
 4318 0070 00000000 		.4byte	0
 4319 0074 00000000 		.4byte	0
 4320              		.section	.debug_ranges,"",%progbits
 4321              	.Ldebug_ranges0:
 4322 0000 00000000 		.4byte	.LFB188
 4323 0004 90000000 		.4byte	.LFE188
 4324 0008 00000000 		.4byte	.LFB190
 4325 000c 24000000 		.4byte	.LFE190
 4326 0010 00000000 		.4byte	.LFB191
 4327 0014 28000000 		.4byte	.LFE191
 4328 0018 00000000 		.4byte	.LFB192
 4329 001c 02000000 		.4byte	.LFE192
 4330 0020 00000000 		.4byte	.LFB193
 4331 0024 02000000 		.4byte	.LFE193
 4332 0028 00000000 		.4byte	.LFB194
 4333 002c 2C000000 		.4byte	.LFE194
 4334 0030 00000000 		.4byte	.LFB195
 4335 0034 48000000 		.4byte	.LFE195
 4336 0038 00000000 		.4byte	.LFB196
 4337 003c 1C000000 		.4byte	.LFE196
 4338 0040 00000000 		.4byte	.LFB197
 4339 0044 28000000 		.4byte	.LFE197
 4340 0048 00000000 		.4byte	.LFB186
 4341 004c 28000000 		.4byte	.LFE186
 4342 0050 00000000 		.4byte	.LFB187
 4343 0054 08000000 		.4byte	.LFE187
 4344 0058 00000000 		.4byte	.LFB189
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 169
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 169
>>>>>>> Isac


 4345 005c 5C000000 		.4byte	.LFE189
 4346 0060 00000000 		.4byte	0
 4347 0064 00000000 		.4byte	0
 4348              		.section	.debug_line,"",%progbits
 4349              	.Ldebug_line0:
 4350 0000 41040000 		.section	.debug_str,"MS",%progbits,1
 4350      0200EF02 
 4350      00000201 
 4350      FB0E0D00 
 4350      01010101 
 4351              	.LASF136:
 4352 0000 666C6173 		.ascii	"flashCtlMainWs1Freq\000"
 4352      6843746C 
 4352      4D61696E 
 4352      57733146 
 4352      72657100 
 4353              	.LASF25:
 4354 0014 50455249 		.ascii	"PERI_TR_GR_V1_Type\000"
 4354      5F54525F 
 4354      47525F56 
 4354      315F5479 
 4354      706500
 4355              	.LASF19:
 4356 0027 52455345 		.ascii	"RESERVED\000"
 4356      52564544 
 4356      00
 4357              	.LASF71:
 4358 0030 52414E47 		.ascii	"RANGE_INTR_MASKED\000"
 4358      455F494E 
 4358      54525F4D 
 4358      41534B45 
 4358      4400
 4359              	.LASF56:
 4360 0042 4348414E 		.ascii	"CHAN_WORK_UPDATED\000"
 4360      5F574F52 
 4360      4B5F5550 
 4360      44415445 
 4360      4400
 4361              	.LASF178:
 4362 0054 6970634C 		.ascii	"ipcLockStatusOffset\000"
 4362      6F636B53 
 4362      74617475 
 4362      734F6666 
 4362      73657400 
 4363              	.LASF245:
 4364 0068 43795F53 		.ascii	"Cy_SysClk_PeriphDisableDivider\000"
 4364      7973436C 
 4364      6B5F5065 
 4364      72697068 
 4364      44697361 
 4365              	.LASF283:
 4366 0087 63795F64 		.ascii	"cy_device\000"
 4366      65766963 
 4366      6500
 4367              	.LASF163:
 4368 0091 63707573 		.ascii	"cpussCm0ClockCtlOffset\000"
 4368      73436D30 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 170
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 170
>>>>>>> Isac


 4368      436C6F63 
 4368      6B43746C 
 4368      4F666673 
 4369              	.LASF122:
 4370 00a8 70657269 		.ascii	"periClockNr\000"
 4370      436C6F63 
 4370      6B4E7200 
 4371              	.LASF33:
 4372 00b4 4449565F 		.ascii	"DIV_8_CTL\000"
 4372      385F4354 
 4372      4C00
 4373              	.LASF96:
 4374 00be 75646242 		.ascii	"udbBase\000"
 4374      61736500 
 4375              	.LASF232:
 4376 00c6 43595F53 		.ascii	"CY_SYSCLK_DIV_8_BIT\000"
 4376      5953434C 
 4376      4B5F4449 
 4376      565F385F 
 4376      42495400 
 4377              	.LASF51:
 4378 00da 4348414E 		.ascii	"CHAN_EN\000"
 4378      5F454E00 
 4379              	.LASF95:
 4380 00e2 70657269 		.ascii	"periBase\000"
 4380      42617365 
 4380      00
 4381              	.LASF45:
 4382 00eb 4354524C 		.ascii	"CTRL\000"
 4382      00
 4383              	.LASF171:
 4384 00f0 63707573 		.ascii	"cpussCm0NmiCtlOffset\000"
 4384      73436D30 
 4384      4E6D6943 
 4384      746C4F66 
 4384      66736574 
 4385              	.LASF141:
 4386 0105 64774368 		.ascii	"dwChSize\000"
 4386      53697A65 
 4386      00
 4387              	.LASF229:
 4388 010e 43595F53 		.ascii	"CY_SYSCLK_TIMEOUT\000"
 4388      5953434C 
 4388      4B5F5449 
 4388      4D454F55 
 4388      5400
 4389              	.LASF12:
 4390 0120 756E7369 		.ascii	"unsigned int\000"
 4390      676E6564 
 4390      20696E74 
 4390      00
 4391              	.LASF282:
 4392 012d 72657374 		.ascii	"restart\000"
 4392      61727400 
 4393              	.LASF72:
 4394 0135 494E5452 		.ascii	"INTR_CAUSE\000"
 4394      5F434155 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 171
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 171
>>>>>>> Isac


 4394      534500
 4395              	.LASF123:
 4396 0140 736D6966 		.ascii	"smifDeviceNr\000"
 4396      44657669 
 4396      63654E72 
 4396      00
 4397              	.LASF204:
 4398 014d 43595F53 		.ascii	"CY_SAR_RANGE_COND_OUTSIDE\000"
 4398      41525F52 
 4398      414E4745 
 4398      5F434F4E 
 4398      445F4F55 
 4399              	.LASF153:
 4400 0167 70657269 		.ascii	"periDivCmdPaTypeSelPos\000"
 4400      44697643 
 4400      6D645061 
 4400      54797065 
 4400      53656C50 
 4401              	.LASF244:
 4402 017e 64697669 		.ascii	"dividerNum\000"
 4402      6465724E 
 4402      756D00
 4403              	.LASF115:
 4404 0189 63707573 		.ascii	"cpussFlashPaSize\000"
 4404      73466C61 
 4404      73685061 
 4404      53697A65 
 4404      00
 4405              	.LASF227:
 4406 019a 43595F53 		.ascii	"CY_SYSCLK_SUCCESS\000"
 4406      5953434C 
 4406      4B5F5355 
 4406      43434553 
 4406      5300
 4407              	.LASF58:
 4408 01ac 4348414E 		.ascii	"CHAN_WORK_NEWVALUE\000"
 4408      5F574F52 
 4408      4B5F4E45 
 4408      5756414C 
 4408      554500
 4409              	.LASF93:
 4410 01bf 63707573 		.ascii	"cpussBase\000"
 4410      73426173 
 4410      6500
 4411              	.LASF35:
 4412 01c9 4449565F 		.ascii	"DIV_16_5_CTL\000"
 4412      31365F35 
 4412      5F43544C 
 4412      00
 4413              	.LASF237:
 4414 01d6 6368616E 		.ascii	"channelBase\000"
 4414      6E656C42 
 4414      61736500 
 4415              	.LASF41:
 4416 01e2 5050555F 		.ascii	"PPU_PR\000"
 4416      505200
 4417              	.LASF117:
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 172
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 172
>>>>>>> Isac


 4418 01e9 63707573 		.ascii	"cpussFmIrq\000"
 4418      73466D49 
 4418      727100
 4419              	.LASF239:
 4420 01f4 6877436F 		.ascii	"hwConfigStc\000"
 4420      6E666967 
 4420      53746300 
 4421              	.LASF118:
 4422 0200 63707573 		.ascii	"cpussNotConnectedIrq\000"
 4422      734E6F74 
 4422      436F6E6E 
 4422      65637465 
 4422      64497271 
 4423              	.LASF0:
 4424 0215 73686F72 		.ascii	"short int\000"
 4424      7420696E 
 4424      7400
 4425              	.LASF64:
 4426 021f 53415455 		.ascii	"SATURATE_INTR\000"
 4426      52415445 
 4426      5F494E54 
 4426      5200
 4427              	.LASF47:
 4428 022d 53414D50 		.ascii	"SAMPLE_TIME01\000"
 4428      4C455F54 
 4428      494D4530 
 4428      3100
 4429              	.LASF195:
 4430 023b 43595F53 		.ascii	"CY_SAR_WAIT_FOR_RESULT\000"
 4430      41525F57 
 4430      4149545F 
 4430      464F525F 
 4430      52455355 
 4431              	.LASF76:
 4432 0252 494E4A5F 		.ascii	"INJ_RESULT\000"
 4432      52455355 
 4432      4C5400
 4433              	.LASF152:
 4434 025d 70657269 		.ascii	"periDivCmdPaDivSelPos\000"
 4434      44697643 
 4434      6D645061 
 4434      44697653 
 4434      656C506F 
 4435              	.LASF61:
 4436 0273 494E5452 		.ascii	"INTR_SET\000"
 4436      5F534554 
 4436      00
 4437              	.LASF129:
 4438 027c 63727970 		.ascii	"cryptoMemSize\000"
 4438      746F4D65 
 4438      6D53697A 
 4438      6500
 4439              	.LASF264:
 4440 028a 6D6F6465 		.ascii	"mode\000"
 4440      00
 4441              	.LASF219:
 4442 028f 73617449 		.ascii	"satIntrMask\000"
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 173
=======
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 173
>>>>>>> Isac


 4442      6E74724D 
 4442      61736B00 
 4443              	.LASF193:
 4444 029b 63795F65 		.ascii	"cy_en_sar_start_convert_sel_t\000"
 4444      6E5F7361 
 4444      725F7374 
 4444      6172745F 
 4444      636F6E76 
 4445              	.LASF149:
 4446 02b9 70657269 		.ascii	"periTrGrSize\000"
 4446      54724772 
 4446      53697A65 
 4446      00
 4447              	.LASF177:
 4448 02c6 69706353 		.ascii	"ipcStructSize\000"
 4448      74727563 
 4448      7453697A 
 4448      6500
<<<<<<< HEAD
 4449              	.LASF297:
 4450 02d4 4144435F 		.ascii	"ADC_IsEndConversion\000"
 4450      4973456E 
 4450      64436F6E 
 4450      76657273 
 4450      696F6E00 
 4451              	.LASF111:
 4452 02e8 70726F74 		.ascii	"protVersion\000"
 4452      56657273 
 4452      696F6E00 
 4453              	.LASF201:
 4454 02f4 43595F53 		.ascii	"CY_SAR_RANGE_COND_BELOW\000"
 4454      41525F52 
 4454      414E4745 
 4454      5F434F4E 
 4454      445F4245 
 4455              	.LASF151:
 4456 030c 70657269 		.ascii	"periDivCmdTypeSelPos\000"
 4456      44697643 
 4456      6D645479 
 4456      70655365 
 4456      6C506F73 
 4457              	.LASF168:
 4458 0321 63707573 		.ascii	"cpussTrimRamCtlOffset\000"
 4458      73547269 
 4458      6D52616D 
 4458      43746C4F 
 4458      66667365 
 4459              	.LASF179:
 4460 0337 63795F73 		.ascii	"cy_stc_device_t\000"
 4460      74635F64 
 4460      65766963 
 4460      655F7400 
 4461              	.LASF30:
 4462 0347 50455249 		.ascii	"PERI_PPU_PR_V1_Type\000"
 4462      5F505055 
 4462      5F50525F 
 4462      56315F54 
 4462      79706500 
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 174


 4463              	.LASF284:
 4464 035b 4144435F 		.ascii	"ADC_initVar\000"
 4464      696E6974 
 4464      56617200 
 4465              	.LASF16:
 4466 0367 75696E74 		.ascii	"uint32_t\000"
 4466      33325F74 
 4466      00
 4467              	.LASF161:
 4468 0370 6770696F 		.ascii	"gpioPrtCfgOutOffset\000"
 4468      50727443 
 4468      66674F75 
 4468      744F6666 
 4468      73657400 
 4469              	.LASF60:
 4470 0384 494E5452 		.ascii	"INTR\000"
 4470      00
 4471              	.LASF183:
 4472 0389 666C6F61 		.ascii	"float\000"
 4472      7400
 4473              	.LASF104:
 4474 038f 63727970 		.ascii	"cryptoVersion\000"
 4474      746F5665 
 4474      7273696F 
 4474      6E00
 4475              	.LASF133:
 4476 039d 666C6173 		.ascii	"flashProgramDelay\000"
 4476      6850726F 
 4476      6772616D 
 4476      44656C61 
 4476      7900
 4477              	.LASF249:
 4478 03af 62617365 		.ascii	"base\000"
 4478      00
 4479              	.LASF238:
 4480 03b4 6E756D43 		.ascii	"numChannels\000"
 4480      68616E6E 
 4480      656C7300 
 4481              	.LASF20:
 4482 03c0 534C5F43 		.ascii	"SL_CTL\000"
 4482      544C00
 4483              	.LASF94:
 4484 03c7 666C6173 		.ascii	"flashcBase\000"
 4484      68634261 
 4484      736500
 4485              	.LASF14:
 4486 03d2 696E7431 		.ascii	"int16_t\000"
 4486      365F7400 
 4487              	.LASF160:
 4488 03da 6770696F 		.ascii	"gpioPrtCfgInOffset\000"
 4488      50727443 
 4488      6667496E 
 4488      4F666673 
 4488      657400
 4489              	.LASF275:
 4490 03ed 72657375 		.ascii	"result\000"
 4490      6C7400
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 175


 4491              	.LASF11:
 4492 03f4 6C6F6E67 		.ascii	"long long unsigned int\000"
 4492      206C6F6E 
 4492      6720756E 
 4492      7369676E 
 4492      65642069 
 4493              	.LASF157:
 4494 040b 70657269 		.ascii	"periDiv24_5CtlOffset\000"
 4494      44697632 
 4494      345F3543 
 4494      746C4F66 
 4494      66736574 
 4495              	.LASF162:
 4496 0420 6770696F 		.ascii	"gpioPrtCfgSioOffset\000"
 4496      50727443 
 4496      66675369 
 4496      6F4F6666 
 4496      73657400 
 4497              	.LASF77:
 4498 0434 52455345 		.ascii	"RESERVED7\000"
 4498      52564544 
 4498      3700
 4499              	.LASF116:
 4500 043e 63707573 		.ascii	"cpussIpc0Irq\000"
 4500      73497063 
 4500      30497271 
 4500      00
 4501              	.LASF276:
 4502 044b 4144435F 		.ascii	"ADC_Init\000"
 4502      496E6974 
 4502      00
 4503              	.LASF48:
 4504 0454 53414D50 		.ascii	"SAMPLE_TIME23\000"
 4504      4C455F54 
 4504      494D4532 
 4504      3300
 4505              	.LASF214:
 4506 0462 72616E67 		.ascii	"rangeThres\000"
 4506      65546872 
 4506      657300
 4507              	.LASF5:
 4508 046d 5F5F7569 		.ascii	"__uint16_t\000"
 4508      6E743136 
 4508      5F7400
 4509              	.LASF202:
 4510 0478 43595F53 		.ascii	"CY_SAR_RANGE_COND_INSIDE\000"
 4510      41525F52 
 4510      414E4745 
 4510      5F434F4E 
 4510      445F494E 
 4511              	.LASF266:
 4512 0491 4144435F 		.ascii	"ADC_IRQ_Disable\000"
 4512      4952515F 
 4512      44697361 
 4512      626C6500 
 4513              	.LASF226:
 4514 04a1 63795F73 		.ascii	"cy_stc_sar_config_t\000"
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 176


 4514      74635F73 
 4514      61725F63 
 4514      6F6E6669 
 4514      675F7400 
 4515              	.LASF210:
 4516 04b5 6374726C 		.ascii	"ctrl\000"
 4516      00
 4517              	.LASF278:
 4518 04ba 4144435F 		.ascii	"ADC_Start\000"
 4518      53746172 
 4518      7400
 4519              	.LASF74:
 4520 04c4 494E4A5F 		.ascii	"INJ_CHAN_CONFIG\000"
 4520      4348414E 
 4520      5F434F4E 
 4520      46494700 
 4521              	.LASF138:
 4522 04d4 666C6173 		.ascii	"flashCtlMainWs3Freq\000"
 4522      6843746C 
 4522      4D61696E 
 4522      57733346 
 4522      72657100 
 4523              	.LASF120:
 4524 04e8 73727373 		.ascii	"srssNumPll\000"
 4524      4E756D50 
 4524      6C6C00
 4525              	.LASF194:
 4526 04f3 43595F53 		.ascii	"CY_SAR_RETURN_STATUS\000"
 4526      41525F52 
 4526      45545552 
 4526      4E5F5354 
 4526      41545553 
 4527              	.LASF38:
 4528 0508 54525F43 		.ascii	"TR_CMD\000"
 4528      4D4400
 4529              	.LASF91:
 4530 050f 5341525F 		.ascii	"SAR_Type\000"
 4530      54797065 
 4530      00
 4531              	.LASF288:
 4532 0518 43795F53 		.ascii	"Cy_SAR_DeInit\000"
 4532      41525F44 
 4532      65496E69 
 4532      7400
 4533              	.LASF231:
 4534 0526 63795F65 		.ascii	"cy_en_sysclk_status_t\000"
 4534      6E5F7379 
 4534      73636C6B 
 4534      5F737461 
 4534      7475735F 
 4535              	.LASF6:
 4536 053c 73686F72 		.ascii	"short unsigned int\000"
 4536      7420756E 
 4536      7369676E 
 4536      65642069 
 4536      6E7400
 4537              	.LASF131:
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 177


 4538 054f 666C6173 		.ascii	"flashPipeRequired\000"
 4538      68506970 
 4538      65526571 
 4538      75697265 
 4538      6400
 4539              	.LASF70:
 4540 0561 52414E47 		.ascii	"RANGE_INTR_MASK\000"
 4540      455F494E 
 4540      54525F4D 
 4540      41534B00 
 4541              	.LASF277:
 4542 0571 636F6E66 		.ascii	"configNum\000"
 4542      69674E75 
 4542      6D00
 4543              	.LASF225:
 4544 057b 5F426F6F 		.ascii	"_Bool\000"
 4544      6C00
 4545              	.LASF50:
 4546 0581 52414E47 		.ascii	"RANGE_COND\000"
 4546      455F434F 
 4546      4E4400
 4547              	.LASF135:
 4548 058c 666C6173 		.ascii	"flashCtlMainWs0Freq\000"
 4548      6843746C 
 4548      4D61696E 
 4548      57733046 
 4548      72657100 
 4549              	.LASF36:
 4550 05a0 4449565F 		.ascii	"DIV_24_5_CTL\000"
 4550      32345F35 
 4550      5F43544C 
 4550      00
 4551              	.LASF145:
 4552 05ad 64775374 		.ascii	"dwStatusChIdxMsk\000"
 4552      61747573 
 4552      43684964 
 4552      784D736B 
 4552      00
 4553              	.LASF207:
 4554 05be 43595F53 		.ascii	"CY_SAR_INTR_EOS_MASK\000"
 4554      41525F49 
 4554      4E54525F 
 4554      454F535F 
 4554      4D41534B 
 4555              	.LASF99:
 4556 05d3 6770696F 		.ascii	"gpioBase\000"
 4556      42617365 
 4556      00
 4557              	.LASF187:
 4558 05dc 43595F53 		.ascii	"CY_SAR_BAD_PARAM\000"
 4558      41525F42 
 4558      41445F50 
 4558      4152414D 
 4558      00
 4559              	.LASF260:
 4560 05ed 4144435F 		.ascii	"ADC_InitConfig\000"
 4560      496E6974 
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 178


 4560      436F6E66 
 4560      696700
 4561              	.LASF272:
 4562 05fc 6368616E 		.ascii	"chanCount\000"
 4562      436F756E 
 4562      7400
 4563              	.LASF34:
 4564 0606 4449565F 		.ascii	"DIV_16_CTL\000"
 4564      31365F43 
 4564      544C00
 4565              	.LASF18:
 4566 0611 434C4F43 		.ascii	"CLOCK_CTL\000"
 4566      4B5F4354 
 4566      4C00
 4567              	.LASF256:
 4568 061b 656E6162 		.ascii	"enableMask\000"
 4568      6C654D61 
 4568      736B00
 4569              	.LASF170:
 4570 0626 63707573 		.ascii	"cpussSysTickCtlOffset\000"
 4570      73537973 
 4570      5469636B 
 4570      43746C4F 
 4570      66667365 
 4571              	.LASF126:
 4572 063c 75646250 		.ascii	"udbPresent\000"
 4572      72657365 
 4572      6E7400
 4573              	.LASF144:
 4574 0647 64775374 		.ascii	"dwStatusChIdxPos\000"
 4574      61747573 
 4574      43684964 
 4574      78506F73 
 4574      00
 4575              	.LASF90:
 4576 0658 5341525F 		.ascii	"SAR_V1_Type\000"
 4576      56315F54 
 4576      79706500 
 4577              	.LASF224:
 4578 0664 76726566 		.ascii	"vrefMvValue\000"
 4578      4D765661 
 4578      6C756500 
 4579              	.LASF67:
 4580 0670 53415455 		.ascii	"SATURATE_INTR_MASKED\000"
 4580      52415445 
 4580      5F494E54 
 4580      525F4D41 
 4580      534B4544 
 4581              	.LASF24:
 4582 0685 54525F4F 		.ascii	"TR_OUT_CTL\000"
 4582      55545F43 
 4582      544C00
 4583              	.LASF65:
 4584 0690 53415455 		.ascii	"SATURATE_INTR_SET\000"
 4584      52415445 
 4584      5F494E54 
 4584      525F5345 
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 179


 4584      5400
 4585              	.LASF40:
 4586 06a2 54525F47 		.ascii	"TR_GR\000"
 4586      5200
 4587              	.LASF271:
 4588 06a8 4144435F 		.ascii	"ADC_SetChanMask\000"
 4588      53657443 
 4588      68616E4D 
 4588      61736B00 
 4589              	.LASF182:
 4590 06b8 63686172 		.ascii	"char\000"
 4590      00
 4591              	.LASF291:
 4592 06bd 43795F53 		.ascii	"Cy_SysLib_AssertFailed\000"
 4592      79734C69 
 4592      625F4173 
 4592      73657274 
 4592      4661696C 
 4593              	.LASF216:
 4594 06d4 6368616E 		.ascii	"chanEn\000"
 4594      456E00
 4595              	.LASF156:
 4596 06db 70657269 		.ascii	"periDiv16_5CtlOffset\000"
 4596      44697631 
 4596      365F3543 
 4596      746C4F66 
 4596      66736574 
 4597              	.LASF243:
 4598 06f0 64697669 		.ascii	"dividerType\000"
 4598      64657254 
 4598      79706500 
 4599              	.LASF127:
 4600 06fc 73797350 		.ascii	"sysPmSimoPresent\000"
 4600      6D53696D 
 4600      6F507265 
 4600      73656E74 
 4600      00
 4601              	.LASF59:
 4602 070d 4348414E 		.ascii	"CHAN_RESULT_NEWVALUE\000"
 4602      5F524553 
 4602      554C545F 
 4602      4E455756 
 4602      414C5545 
 4603              	.LASF79:
 4604 0722 4156475F 		.ascii	"AVG_STAT\000"
 4604      53544154 
 4604      00
 4605              	.LASF247:
 4606 072b 64697669 		.ascii	"dividerValue\000"
 4606      64657256 
 4606      616C7565 
 4606      00
 4607              	.LASF13:
 4608 0738 75696E74 		.ascii	"uint8_t\000"
 4608      385F7400 
 4609              	.LASF190:
 4610 0740 63795F65 		.ascii	"cy_en_sar_status_t\000"
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 180


 4610      6E5F7361 
 4610      725F7374 
 4610      61747573 
 4610      5F7400
 4611              	.LASF150:
 4612 0753 70657269 		.ascii	"periDivCmdDivSelMsk\000"
 4612      44697643 
 4612      6D644469 
 4612      7653656C 
 4612      4D736B00 
 4613              	.LASF186:
 4614 0767 43595F53 		.ascii	"CY_SAR_SUCCESS\000"
 4614      41525F53 
 4614      55434345 
 4614      535300
 4615              	.LASF69:
 4616 0776 52414E47 		.ascii	"RANGE_INTR_SET\000"
 4616      455F494E 
 4616      54525F53 
 4616      455400
 4617              	.LASF242:
 4618 0785 4144435F 		.ascii	"ADC_CONFIG_STRUCT\000"
 4618      434F4E46 
 4618      49475F53 
 4618      54525543 
 4618      5400
 4619              	.LASF222:
 4620 0797 6D757853 		.ascii	"muxSwitchSqCtrl\000"
 4620      77697463 
 4620      68537143 
 4620      74726C00 
 4621              	.LASF215:
 4622 07a7 72616E67 		.ascii	"rangeCond\000"
 4622      65436F6E 
 4622      6400
 4623              	.LASF174:
 4624 07b1 63707573 		.ascii	"cpussRam0Ctl0\000"
 4624      7352616D 
 4624      3043746C 
 4624      3000
 4625              	.LASF10:
 4626 07bf 6C6F6E67 		.ascii	"long long int\000"
 4626      206C6F6E 
 4626      6720696E 
 4626      7400
 4627              	.LASF101:
 4628 07cd 69706342 		.ascii	"ipcBase\000"
 4628      61736500 
 4629              	.LASF142:
 4630 07d5 64774368 		.ascii	"dwChCtlPrioPos\000"
 4630      43746C50 
 4630      72696F50 
 4630      6F7300
 4631              	.LASF102:
 4632 07e4 63727970 		.ascii	"cryptoBase\000"
 4632      746F4261 
 4632      736500
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 181
=======
 4449              	.LASF296:
 4450 02d4 433A5C55 		.ascii	"C:\\Users\\zunis\\Desktop\\WorkPainDrain\\Pain_Drai"
 4450      73657273 
 4450      5C7A756E 
 4450      69735C44 
 4450      65736B74 
 4451 0302 6E5F4669 		.ascii	"n_Firmware\\PainDrain\\PainDrain.cydsn\000"
 4451      726D7761 
 4451      72655C50 
 4451      61696E44 
 4451      7261696E 
 4452              	.LASF297:
 4453 0327 4144435F 		.ascii	"ADC_IsEndConversion\000"
 4453      4973456E 
 4453      64436F6E 
 4453      76657273 
 4453      696F6E00 
 4454              	.LASF111:
 4455 033b 70726F74 		.ascii	"protVersion\000"
 4455      56657273 
 4455      696F6E00 
 4456              	.LASF201:
 4457 0347 43595F53 		.ascii	"CY_SAR_RANGE_COND_BELOW\000"
 4457      41525F52 
 4457      414E4745 
 4457      5F434F4E 
 4457      445F4245 
 4458              	.LASF151:
 4459 035f 70657269 		.ascii	"periDivCmdTypeSelPos\000"
 4459      44697643 
 4459      6D645479 
 4459      70655365 
 4459      6C506F73 
 4460              	.LASF168:
 4461 0374 63707573 		.ascii	"cpussTrimRamCtlOffset\000"
 4461      73547269 
 4461      6D52616D 
 4461      43746C4F 
 4461      66667365 
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 174


 4462              	.LASF179:
 4463 038a 63795F73 		.ascii	"cy_stc_device_t\000"
 4463      74635F64 
 4463      65766963 
 4463      655F7400 
 4464              	.LASF30:
 4465 039a 50455249 		.ascii	"PERI_PPU_PR_V1_Type\000"
 4465      5F505055 
 4465      5F50525F 
 4465      56315F54 
 4465      79706500 
 4466              	.LASF284:
 4467 03ae 4144435F 		.ascii	"ADC_initVar\000"
 4467      696E6974 
 4467      56617200 
 4468              	.LASF16:
 4469 03ba 75696E74 		.ascii	"uint32_t\000"
 4469      33325F74 
 4469      00
 4470              	.LASF161:
 4471 03c3 6770696F 		.ascii	"gpioPrtCfgOutOffset\000"
 4471      50727443 
 4471      66674F75 
 4471      744F6666 
 4471      73657400 
 4472              	.LASF60:
 4473 03d7 494E5452 		.ascii	"INTR\000"
 4473      00
 4474              	.LASF183:
 4475 03dc 666C6F61 		.ascii	"float\000"
 4475      7400
 4476              	.LASF104:
 4477 03e2 63727970 		.ascii	"cryptoVersion\000"
 4477      746F5665 
 4477      7273696F 
 4477      6E00
 4478              	.LASF133:
 4479 03f0 666C6173 		.ascii	"flashProgramDelay\000"
 4479      6850726F 
 4479      6772616D 
 4479      44656C61 
 4479      7900
 4480              	.LASF249:
 4481 0402 62617365 		.ascii	"base\000"
 4481      00
 4482              	.LASF238:
 4483 0407 6E756D43 		.ascii	"numChannels\000"
 4483      68616E6E 
 4483      656C7300 
 4484              	.LASF20:
 4485 0413 534C5F43 		.ascii	"SL_CTL\000"
 4485      544C00
 4486              	.LASF94:
 4487 041a 666C6173 		.ascii	"flashcBase\000"
 4487      68634261 
 4487      736500
 4488              	.LASF14:
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 175


 4489 0425 696E7431 		.ascii	"int16_t\000"
 4489      365F7400 
 4490              	.LASF160:
 4491 042d 6770696F 		.ascii	"gpioPrtCfgInOffset\000"
 4491      50727443 
 4491      6667496E 
 4491      4F666673 
 4491      657400
 4492              	.LASF275:
 4493 0440 72657375 		.ascii	"result\000"
 4493      6C7400
 4494              	.LASF11:
 4495 0447 6C6F6E67 		.ascii	"long long unsigned int\000"
 4495      206C6F6E 
 4495      6720756E 
 4495      7369676E 
 4495      65642069 
 4496              	.LASF157:
 4497 045e 70657269 		.ascii	"periDiv24_5CtlOffset\000"
 4497      44697632 
 4497      345F3543 
 4497      746C4F66 
 4497      66736574 
 4498              	.LASF162:
 4499 0473 6770696F 		.ascii	"gpioPrtCfgSioOffset\000"
 4499      50727443 
 4499      66675369 
 4499      6F4F6666 
 4499      73657400 
 4500              	.LASF77:
 4501 0487 52455345 		.ascii	"RESERVED7\000"
 4501      52564544 
 4501      3700
 4502              	.LASF116:
 4503 0491 63707573 		.ascii	"cpussIpc0Irq\000"
 4503      73497063 
 4503      30497271 
 4503      00
 4504              	.LASF276:
 4505 049e 4144435F 		.ascii	"ADC_Init\000"
 4505      496E6974 
 4505      00
 4506              	.LASF48:
 4507 04a7 53414D50 		.ascii	"SAMPLE_TIME23\000"
 4507      4C455F54 
 4507      494D4532 
 4507      3300
 4508              	.LASF214:
 4509 04b5 72616E67 		.ascii	"rangeThres\000"
 4509      65546872 
 4509      657300
 4510              	.LASF5:
 4511 04c0 5F5F7569 		.ascii	"__uint16_t\000"
 4511      6E743136 
 4511      5F7400
 4512              	.LASF202:
 4513 04cb 43595F53 		.ascii	"CY_SAR_RANGE_COND_INSIDE\000"
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 176


 4513      41525F52 
 4513      414E4745 
 4513      5F434F4E 
 4513      445F494E 
 4514              	.LASF266:
 4515 04e4 4144435F 		.ascii	"ADC_IRQ_Disable\000"
 4515      4952515F 
 4515      44697361 
 4515      626C6500 
 4516              	.LASF226:
 4517 04f4 63795F73 		.ascii	"cy_stc_sar_config_t\000"
 4517      74635F73 
 4517      61725F63 
 4517      6F6E6669 
 4517      675F7400 
 4518              	.LASF210:
 4519 0508 6374726C 		.ascii	"ctrl\000"
 4519      00
 4520              	.LASF278:
 4521 050d 4144435F 		.ascii	"ADC_Start\000"
 4521      53746172 
 4521      7400
 4522              	.LASF74:
 4523 0517 494E4A5F 		.ascii	"INJ_CHAN_CONFIG\000"
 4523      4348414E 
 4523      5F434F4E 
 4523      46494700 
 4524              	.LASF138:
 4525 0527 666C6173 		.ascii	"flashCtlMainWs3Freq\000"
 4525      6843746C 
 4525      4D61696E 
 4525      57733346 
 4525      72657100 
 4526              	.LASF120:
 4527 053b 73727373 		.ascii	"srssNumPll\000"
 4527      4E756D50 
 4527      6C6C00
 4528              	.LASF194:
 4529 0546 43595F53 		.ascii	"CY_SAR_RETURN_STATUS\000"
 4529      41525F52 
 4529      45545552 
 4529      4E5F5354 
 4529      41545553 
 4530              	.LASF38:
 4531 055b 54525F43 		.ascii	"TR_CMD\000"
 4531      4D4400
 4532              	.LASF91:
 4533 0562 5341525F 		.ascii	"SAR_Type\000"
 4533      54797065 
 4533      00
 4534              	.LASF288:
 4535 056b 43795F53 		.ascii	"Cy_SAR_DeInit\000"
 4535      41525F44 
 4535      65496E69 
 4535      7400
 4536              	.LASF231:
 4537 0579 63795F65 		.ascii	"cy_en_sysclk_status_t\000"
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 177


 4537      6E5F7379 
 4537      73636C6B 
 4537      5F737461 
 4537      7475735F 
 4538              	.LASF6:
 4539 058f 73686F72 		.ascii	"short unsigned int\000"
 4539      7420756E 
 4539      7369676E 
 4539      65642069 
 4539      6E7400
 4540              	.LASF131:
 4541 05a2 666C6173 		.ascii	"flashPipeRequired\000"
 4541      68506970 
 4541      65526571 
 4541      75697265 
 4541      6400
 4542              	.LASF70:
 4543 05b4 52414E47 		.ascii	"RANGE_INTR_MASK\000"
 4543      455F494E 
 4543      54525F4D 
 4543      41534B00 
 4544              	.LASF277:
 4545 05c4 636F6E66 		.ascii	"configNum\000"
 4545      69674E75 
 4545      6D00
 4546              	.LASF225:
 4547 05ce 5F426F6F 		.ascii	"_Bool\000"
 4547      6C00
 4548              	.LASF50:
 4549 05d4 52414E47 		.ascii	"RANGE_COND\000"
 4549      455F434F 
 4549      4E4400
 4550              	.LASF135:
 4551 05df 666C6173 		.ascii	"flashCtlMainWs0Freq\000"
 4551      6843746C 
 4551      4D61696E 
 4551      57733046 
 4551      72657100 
 4552              	.LASF36:
 4553 05f3 4449565F 		.ascii	"DIV_24_5_CTL\000"
 4553      32345F35 
 4553      5F43544C 
 4553      00
 4554              	.LASF145:
 4555 0600 64775374 		.ascii	"dwStatusChIdxMsk\000"
 4555      61747573 
 4555      43684964 
 4555      784D736B 
 4555      00
 4556              	.LASF207:
 4557 0611 43595F53 		.ascii	"CY_SAR_INTR_EOS_MASK\000"
 4557      41525F49 
 4557      4E54525F 
 4557      454F535F 
 4557      4D41534B 
 4558              	.LASF99:
 4559 0626 6770696F 		.ascii	"gpioBase\000"
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 178


 4559      42617365 
 4559      00
 4560              	.LASF187:
 4561 062f 43595F53 		.ascii	"CY_SAR_BAD_PARAM\000"
 4561      41525F42 
 4561      41445F50 
 4561      4152414D 
 4561      00
 4562              	.LASF260:
 4563 0640 4144435F 		.ascii	"ADC_InitConfig\000"
 4563      496E6974 
 4563      436F6E66 
 4563      696700
 4564              	.LASF272:
 4565 064f 6368616E 		.ascii	"chanCount\000"
 4565      436F756E 
 4565      7400
 4566              	.LASF34:
 4567 0659 4449565F 		.ascii	"DIV_16_CTL\000"
 4567      31365F43 
 4567      544C00
 4568              	.LASF18:
 4569 0664 434C4F43 		.ascii	"CLOCK_CTL\000"
 4569      4B5F4354 
 4569      4C00
 4570              	.LASF256:
 4571 066e 656E6162 		.ascii	"enableMask\000"
 4571      6C654D61 
 4571      736B00
 4572              	.LASF170:
 4573 0679 63707573 		.ascii	"cpussSysTickCtlOffset\000"
 4573      73537973 
 4573      5469636B 
 4573      43746C4F 
 4573      66667365 
 4574              	.LASF126:
 4575 068f 75646250 		.ascii	"udbPresent\000"
 4575      72657365 
 4575      6E7400
 4576              	.LASF144:
 4577 069a 64775374 		.ascii	"dwStatusChIdxPos\000"
 4577      61747573 
 4577      43684964 
 4577      78506F73 
 4577      00
 4578              	.LASF90:
 4579 06ab 5341525F 		.ascii	"SAR_V1_Type\000"
 4579      56315F54 
 4579      79706500 
 4580              	.LASF224:
 4581 06b7 76726566 		.ascii	"vrefMvValue\000"
 4581      4D765661 
 4581      6C756500 
 4582              	.LASF67:
 4583 06c3 53415455 		.ascii	"SATURATE_INTR_MASKED\000"
 4583      52415445 
 4583      5F494E54 
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 179


 4583      525F4D41 
 4583      534B4544 
 4584              	.LASF24:
 4585 06d8 54525F4F 		.ascii	"TR_OUT_CTL\000"
 4585      55545F43 
 4585      544C00
 4586              	.LASF65:
 4587 06e3 53415455 		.ascii	"SATURATE_INTR_SET\000"
 4587      52415445 
 4587      5F494E54 
 4587      525F5345 
 4587      5400
 4588              	.LASF40:
 4589 06f5 54525F47 		.ascii	"TR_GR\000"
 4589      5200
 4590              	.LASF271:
 4591 06fb 4144435F 		.ascii	"ADC_SetChanMask\000"
 4591      53657443 
 4591      68616E4D 
 4591      61736B00 
 4592              	.LASF182:
 4593 070b 63686172 		.ascii	"char\000"
 4593      00
 4594              	.LASF291:
 4595 0710 43795F53 		.ascii	"Cy_SysLib_AssertFailed\000"
 4595      79734C69 
 4595      625F4173 
 4595      73657274 
 4595      4661696C 
 4596              	.LASF216:
 4597 0727 6368616E 		.ascii	"chanEn\000"
 4597      456E00
 4598              	.LASF156:
 4599 072e 70657269 		.ascii	"periDiv16_5CtlOffset\000"
 4599      44697631 
 4599      365F3543 
 4599      746C4F66 
 4599      66736574 
 4600              	.LASF243:
 4601 0743 64697669 		.ascii	"dividerType\000"
 4601      64657254 
 4601      79706500 
 4602              	.LASF127:
 4603 074f 73797350 		.ascii	"sysPmSimoPresent\000"
 4603      6D53696D 
 4603      6F507265 
 4603      73656E74 
 4603      00
 4604              	.LASF59:
 4605 0760 4348414E 		.ascii	"CHAN_RESULT_NEWVALUE\000"
 4605      5F524553 
 4605      554C545F 
 4605      4E455756 
 4605      414C5545 
 4606              	.LASF79:
 4607 0775 4156475F 		.ascii	"AVG_STAT\000"
 4607      53544154 
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 180


 4607      00
 4608              	.LASF247:
 4609 077e 64697669 		.ascii	"dividerValue\000"
 4609      64657256 
 4609      616C7565 
 4609      00
 4610              	.LASF13:
 4611 078b 75696E74 		.ascii	"uint8_t\000"
 4611      385F7400 
 4612              	.LASF190:
 4613 0793 63795F65 		.ascii	"cy_en_sar_status_t\000"
 4613      6E5F7361 
 4613      725F7374 
 4613      61747573 
 4613      5F7400
 4614              	.LASF150:
 4615 07a6 70657269 		.ascii	"periDivCmdDivSelMsk\000"
 4615      44697643 
 4615      6D644469 
 4615      7653656C 
 4615      4D736B00 
 4616              	.LASF186:
 4617 07ba 43595F53 		.ascii	"CY_SAR_SUCCESS\000"
 4617      41525F53 
 4617      55434345 
 4617      535300
 4618              	.LASF69:
 4619 07c9 52414E47 		.ascii	"RANGE_INTR_SET\000"
 4619      455F494E 
 4619      54525F53 
 4619      455400
 4620              	.LASF242:
 4621 07d8 4144435F 		.ascii	"ADC_CONFIG_STRUCT\000"
 4621      434F4E46 
 4621      49475F53 
 4621      54525543 
 4621      5400
 4622              	.LASF222:
 4623 07ea 6D757853 		.ascii	"muxSwitchSqCtrl\000"
 4623      77697463 
 4623      68537143 
 4623      74726C00 
 4624              	.LASF215:
 4625 07fa 72616E67 		.ascii	"rangeCond\000"
 4625      65436F6E 
 4625      6400
 4626              	.LASF174:
 4627 0804 63707573 		.ascii	"cpussRam0Ctl0\000"
 4627      7352616D 
 4627      3043746C 
 4627      3000
 4628              	.LASF10:
 4629 0812 6C6F6E67 		.ascii	"long long int\000"
 4629      206C6F6E 
 4629      6720696E 
 4629      7400
 4630              	.LASF101:
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 181
>>>>>>> Isac


 4631 0820 69706342 		.ascii	"ipcBase\000"
 4631      61736500 
 4632              	.LASF142:
 4633 0828 64774368 		.ascii	"dwChCtlPrioPos\000"
 4633      43746C50 
 4633      72696F50 
 4633      6F7300
 4634              	.LASF102:
 4635 0837 63727970 		.ascii	"cryptoBase\000"
 4635      746F4261 
 4635      736500
 4636              	.LASF208:
 4637 0842 43595F53 		.ascii	"CY_SAR_INTR_OVERFLOW_MASK\000"
 4637      41525F49 
 4637      4E54525F 
 4637      4F564552 
 4637      464C4F57 
 4638              	.LASF255:
 4639 085c 43795F53 		.ascii	"Cy_SAR_SetChanMask\000"
 4639      41525F53 
 4639      65744368 
 4639      616E4D61 
 4639      736B00
 4640              	.LASF209:
 4641 086f 43595F53 		.ascii	"CY_SAR_INTR_FW_COLLISION_MASK\000"
 4641      41525F49 
 4641      4E54525F 
 4641      46575F43 
 4641      4F4C4C49 
 4642              	.LASF132:
 4643 088d 666C6173 		.ascii	"flashWriteDelay\000"
 4643      68577269 
 4643      74654465 
 4643      6C617900 
 4644              	.LASF294:
 4645 089d 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4645      43313120 
 4645      352E342E 
 4645      31203230 
 4645      31363036 
 4646 08d0 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0plus -mthumb -"
 4646      20726576 
 4646      6973696F 
 4646      6E203233 
 4646      37373135 
 4647 0903 67202D4F 		.ascii	"g -Og -ffunction-sections -ffat-lto-objects\000"
 4647      67202D66 
 4647      66756E63 
 4647      74696F6E 
 4647      2D736563 
 4648              	.LASF43:
 4649 092f 5050555F 		.ascii	"PPU_GR\000"
 4649      475200
 4650              	.LASF246:
 4651 0936 43795F53 		.ascii	"Cy_SysClk_PeriphSetDivider\000"
 4651      7973436C 
 4651      6B5F5065 
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 182


 4651      72697068 
 4651      53657444 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 182


=======
>>>>>>> Isac
 4652              	.LASF4:
 4653 0951 5F5F696E 		.ascii	"__int16_t\000"
 4653      7431365F 
 4653      7400
 4654              	.LASF253:
 4655 095b 4144435F 		.ascii	"ADC_intSarClock_Disable\000"
 4655      696E7453 
 4655      6172436C 
 4655      6F636B5F 
 4655      44697361 
 4656              	.LASF265:
 4657 0973 4144435F 		.ascii	"ADC_IRQ_Enable\000"
 4657      4952515F 
 4657      456E6162 
 4657      6C6500
 4658              	.LASF285:
 4659 0982 4144435F 		.ascii	"ADC_selected\000"
 4659      73656C65 
 4659      63746564 
 4659      00
 4660              	.LASF98:
 4661 098f 6873696F 		.ascii	"hsiomBase\000"
 4661      6D426173 
 4661      6500
 4662              	.LASF290:
 4663 0999 43795F53 		.ascii	"Cy_SAR_StartConvert\000"
 4663      41525F53 
 4663      74617274 
 4663      436F6E76 
 4663      65727400 
 4664              	.LASF55:
 4665 09ad 4348414E 		.ascii	"CHAN_RESULT\000"
 4665      5F524553 
 4665      554C5400 
 4666              	.LASF164:
 4667 09b9 63707573 		.ascii	"cpussCm4ClockCtlOffset\000"
 4667      73436D34 
 4667      436C6F63 
 4667      6B43746C 
 4667      4F666673 
 4668              	.LASF175:
 4669 09d0 63707573 		.ascii	"cpussRam1Ctl0\000"
 4669      7352616D 
 4669      3143746C 
 4669      3000
 4670              	.LASF148:
 4671 09de 70657269 		.ascii	"periTrGrOffset\000"
 4671      54724772 
 4671      4F666673 
 4671      657400
 4672              	.LASF68:
 4673 09ed 52414E47 		.ascii	"RANGE_INTR\000"
 4673      455F494E 
 4673      545200
 4674              	.LASF114:
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 183


 4675 09f8 63707573 		.ascii	"cpussDwChNr\000"
 4675      73447743 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 183


=======
>>>>>>> Isac
 4675      684E7200 
 4676              	.LASF281:
 4677 0a04 4144435F 		.ascii	"ADC_SelectConfig\000"
 4677      53656C65 
 4677      6374436F 
 4677      6E666967 
 4677      00
 4678              	.LASF252:
 4679 0a15 4144435F 		.ascii	"ADC_intSarClock_Enable\000"
 4679      696E7453 
 4679      6172436C 
 4679      6F636B5F 
 4679      456E6162 
 4680              	.LASF62:
 4681 0a2c 494E5452 		.ascii	"INTR_MASK\000"
 4681      5F4D4153 
 4681      4B00
 4682              	.LASF251:
 4683 0a36 4144435F 		.ascii	"ADC_intSarClock_SetDivider\000"
 4683      696E7453 
 4683      6172436C 
 4683      6F636B5F 
 4683      53657444 
 4684              	.LASF46:
 4685 0a51 53414D50 		.ascii	"SAMPLE_CTRL\000"
 4685      4C455F43 
 4685      54524C00 
 4686              	.LASF280:
 4687 0a5d 75736572 		.ascii	"userIsr\000"
 4687      49737200 
 4688              	.LASF188:
 4689 0a65 43595F53 		.ascii	"CY_SAR_TIMEOUT\000"
 4689      41525F54 
 4689      494D454F 
 4689      555400
 4690              	.LASF185:
 4691 0a74 75696E74 		.ascii	"uint32\000"
 4691      333200
 4692              	.LASF112:
 4693 0a7b 63707573 		.ascii	"cpussIpcNr\000"
 4693      73497063 
 4693      4E7200
 4694              	.LASF82:
 4695 0a86 4D55585F 		.ascii	"MUX_SWITCH_CLEAR0\000"
 4695      53574954 
 4695      43485F43 
 4695      4C454152 
 4695      3000
 4696              	.LASF268:
 4697 0a98 6D61736B 		.ascii	"mask\000"
 4697      00
 4698              	.LASF124:
 4699 0a9d 70617373 		.ascii	"passSarChannels\000"
 4699      53617243 
 4699      68616E6E 
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 184


 4699      656C7300 
 4700              	.LASF176:
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 184


 4701 0a93 63707573 		.ascii	"cpussRam2Ctl0\000"
=======
 4701 0aad 63707573 		.ascii	"cpussRam2Ctl0\000"
>>>>>>> Isac
 4701      7352616D 
 4701      3243746C 
 4701      3000
 4702              	.LASF191:
 4703 0abb 43595F53 		.ascii	"CY_SAR_START_CONVERT_SINGLE_SHOT\000"
 4703      41525F53 
 4703      54415254 
 4703      5F434F4E 
 4703      56455254 
 4704              	.LASF52:
 4705 0adc 53544152 		.ascii	"START_CTRL\000"
 4705      545F4354 
 4705      524C00
 4706              	.LASF234:
 4707 0ae7 43595F53 		.ascii	"CY_SYSCLK_DIV_16_5_BIT\000"
 4707      5953434C 
 4707      4B5F4449 
 4707      565F3136 
 4707      5F355F42 
 4708              	.LASF155:
 4709 0afe 70657269 		.ascii	"periDiv16CtlOffset\000"
 4709      44697631 
 4709      3643746C 
 4709      4F666673 
 4709      657400
 4710              	.LASF221:
 4711 0b11 6D757853 		.ascii	"muxSwitch\000"
 4711      77697463 
 4711      6800
 4712              	.LASF262:
 4713 0b1b 4144435F 		.ascii	"ADC_SetConvertMode\000"
 4713      53657443 
 4713      6F6E7665 
 4713      72744D6F 
 4713      646500
 4714              	.LASF92:
 4715 0b2e 6C6F6E67 		.ascii	"long double\000"
 4715      20646F75 
 4715      626C6500 
 4716              	.LASF15:
 4717 0b3a 75696E74 		.ascii	"uint16_t\000"
 4717      31365F74 
 4717      00
 4718              	.LASF97:
 4719 0b43 70726F74 		.ascii	"protBase\000"
 4719      42617365 
 4719      00
 4720              	.LASF147:
 4721 0b4c 70657269 		.ascii	"periTrCmdGrSelMsk\000"
 4721      5472436D 
 4721      64477253 
 4721      656C4D73 
 4721      6B00
 4722              	.LASF279:
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 185


 4723 0b5e 4144435F 		.ascii	"ADC_StartEx\000"
 4723      53746172 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 185


=======
>>>>>>> Isac
 4723      74457800 
 4724              	.LASF230:
 4725 0b6a 43595F53 		.ascii	"CY_SYSCLK_INVALID_STATE\000"
 4725      5953434C 
 4725      4B5F494E 
 4725      56414C49 
 4725      445F5354 
 4726              	.LASF212:
 4727 0b82 73616D70 		.ascii	"sampleTime01\000"
 4727      6C655469 
 4727      6D653031 
 4727      00
 4728              	.LASF267:
 4729 0b8f 4144435F 		.ascii	"ADC_SetEosMask\000"
 4729      53657445 
 4729      6F734D61 
 4729      736B00
 4730              	.LASF121:
 4731 0b9e 73727373 		.ascii	"srssNumHfroot\000"
 4731      4E756D48 
 4731      66726F6F 
 4731      7400
 4732              	.LASF233:
 4733 0bac 43595F53 		.ascii	"CY_SYSCLK_DIV_16_BIT\000"
 4733      5953434C 
 4733      4B5F4449 
 4733      565F3136 
 4733      5F424954 
 4734              	.LASF105:
 4735 0bc1 64775665 		.ascii	"dwVersion\000"
 4735      7273696F 
 4735      6E00
 4736              	.LASF137:
 4737 0bcb 666C6173 		.ascii	"flashCtlMainWs2Freq\000"
 4737      6843746C 
 4737      4D61696E 
 4737      57733246 
 4737      72657100 
 4738              	.LASF1:
 4739 0bdf 756E7369 		.ascii	"unsigned char\000"
 4739      676E6564 
 4739      20636861 
 4739      7200
 4740              	.LASF263:
 4741 0bed 636F6E66 		.ascii	"config\000"
 4741      696700
 4742              	.LASF200:
 4743 0bf4 43595F53 		.ascii	"CY_SAR_SWITCH_SEQ_CTRL_ENABLE\000"
 4743      41525F53 
 4743      57495443 
 4743      485F5345 
 4743      515F4354 
 4744              	.LASF17:
 4745 0c12 73697A65 		.ascii	"sizetype\000"
 4745      74797065 
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 186


 4745      00
 4746              	.LASF228:
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 186


 4747 0c01 43595F53 		.ascii	"CY_SYSCLK_BAD_PARAM\000"
=======
 4747 0c1b 43595F53 		.ascii	"CY_SYSCLK_BAD_PARAM\000"
>>>>>>> Isac
 4747      5953434C 
 4747      4B5F4241 
 4747      445F5041 
 4747      52414D00 
 4748              	.LASF172:
 4749 0c2f 63707573 		.ascii	"cpussCm4NmiCtlOffset\000"
 4749      73436D34 
 4749      4E6D6943 
 4749      746C4F66 
 4749      66736574 
 4750              	.LASF166:
 4751 0c44 63707573 		.ascii	"cpussCm0StatusOffset\000"
 4751      73436D30 
 4751      53746174 
 4751      75734F66 
 4751      66736574 
 4752              	.LASF154:
 4753 0c59 70657269 		.ascii	"periDiv8CtlOffset\000"
 4753      44697638 
 4753      43746C4F 
 4753      66667365 
 4753      7400
 4754              	.LASF37:
 4755 0c6b 52455345 		.ascii	"RESERVED2\000"
 4755      52564544 
 4755      3200
 4756              	.LASF39:
 4757 0c75 52455345 		.ascii	"RESERVED3\000"
 4757      52564544 
 4757      3300
 4758              	.LASF42:
 4759 0c7f 52455345 		.ascii	"RESERVED4\000"
 4759      52564544 
 4759      3400
 4760              	.LASF73:
 4761 0c89 52455345 		.ascii	"RESERVED5\000"
 4761      52564544 
 4761      3500
 4762              	.LASF75:
 4763 0c93 52455345 		.ascii	"RESERVED6\000"
 4763      52564544 
 4763      3600
 4764              	.LASF250:
 4765 0c9d 43795F53 		.ascii	"Cy_SAR_Disable\000"
 4765      41525F44 
 4765      69736162 
 4765      6C6500
 4766              	.LASF80:
 4767 0cac 52455345 		.ascii	"RESERVED8\000"
 4767      52564544 
 4767      3800
 4768              	.LASF83:
 4769 0cb6 52455345 		.ascii	"RESERVED9\000"
 4769      52564544 
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 187


 4769      3900
 4770              	.LASF287:
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 187


 4771 0ca6 4144435F 		.ascii	"ADC_allConfigs\000"
=======
 4771 0cc0 4144435F 		.ascii	"ADC_allConfigs\000"
>>>>>>> Isac
 4771      616C6C43 
 4771      6F6E6669 
 4771      677300
 4772              	.LASF44:
 4773 0ccf 50455249 		.ascii	"PERI_V1_Type\000"
 4773      5F56315F 
 4773      54797065 
 4773      00
 4774              	.LASF85:
 4775 0cdc 4D55585F 		.ascii	"MUX_SWITCH_SQ_CTRL\000"
 4775      53574954 
 4775      43485F53 
 4775      515F4354 
 4775      524C00
 4776              	.LASF7:
 4777 0cef 6C6F6E67 		.ascii	"long int\000"
 4777      20696E74 
 4777      00
 4778              	.LASF103:
 4779 0cf8 63707573 		.ascii	"cpussVersion\000"
 4779      73566572 
 4779      73696F6E 
 4779      00
 4780              	.LASF107:
 4781 0d05 6770696F 		.ascii	"gpioVersion\000"
 4781      56657273 
 4781      696F6E00 
 4782              	.LASF32:
 4783 0d11 4449565F 		.ascii	"DIV_CMD\000"
 4783      434D4400 
 4784              	.LASF106:
 4785 0d19 666C6173 		.ascii	"flashcVersion\000"
 4785      68635665 
 4785      7273696F 
 4785      6E00
 4786              	.LASF128:
 4787 0d27 70726F74 		.ascii	"protBusMasterMask\000"
 4787      4275734D 
 4787      61737465 
 4787      724D6173 
 4787      6B00
 4788              	.LASF203:
 4789 0d39 43595F53 		.ascii	"CY_SAR_RANGE_COND_ABOVE\000"
 4789      41525F52 
 4789      414E4745 
 4789      5F434F4E 
 4789      445F4142 
 4790              	.LASF259:
 4791 0d51 43795F53 		.ascii	"Cy_SysClk_PeriphEnableDivider\000"
 4791      7973436C 
 4791      6B5F5065 
 4791      72697068 
 4791      456E6162 
 4792              	.LASF49:
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 188


 4793 0d6f 52414E47 		.ascii	"RANGE_THRES\000"
 4793      455F5448 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 188


=======
>>>>>>> Isac
 4793      52455300 
 4794              	.LASF181:
 4795 0d7b 63686172 		.ascii	"char_t\000"
 4795      5F7400
 4796              	.LASF189:
 4797 0d82 43595F53 		.ascii	"CY_SAR_CONVERSION_NOT_COMPLETE\000"
 4797      41525F43 
 4797      4F4E5645 
 4797      5253494F 
 4797      4E5F4E4F 
 4798              	.LASF54:
 4799 0da1 4348414E 		.ascii	"CHAN_WORK\000"
 4799      5F574F52 
 4799      4B00
 4800              	.LASF184:
 4801 0dab 646F7562 		.ascii	"double\000"
 4801      6C6500
 4802              	.LASF295:
 4803 0db2 47656E65 		.ascii	"Generated_Source\\PSoC6\\ADC.c\000"
 4803      72617465 
 4803      645F536F 
 4803      75726365 
 4803      5C50536F 
 4804              	.LASF167:
 4805 0dcf 63707573 		.ascii	"cpussCm4PwrCtlOffset\000"
 4805      73436D34 
 4805      50777243 
 4805      746C4F66 
 4805      66736574 
 4806              	.LASF3:
 4807 0de4 5F5F7569 		.ascii	"__uint8_t\000"
 4807      6E74385F 
 4807      7400
 4808              	.LASF240:
 4809 0dee 6D697363 		.ascii	"miscConfig\000"
 4809      436F6E66 
 4809      696700
 4810              	.LASF158:
 4811 0df9 6770696F 		.ascii	"gpioPrtIntrCfgOffset\000"
 4811      50727449 
 4811      6E747243 
 4811      66674F66 
 4811      66736574 
 4812              	.LASF261:
 4813 0e0e 4144435F 		.ascii	"ADC_StartConvert\000"
 4813      53746172 
 4813      74436F6E 
 4813      76657274 
 4813      00
 4814              	.LASF63:
 4815 0e1f 494E5452 		.ascii	"INTR_MASKED\000"
 4815      5F4D4153 
 4815      4B454400 
 4816              	.LASF169:
 4817 0e2b 63707573 		.ascii	"cpussTrimRomCtlOffset\000"
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 189


 4817      73547269 
 4817      6D526F6D 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 189


=======
>>>>>>> Isac
 4817      43746C4F 
 4817      66667365 
 4818              	.LASF213:
 4819 0e41 73616D70 		.ascii	"sampleTime23\000"
 4819      6C655469 
 4819      6D653233 
 4819      00
 4820              	.LASF293:
 4821 0e4e 43795F53 		.ascii	"Cy_SAR_Enable\000"
 4821      41525F45 
 4821      6E61626C 
 4821      6500
 4822              	.LASF108:
 4823 0e5c 6873696F 		.ascii	"hsiomVersion\000"
 4823      6D566572 
 4823      73696F6E 
 4823      00
 4824              	.LASF9:
 4825 0e69 6C6F6E67 		.ascii	"long unsigned int\000"
 4825      20756E73 
 4825      69676E65 
 4825      6420696E 
 4825      7400
 4826              	.LASF248:
 4827 0e7b 72657456 		.ascii	"retVal\000"
 4827      616C00
 4828              	.LASF173:
 4829 0e82 63707573 		.ascii	"cpussRomCtl\000"
 4829      73526F6D 
 4829      43746C00 
 4830              	.LASF258:
 4831 0e8e 4144435F 		.ascii	"ADC_Stop\000"
 4831      53746F70 
 4831      00
 4832              	.LASF81:
 4833 0e97 4D55585F 		.ascii	"MUX_SWITCH0\000"
 4833      53574954 
 4833      43483000 
 4834              	.LASF57:
 4835 0ea3 4348414E 		.ascii	"CHAN_RESULT_UPDATED\000"
 4835      5F524553 
 4835      554C545F 
 4835      55504441 
 4835      54454400 
 4836              	.LASF196:
 4837 0eb7 63795F65 		.ascii	"cy_en_sar_return_mode_t\000"
 4837      6E5F7361 
 4837      725F7265 
 4837      7475726E 
 4837      5F6D6F64 
 4838              	.LASF53:
 4839 0ecf 4348414E 		.ascii	"CHAN_CONFIG\000"
 4839      5F434F4E 
 4839      46494700 
 4840              	.LASF211:
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 190


 4841 0edb 73616D70 		.ascii	"sampleCtrl\000"
 4841      6C654374 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 190


=======
>>>>>>> Isac
 4841      726C00
 4842              	.LASF206:
 4843 0ee6 43595F53 		.ascii	"CY_SAR_INTR_MASK_NONE\000"
 4843      41525F49 
 4843      4E54525F 
 4843      4D41534B 
 4843      5F4E4F4E 
 4844              	.LASF88:
 4845 0efc 414E415F 		.ascii	"ANA_TRIM0\000"
 4845      5452494D 
 4845      3000
 4846              	.LASF89:
 4847 0f06 414E415F 		.ascii	"ANA_TRIM1\000"
 4847      5452494D 
 4847      3100
 4848              	.LASF8:
 4849 0f10 5F5F7569 		.ascii	"__uint32_t\000"
 4849      6E743332 
 4849      5F7400
 4850              	.LASF180:
 4851 0f1b 63795F69 		.ascii	"cy_israddress\000"
 4851      73726164 
 4851      64726573 
 4851      7300
 4852              	.LASF197:
 4853 0f29 43595F53 		.ascii	"CY_SAR_SWITCH_OPEN\000"
 4853      41525F53 
 4853      57495443 
 4853      485F4F50 
 4853      454E00
 4854              	.LASF235:
 4855 0f3c 43595F53 		.ascii	"CY_SYSCLK_DIV_24_5_BIT\000"
 4855      5953434C 
 4855      4B5F4449 
 4855      565F3234 
 4855      5F355F42 
 4856              	.LASF66:
 4857 0f53 53415455 		.ascii	"SATURATE_INTR_MASK\000"
 4857      52415445 
 4857      5F494E54 
 4857      525F4D41 
 4857      534B00
 4858              	.LASF273:
 4859 0f66 7265744D 		.ascii	"retMode\000"
 4859      6F646500 
 4860              	.LASF87:
 4861 0f6e 52455345 		.ascii	"RESERVED10\000"
 4861      52564544 
 4861      313000
 4862              	.LASF134:
 4863 0f79 666C6173 		.ascii	"flashEraseDelay\000"
 4863      68457261 
 4863      73654465 
 4863      6C617900 
 4864              	.LASF241:
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 191


 4865 0f89 636C6B44 		.ascii	"clkDivider\000"
 4865      69766964 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 191


=======
>>>>>>> Isac
 4865      657200
 4866              	.LASF236:
 4867 0f94 63795F65 		.ascii	"cy_en_divider_types_t\000"
 4867      6E5F6469 
 4867      76696465 
 4867      725F7479 
 4867      7065735F 
 4868              	.LASF254:
 4869 0faa 43795F53 		.ascii	"Cy_SAR_SetInterruptMask\000"
 4869      41525F53 
 4869      6574496E 
 4869      74657272 
 4869      7570744D 
 4870              	.LASF274:
 4871 0fc2 656E644F 		.ascii	"endOfConversion\000"
 4871      66436F6E 
 4871      76657273 
 4871      696F6E00 
 4872              	.LASF199:
 4873 0fd2 43595F53 		.ascii	"CY_SAR_SWITCH_SEQ_CTRL_DISABLE\000"
 4873      41525F53 
 4873      57495443 
 4873      485F5345 
 4873      515F4354 
 4874              	.LASF286:
 4875 0ff1 4144435F 		.ascii	"ADC_currentConfig\000"
 4875      63757272 
 4875      656E7443 
 4875      6F6E6669 
 4875      6700
 4876              	.LASF289:
 4877 1003 43795F53 		.ascii	"Cy_SAR_Init\000"
 4877      41525F49 
 4877      6E697400 
 4878              	.LASF130:
 4879 100f 666C6173 		.ascii	"flashRwwRequired\000"
 4879      68527777 
 4879      52657175 
 4879      69726564 
 4879      00
 4880              	.LASF159:
 4881 1020 6770696F 		.ascii	"gpioPrtCfgOffset\000"
 4881      50727443 
 4881      66674F66 
 4881      66736574 
 4881      00
 4882              	.LASF125:
 4883 1031 65704D6F 		.ascii	"epMonitorNr\000"
 4883      6E69746F 
 4883      724E7200 
 4884              	.LASF2:
 4885 103d 7369676E 		.ascii	"signed char\000"
 4885      65642063 
 4885      68617200 
 4886              	.LASF140:
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 192


 4887 1049 64774368 		.ascii	"dwChOffset\000"
 4887      4F666673 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 192


=======
>>>>>>> Isac
 4887      657400
 4888              	.LASF113:
 4889 1054 63707573 		.ascii	"cpussIpcIrqNr\000"
 4889      73497063 
 4889      4972714E 
 4889      7200
 4890              	.LASF143:
 4891 1062 64774368 		.ascii	"dwChCtlPreemptablePos\000"
 4891      43746C50 
 4891      7265656D 
 4891      70746162 
 4891      6C65506F 
 4892              	.LASF84:
 4893 1078 4D55585F 		.ascii	"MUX_SWITCH_DS_CTRL\000"
 4893      53574954 
 4893      43485F44 
 4893      535F4354 
 4893      524C00
 4894              	.LASF165:
 4895 108b 63707573 		.ascii	"cpussCm4StatusOffset\000"
 4895      73436D34 
 4895      53746174 
 4895      75734F66 
 4895      66736574 
 4896              	.LASF217:
 4897 10a0 6368616E 		.ascii	"chanConfig\000"
 4897      436F6E66 
 4897      696700
 4898              	.LASF86:
 4899 10ab 4D55585F 		.ascii	"MUX_SWITCH_STATUS\000"
 4899      53574954 
 4899      43485F53 
 4899      54415455 
 4899      5300
 4900              	.LASF26:
 4901 10bd 41444452 		.ascii	"ADDR0\000"
 4901      3000
 4902              	.LASF28:
 4903 10c3 41444452 		.ascii	"ADDR1\000"
 4903      3100
 4904              	.LASF110:
 4905 10c9 70657269 		.ascii	"periVersion\000"
 4905      56657273 
 4905      696F6E00 
 4906              	.LASF269:
 4907 10d5 6465496E 		.ascii	"deInitRouting\000"
 4907      6974526F 
 4907      7574696E 
 4907      6700
 4908              	.LASF223:
 4909 10e3 636F6E66 		.ascii	"configRouting\000"
 4909      6967526F 
 4909      7574696E 
 4909      6700
 4910              	.LASF100:
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 193


 4911 10f1 70617373 		.ascii	"passBase\000"
 4911      42617365 
<<<<<<< HEAD
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 193


=======
>>>>>>> Isac
 4911      00
 4912              	.LASF27:
 4913 10fa 41545430 		.ascii	"ATT0\000"
 4913      00
 4914              	.LASF29:
 4915 10ff 41545431 		.ascii	"ATT1\000"
 4915      00
 4916              	.LASF22:
 4917 1104 52455345 		.ascii	"RESERVED1\000"
 4917      52564544 
 4917      3100
 4918              	.LASF119:
 4919 110e 73727373 		.ascii	"srssNumClkpath\000"
 4919      4E756D43 
 4919      6C6B7061 
 4919      746800
 4920              	.LASF78:
 4921 111d 53544154 		.ascii	"STATUS\000"
 4921      555300
 4922              	.LASF23:
 4923 1124 50455249 		.ascii	"PERI_GR_V1_Type\000"
 4923      5F47525F 
 4923      56315F54 
 4923      79706500 
 4924              	.LASF139:
 4925 1134 666C6173 		.ascii	"flashCtlMainWs4Freq\000"
 4925      6843746C 
 4925      4D61696E 
 4925      57733446 
 4925      72657100 
 4926              	.LASF220:
 4927 1148 72616E67 		.ascii	"rangeIntrMask\000"
 4927      65496E74 
 4927      724D6173 
 4927      6B00
 4928              	.LASF198:
 4929 1156 43595F53 		.ascii	"CY_SAR_SWITCH_CLOSE\000"
 4929      41525F53 
 4929      57495443 
 4929      485F434C 
 4929      4F534500 
 4930              	.LASF270:
 4931 116a 696E7472 		.ascii	"intrMaskReg\000"
 4931      4D61736B 
 4931      52656700 
 4932              	.LASF205:
 4933 1176 63795F65 		.ascii	"cy_en_sar_range_detect_condition_t\000"
 4933      6E5F7361 
 4933      725F7261 
 4933      6E67655F 
 4933      64657465 
 4934              	.LASF21:
 4935 1199 54494D45 		.ascii	"TIMEOUT_CTL\000"
 4935      4F55545F 
 4935      43544C00 
ARM GAS  C:\Users\zunis\AppData\Local\Temp\ccRrfj8s.s 			page 194


 4936              	.LASF192:
<<<<<<< HEAD
 4937 118b 43595F53 		.ascii	"CY_SAR_START_CONVERT_CONTINUOUS\000"
ARM GAS  C:\Users\haske\AppData\Local\Temp\cccHdvKA.s 			page 194


=======
 4937 11a5 43595F53 		.ascii	"CY_SAR_START_CONVERT_CONTINUOUS\000"
>>>>>>> Isac
 4937      41525F53 
 4937      54415254 
 4937      5F434F4E 
 4937      56455254 
 4938              	.LASF31:
 4939 11c5 50455249 		.ascii	"PERI_PPU_GR_V1_Type\000"
 4939      5F505055 
 4939      5F47525F 
 4939      56315F54 
 4939      79706500 
 4940              	.LASF109:
 4941 11d9 69706356 		.ascii	"ipcVersion\000"
 4941      65727369 
 4941      6F6E00
 4942              	.LASF218:
 4943 11e4 696E7472 		.ascii	"intrMask\000"
 4943      4D61736B 
 4943      00
 4944              	.LASF146:
 4945 11ed 70657269 		.ascii	"periTrCmdOffset\000"
 4945      5472436D 
 4945      644F6666 
 4945      73657400 
 4946              	.LASF292:
 4947 11fd 43795F53 		.ascii	"Cy_SAR_IsEndConversion\000"
 4947      41525F49 
 4947      73456E64 
 4947      436F6E76 
 4947      65727369 
 4948              	.LASF257:
 4949 1214 4144435F 		.ascii	"ADC_Enable\000"
 4949      456E6162 
 4949      6C6500
 4950              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
